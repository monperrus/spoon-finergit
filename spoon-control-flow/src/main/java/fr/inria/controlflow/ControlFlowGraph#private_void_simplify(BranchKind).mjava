private
void
simplify
(
BranchKind
kind
)
{
try
{
List
<
ControlFlowNode
>
convergence
=
findNodesOfKind
(
kind
)
;
for
(
ControlFlowNode
n
:
convergence
)
{
Set
<
ControlFlowEdge
>
incoming
=
incomingEdgesOf
(
n
)
;
Set
<
ControlFlowEdge
>
outgoing
=
outgoingEdgesOf
(
n
)
;
if
(
incoming
!=
null
&&
outgoing
!=
null
)
{
for
(
ControlFlowEdge
in
:
incoming
)
{
for
(
ControlFlowEdge
out
:
outgoing
)
{
ControlFlowEdge
ed
=
addEdge
(
in
.
getSourceNode
(
)
,
out
.
getTargetNode
(
)
)
;
if
(
ed
!=
null
)
{
ed
.
setBackEdge
(
out
.
isBackEdge
(
)
||
in
.
isBackEdge
(
)
)
;
}
}
}
}
for
(
ControlFlowEdge
e
:
edgesOf
(
n
)
)
{
removeEdge
(
e
)
;
}
removeVertex
(
n
)
;
}
}
catch
(
Exception
e
)
{
System
.
out
.
println
(
toGraphVisText
(
)
)
;
throw
e
;
}
exitNode
=
null
;
}
