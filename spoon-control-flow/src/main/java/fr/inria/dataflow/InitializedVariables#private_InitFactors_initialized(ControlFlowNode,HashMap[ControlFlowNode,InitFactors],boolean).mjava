/** 
 * Finds the initialized variables at a given point in the control flow
 * @param n                    Node to find initialized variables
 * @param factors              already calculated factors for all nodes
 * @param includeDefinedInNode
 * @return
 */
private
InitFactors
initialized
(
ControlFlowNode
n
,
HashMap
<
ControlFlowNode
,
InitFactors
>
factors
,
boolean
includeDefinedInNode
)
{
if
(
n
.
getParent
(
)
==
null
)
{
throw
new
RuntimeException
(
"The node has no parent"
)
;
}
Set
<
CtVariableReference
>
defN
=
includeDefinedInNode
?
defined
(
n
)
:
new
HashSet
<
CtVariableReference
>
(
)
;
Set
<
CtVariableReference
>
usedN
=
includeDefinedInNode
?
used
(
n
)
:
new
HashSet
<
CtVariableReference
>
(
)
;
usedN
.
removeAll
(
defN
)
;
InitFactors
result
=
new
InitFactors
(
)
;
for
(
ControlFlowEdge
e
:
n
.
getParent
(
)
.
incomingEdgesOf
(
n
)
)
{
if
(
e
.
isBackEdge
(
)
)
{
continue
;
}
ControlFlowNode
p
=
e
.
getSourceNode
(
)
;
depth
++
;
InitFactors
fp
;
if
(
factors
.
containsKey
(
p
)
)
{
fp
=
factors
.
get
(
p
)
;
}
else
{
fp
=
initialized
(
p
,
factors
,
true
)
;
}
depth
--
;
if
(
result
.
defined
==
null
)
{
result
.
defined
=
new
HashSet
<
>
(
)
;
result
.
defined
.
addAll
(
fp
.
defined
)
;
}
else
{
result
.
defined
.
retainAll
(
fp
.
defined
)
;
}
fp
.
used
.
removeAll
(
fp
.
defined
)
;
result
.
used
.
addAll
(
fp
.
used
)
;
}
if
(
result
.
defined
==
null
)
{
result
.
defined
=
defN
;
}
else
{
result
.
defined
.
addAll
(
defN
)
;
}
result
.
used
.
addAll
(
usedN
)
;
result
.
used
.
removeAll
(
result
.
defined
)
;
factors
.
put
(
n
,
result
)
;
return
result
;
}
