/** 
 * Build this graph (* means fictitious nodes) X1 -X2 - O1 |    |   | \ __*1 _/ | O2 Simplify onto this X1 -X2 - O1 |    |   | \__ O2 __/
 */
@Test
public
void
testSimplify
(
)
{
ControlFlowGraph
graph
=
new
ControlFlowGraph
(
)
;
CtStatement
s
=
new
CtIfImpl
(
)
;
ControlFlowNode
branch1
=
new
ControlFlowNode
(
s
,
graph
,
BRANCH
)
;
ControlFlowNode
branch2
=
new
ControlFlowNode
(
null
,
graph
,
BRANCH
)
;
ControlFlowNode
node1
=
new
ControlFlowNode
(
null
,
graph
,
STATEMENT
)
;
ControlFlowNode
node2
=
new
ControlFlowNode
(
null
,
graph
,
STATEMENT
)
;
ControlFlowNode
fictitious
=
new
ControlFlowNode
(
null
,
graph
,
CONVERGE
)
;
graph
.
addEdge
(
branch1
,
branch2
)
;
graph
.
addEdge
(
branch1
,
fictitious
)
;
graph
.
addEdge
(
branch2
,
node1
)
;
graph
.
addEdge
(
branch2
,
fictitious
)
;
graph
.
addEdge
(
node1
,
fictitious
)
;
graph
.
addEdge
(
fictitious
,
node2
)
;
graph
.
simplifyConvergenceNodes
(
)
;
assertTrue
(
graph
.
containsEdge
(
branch1
,
node2
)
)
;
assertTrue
(
graph
.
containsEdge
(
branch2
,
node2
)
)
;
assertTrue
(
graph
.
containsEdge
(
node1
,
node2
)
)
;
assertFalse
(
graph
.
containsVertex
(
fictitious
)
)
;
}
