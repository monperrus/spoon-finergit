@Test
public
void
testRunComplex
(
)
throws
Exception
{
ControlFlowGraph
graph
=
ForwardFlowBuilderVisitorTest
.
buildGraph
(
this
.
getClass
(
)
.
getResource
(
"/initialized"
)
.
toURI
(
)
.
getPath
(
)
,
"makewt"
,
true
)
;
System
.
out
.
println
(
"Compiled OK"
)
;
InitializedVariables
vars
=
new
InitializedVariables
(
)
;
graph
.
simplify
(
)
;
System
.
out
.
println
(
graph
.
toGraphVisText
(
)
)
;
ControlFlowNode
n
=
ControlFlowBuilder
.
firstNode
(
graph
,
graph
.
branches
(
)
.
get
(
7
)
.
getStatement
(
)
.
getParent
(
)
)
;
vars
.
run
(
n
)
;
HashSet
<
String
>
names
=
new
HashSet
<
>
(
)
;
for
(
CtVariableReference
v
:
vars
.
getInitialized
(
)
)
names
.
add
(
v
.
getSimpleName
(
)
)
;
assertEquals
(
vars
.
getInitialized
(
)
.
size
(
)
,
11
)
;
assertTrue
(
names
.
contains
(
"wn4r"
)
)
;
assertTrue
(
names
.
contains
(
"wk1r"
)
)
;
assertTrue
(
names
.
contains
(
"wk3r"
)
)
;
assertTrue
(
names
.
contains
(
"ip"
)
)
;
assertTrue
(
names
.
contains
(
"w"
)
)
;
assertTrue
(
names
.
contains
(
"delta"
)
)
;
assertTrue
(
names
.
contains
(
"nw1"
)
)
;
assertTrue
(
names
.
contains
(
"nw"
)
)
;
assertTrue
(
names
.
contains
(
"nw0"
)
)
;
assertTrue
(
names
.
contains
(
"delta2"
)
)
;
assertTrue
(
names
.
contains
(
"nwh"
)
)
;
}
