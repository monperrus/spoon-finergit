public
void
realForwardFull
(
final
double
[
]
a
,
final
int
offa
,
int
plan
)
{
final
int
twon
=
2
*
(
n
)
;
switch
(
plan
)
{
case
1
:
realForwardFull
(
a
,
offa
,
plan
)
;
{
int
idx1
;
int
idx2
;
for
(
int
k
=
0
;
k
<
(
(
n
)
/
2
)
;
k
++
)
{
idx1
=
2
*
k
;
idx2
=
offa
+
(
(
twon
-
idx1
)
%
twon
)
;
a
[
idx2
]
=
a
[
(
offa
+
idx1
)
]
;
a
[
(
idx2
+
1
)
]
=
-
(
a
[
(
(
offa
+
idx1
)
+
1
)
]
)
;
}
}
a
[
(
offa
+
(
n
)
)
]
=
-
(
a
[
(
offa
+
1
)
]
)
;
a
[
(
offa
+
1
)
]
=
0
;
break
;
case
2
:
realForwardFull
(
a
,
offa
,
plan
)
;
int
m
;
if
(
(
(
n
)
%
2
)
==
0
)
{
m
=
(
n
)
/
2
;
}
else
{
m
=
(
(
n
)
+
1
)
/
2
;
}
for
(
int
k
=
1
;
k
<
m
;
k
++
)
{
int
idx1
=
(
offa
+
twon
)
-
(
2
*
k
)
;
int
idx2
=
offa
+
(
2
*
k
)
;
a
[
(
idx1
+
1
)
]
=
-
(
a
[
idx2
]
)
;
a
[
idx1
]
=
a
[
(
idx2
-
1
)
]
;
}
for
(
int
k
=
1
;
k
<
(
n
)
;
k
++
)
{
int
idx
=
(
offa
+
(
n
)
)
-
k
;
double
tmp
=
a
[
(
idx
+
1
)
]
;
a
[
(
idx
+
1
)
]
=
a
[
idx
]
;
a
[
idx
]
=
tmp
;
}
a
[
(
offa
+
1
)
]
=
0
;
break
;
case
3
:
realForwardFull
(
a
,
offa
,
-
1
)
;
break
;
}
}
