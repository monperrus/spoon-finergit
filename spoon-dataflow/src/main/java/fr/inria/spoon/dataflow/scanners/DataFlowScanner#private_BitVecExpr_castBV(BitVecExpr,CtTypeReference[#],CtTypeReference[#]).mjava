/** 
 * Applies cast to the bit-vector expression, returns resulting bit-vector expression.
 */
private
BitVecExpr
castBV
(
BitVecExpr
bitVec
,
CtTypeReference
<
?
>
fromType
,
CtTypeReference
<
?
>
toType
)
{
if
(
!
isCalculable
(
toType
)
)
{
return
null
;
}
int
newSize
=
TypeUtils
.
getPrimitiveTypeSize
(
toType
)
;
int
sizeDifference
=
newSize
-
bitVec
.
getSortSize
(
)
;
if
(
sizeDifference
>
0
)
{
if
(
!
isChar
(
fromType
)
)
{
return
context
.
mkSignExt
(
sizeDifference
,
bitVec
)
;
}
else
{
return
context
.
mkZeroExt
(
sizeDifference
,
bitVec
)
;
}
}
else
if
(
sizeDifference
<
0
)
{
return
context
.
mkExtract
(
newSize
-
1
,
0
,
bitVec
)
;
}
return
bitVec
;
}
