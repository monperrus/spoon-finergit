/** 
 * Applies casts to the expression, returns resulting expression.
 */
private
Expr
applyCasts
(
Expr
expr
,
CtTypeReference
<
?
>
originalType
,
List
<
CtTypeReference
<
?
>
>
casts
)
{
if
(
expr
==
null
)
{
return
null
;
}
for
(
int
i
=
casts
.
size
(
)
-
1
;
i
>=
0
;
i
--
)
{
CtTypeReference
<
?
>
castType
=
casts
.
get
(
i
)
;
if
(
expr
instanceof
BitVecExpr
)
{
expr
=
castBV
(
(
BitVecExpr
)
expr
,
originalType
,
castType
)
;
}
else
if
(
expr
instanceof
RealExpr
)
{
expr
=
makeFreshConstFromType
(
context
,
castType
)
;
}
else
if
(
expr
instanceof
IntExpr
)
{
if
(
castType
.
isPrimitive
(
)
)
{
expr
=
memory
.
read
(
originalType
.
unbox
(
)
,
(
IntExpr
)
expr
)
;
}
}
if
(
!
castType
.
isPrimitive
(
)
&&
originalType
.
isPrimitive
(
)
)
{
int
nextPointer
=
memory
.
nextPointer
(
)
;
IntExpr
index
=
context
.
mkInt
(
nextPointer
)
;
if
(
isCalculable
(
castType
)
&&
isCalculable
(
originalType
)
&&
expr
!=
null
)
{
memory
.
write
(
castType
.
unbox
(
)
,
index
,
expr
)
;
}
expr
=
index
;
}
originalType
=
castType
;
}
return
expr
;
}
