/** 
 * Merges thenMap and elseMap into resultMap via ITE function.
 */
private
<
T
extends
Expr
>
void
mergeMaps
(
BoolExpr
cond
,
Map
<
CtReference
,
T
>
thenMap
,
Map
<
CtReference
,
T
>
elseMap
,
Map
<
CtReference
,
T
>
resultMap
)
{
for
(
Map
.
Entry
<
CtReference
,
T
>
entry
:
thenMap
.
entrySet
(
)
)
{
CtReference
reference
=
entry
.
getKey
(
)
;
T
thenBranchValue
=
entry
.
getValue
(
)
;
T
elseBranchValue
=
elseMap
.
get
(
reference
)
;
if
(
thenBranchValue
==
elseBranchValue
)
{
continue
;
}
if
(
thenBranchValue
!=
null
&&
elseBranchValue
!=
null
)
{
T
iteExpr
=
(
T
)
context
.
mkITE
(
cond
,
thenBranchValue
,
elseBranchValue
)
;
resultMap
.
put
(
reference
,
iteExpr
)
;
}
}
}
