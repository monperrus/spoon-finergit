private
void
visitAssignment
(
CtExpression
<
?
>
left
,
Expr
leftValue
,
CtTypeReference
<
?
>
leftType
,
Expr
rightValue
,
CtTypeReference
<
?
>
rightType
)
{
CtReference
leftReference
;
if
(
left
instanceof
CtArrayWrite
)
{
leftReference
=
(
(
CtArrayWrite
<
?
>
)
left
)
.
getTarget
(
)
.
getType
(
)
;
}
else
{
leftReference
=
(
(
CtVariableWrite
<
?
>
)
left
)
.
getVariable
(
)
;
}
if
(
leftType
.
isPrimitive
(
)
)
{
if
(
isCalculable
(
leftType
)
&&
rightValue
!=
null
)
{
if
(
!
rightType
.
isPrimitive
(
)
)
{
rightValue
=
memory
.
read
(
rightType
.
unbox
(
)
,
(
IntExpr
)
rightValue
)
;
}
if
(
rightValue
instanceof
BitVecExpr
)
{
rightValue
=
castBV
(
(
BitVecExpr
)
rightValue
,
rightType
,
leftType
)
;
}
}
else
{
Sort
sort
=
TypeUtils
.
getTypeSort
(
context
,
leftType
)
;
rightValue
=
context
.
mkFreshConst
(
""
,
sort
)
;
}
}
else
{
if
(
rightType
.
isPrimitive
(
)
)
{
int
nextPointer
=
memory
.
nextPointer
(
)
;
IntExpr
index
=
context
.
mkInt
(
nextPointer
)
;
if
(
isCalculable
(
leftType
)
&&
rightValue
!=
null
)
{
if
(
rightValue
instanceof
BitVecExpr
)
{
rightValue
=
castBV
(
(
BitVecExpr
)
rightValue
,
rightType
,
leftType
)
;
}
memory
.
write
(
leftType
.
unbox
(
)
,
index
,
rightValue
)
;
}
rightValue
=
index
;
}
}
if
(
left
instanceof
CtFieldWrite
)
{
memory
.
write
(
leftReference
,
(
IntExpr
)
leftValue
,
rightValue
)
;
}
if
(
left
instanceof
CtArrayWrite
)
{
CtExpression
<
Integer
>
index
=
(
(
CtArrayWrite
<
?
>
)
left
)
.
getIndexExpression
(
)
;
CtTypeReference
<
?
>
indexType
=
getActualType
(
index
)
;
Expr
indexExpr
=
(
Expr
)
index
.
getMetadata
(
"value"
)
;
indexExpr
=
promoteNumericValue
(
context
,
indexExpr
,
indexType
)
;
memory
.
writeArray
(
(
CtArrayTypeReference
)
leftReference
,
(
IntExpr
)
leftValue
,
indexExpr
,
rightValue
)
;
}
variablesMap
.
put
(
leftReference
,
rightValue
)
;
currentResult
=
rightValue
;
}
