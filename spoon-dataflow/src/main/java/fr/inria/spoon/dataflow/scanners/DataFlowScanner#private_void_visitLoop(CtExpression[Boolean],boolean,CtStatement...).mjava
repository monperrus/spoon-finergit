private
void
visitLoop
(
CtExpression
<
Boolean
>
loopCondition
,
boolean
isPrecondition
,
CtStatement
...
loopBody
)
{
BoolExpr
oldBreakExpr
=
getBreakExpr
(
)
;
BoolExpr
oldContinueExpr
=
getContinueExpr
(
)
;
BoolExpr
iterationConditionExpr
;
BranchData
iterationBranchData
;
if
(
isPrecondition
)
{
if
(
loopCondition
!=
null
)
{
visitCondition
(
loopCondition
,
true
)
;
}
ResetOnModificationScanner
resetScanner
=
new
ResetOnModificationScanner
(
context
,
variablesMap
,
memory
)
;
Arrays
.
stream
(
loopBody
)
.
forEach
(
resetScanner
::
scan
)
;
iterationConditionExpr
=
loopCondition
==
null
?
makeFreshBool
(
context
)
:
visitCondition
(
loopCondition
,
true
)
;
iterationBranchData
=
visitBranch
(
iterationConditionExpr
,
loopBody
)
;
}
else
{
ResetOnModificationScanner
resetScanner
=
new
ResetOnModificationScanner
(
context
,
variablesMap
,
memory
)
;
Arrays
.
stream
(
loopBody
)
.
forEach
(
resetScanner
::
scan
)
;
iterationBranchData
=
visitBranch
(
context
.
mkTrue
(
)
,
loopBody
)
;
iterationConditionExpr
=
loopCondition
==
null
?
makeFreshBool
(
context
)
:
visitCondition
(
loopCondition
,
true
)
;
}
variablesMap
.
put
(
breakFlagReference
,
iterationBranchData
.
getVariablesMap
(
)
.
get
(
breakFlagReference
)
)
;
BoolExpr
currentBreakExpr
=
getBreakExpr
(
)
;
variablesMap
.
put
(
breakFlagReference
,
oldBreakExpr
)
;
variablesMap
.
put
(
continueFlagReference
,
oldContinueExpr
)
;
solver
.
add
(
context
.
mkOr
(
context
.
mkNot
(
iterationConditionExpr
)
,
currentBreakExpr
)
)
;
}
