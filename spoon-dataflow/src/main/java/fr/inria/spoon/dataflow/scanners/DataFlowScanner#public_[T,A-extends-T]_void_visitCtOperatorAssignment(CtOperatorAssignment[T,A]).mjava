@Override
public
<
T
,
A
extends
T
>
void
visitCtOperatorAssignment
(
CtOperatorAssignment
<
T
,
A
>
assignment
)
{
CtExpression
<
T
>
left
=
assignment
.
getAssigned
(
)
;
CtExpression
<
A
>
right
=
assignment
.
getAssignment
(
)
;
CtTypeReference
<
?
>
leftType
=
getActualType
(
left
)
;
CtTypeReference
<
?
>
rightType
=
getActualType
(
right
)
;
scan
(
left
)
;
Expr
leftValue
=
currentResult
;
scan
(
right
)
;
Expr
rightValue
=
currentResult
;
Expr
leftData
=
leftValue
;
if
(
left
instanceof
CtFieldWrite
)
{
leftData
=
memory
.
read
(
(
(
CtFieldWrite
<
T
>
)
left
)
.
getVariable
(
)
,
(
IntExpr
)
leftValue
)
;
}
if
(
left
instanceof
CtArrayWrite
)
{
CtArrayWrite
arrayWrite
=
(
CtArrayWrite
)
left
;
CtExpression
index
=
arrayWrite
.
getIndexExpression
(
)
;
Expr
arrayIndex
=
(
Expr
)
index
.
getMetadata
(
"value"
)
;
leftData
=
memory
.
readArray
(
(
CtArrayTypeReference
)
arrayWrite
.
getTarget
(
)
.
getType
(
)
,
(
IntExpr
)
leftValue
,
arrayIndex
)
;
}
Expr
resExpr
=
calcBinaryOperator
(
leftData
,
leftType
,
rightValue
,
rightType
,
assignment
.
getKind
(
)
)
;
applyCasts
(
resExpr
,
assignment
.
getAssignment
(
)
.
getType
(
)
,
Collections
.
singletonList
(
assignment
.
getAssigned
(
)
.
getType
(
)
)
)
;
rightValue
=
resExpr
;
rightType
=
assignment
.
getAssigned
(
)
.
getType
(
)
.
unbox
(
)
;
visitAssignment
(
left
,
leftValue
,
leftType
,
rightValue
,
rightType
)
;
assignment
.
putMetadata
(
"value"
,
currentResult
)
;
}
