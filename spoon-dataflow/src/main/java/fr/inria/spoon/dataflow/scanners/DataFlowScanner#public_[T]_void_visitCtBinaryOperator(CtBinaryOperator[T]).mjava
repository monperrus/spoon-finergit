@Override
public
<
T
>
void
visitCtBinaryOperator
(
CtBinaryOperator
<
T
>
operator
)
{
CtTypeReference
<
?
>
leftType
=
getActualType
(
operator
.
getLeftHandOperand
(
)
)
;
CtTypeReference
<
?
>
rightType
=
getActualType
(
operator
.
getRightHandOperand
(
)
)
;
BinaryOperatorKind
kind
=
operator
.
getKind
(
)
;
scan
(
operator
.
getLeftHandOperand
(
)
)
;
Expr
leftValue
=
currentResult
;
checkBinaryOperatorLeft
(
kind
,
operator
.
getLeftHandOperand
(
)
)
;
BoolExpr
prev
=
currentConditions
;
if
(
kind
==
BinaryOperatorKind
.
AND
||
kind
==
BinaryOperatorKind
.
OR
)
{
Expr
predicateValue
=
leftValue
;
if
(
!
leftType
.
isPrimitive
(
)
)
{
predicateValue
=
memory
.
read
(
leftType
.
unbox
(
)
,
(
IntExpr
)
predicateValue
)
;
}
BoolExpr
res
=
kind
==
BinaryOperatorKind
.
OR
?
context
.
mkNot
(
(
BoolExpr
)
predicateValue
)
:
(
BoolExpr
)
predicateValue
;
currentConditions
=
currentConditions
==
null
?
res
:
context
.
mkAnd
(
currentConditions
,
res
)
;
}
scan
(
operator
.
getRightHandOperand
(
)
)
;
Expr
rightValue
=
currentResult
;
checkBinaryOperatorRight
(
kind
,
operator
.
getRightHandOperand
(
)
)
;
currentConditions
=
prev
;
currentResult
=
calcBinaryOperator
(
leftValue
,
leftType
,
rightValue
,
rightType
,
kind
)
;
currentResult
=
applyCasts
(
currentResult
,
operator
.
getType
(
)
,
operator
.
getTypeCasts
(
)
)
;
operator
.
putMetadata
(
"value"
,
currentResult
)
;
checkBinaryOperatorResult
(
operator
)
;
}
