@Override
public
<
T
>
void
visitCtClass
(
CtClass
<
T
>
ctClass
)
{
System
.
out
.
println
(
"Analyzing class: "
+
ctClass
.
getQualifiedName
(
)
)
;
List
<
CtField
<
?
>
>
fields
=
ctClass
.
getFields
(
)
;
for
(
CtField
<
?
>
field
:
fields
)
{
if
(
field
.
isFinal
(
)
)
{
CtExpression
<
?
>
defaultExpression
=
field
.
getDefaultExpression
(
)
;
if
(
defaultExpression
!=
null
)
{
scan
(
defaultExpression
)
;
Expr
defaultExpr
=
currentResult
;
memory
.
write
(
field
.
getReference
(
)
,
context
.
mkInt
(
Memory
.
thisPointer
(
)
)
,
defaultExpr
)
;
}
}
}
solver
.
push
(
)
;
Map
<
CtReference
,
Expr
>
oldValues
=
new
HashMap
<
>
(
variablesMap
)
;
Memory
oldMemory
=
new
Memory
(
memory
)
;
memory
.
resetMutable
(
)
;
super
.
visitCtClass
(
ctClass
)
;
variablesMap
=
oldValues
;
memory
=
oldMemory
;
solver
.
pop
(
)
;
}
