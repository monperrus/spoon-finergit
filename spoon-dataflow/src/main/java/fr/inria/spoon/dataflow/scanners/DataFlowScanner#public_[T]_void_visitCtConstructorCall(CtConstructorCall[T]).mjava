@Override
public
<
T
>
void
visitCtConstructorCall
(
CtConstructorCall
<
T
>
constructorCall
)
{
int
nextPointer
=
memory
.
nextPointer
(
)
;
if
(
constructorCall
.
getType
(
)
.
getQualifiedName
(
)
.
equals
(
"java.lang.Integer"
)
&&
constructorCall
.
getArguments
(
)
.
size
(
)
==
1
)
{
CtExpression
<
?
>
arg1
=
constructorCall
.
getArguments
(
)
.
get
(
0
)
;
scan
(
arg1
)
;
Expr
arg1Value
=
currentResult
;
CtTypeReference
<
?
>
arg1Type
=
getActualType
(
arg1
)
;
CtTypeReference
<
?
>
arg1SignatureType
=
constructorCall
.
getExecutable
(
)
.
getParameters
(
)
.
get
(
0
)
;
arg1Value
=
applyCasts
(
arg1Value
,
arg1Type
,
Collections
.
singletonList
(
arg1SignatureType
)
)
;
memory
.
write
(
constructorCall
.
getType
(
)
.
unbox
(
)
,
context
.
mkInt
(
nextPointer
)
,
arg1Value
)
;
}
else
{
constructorCall
.
getArguments
(
)
.
forEach
(
this
::
scan
)
;
}
IntExpr
constructorCallValue
=
context
.
mkInt
(
nextPointer
)
;
currentResult
=
applyCasts
(
constructorCallValue
,
constructorCall
.
getType
(
)
,
constructorCall
.
getTypeCasts
(
)
)
;
constructorCall
.
putMetadata
(
"value"
,
currentResult
)
;
}
