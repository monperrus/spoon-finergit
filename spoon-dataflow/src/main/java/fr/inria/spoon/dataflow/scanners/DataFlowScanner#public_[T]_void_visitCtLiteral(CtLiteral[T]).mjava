@Override
public
<
T
>
void
visitCtLiteral
(
CtLiteral
<
T
>
literal
)
{
Expr
valueExpr
;
if
(
TypeUtils
.
isNullType
(
literal
.
getType
(
)
)
)
{
valueExpr
=
context
.
mkInt
(
Memory
.
nullPointer
(
)
)
;
}
else
if
(
TypeUtils
.
isString
(
literal
.
getType
(
)
)
)
{
valueExpr
=
context
.
mkFreshConst
(
""
,
context
.
getIntSort
(
)
)
;
solver
.
add
(
context
.
mkDistinct
(
valueExpr
,
context
.
mkInt
(
Memory
.
nullPointer
(
)
)
)
)
;
}
else
{
Object
value
=
(
(
CtLiteral
<
?
>
)
literal
)
.
getValue
(
)
;
valueExpr
=
applyCasts
(
makeLiteral
(
value
)
,
literal
.
getType
(
)
,
literal
.
getTypeCasts
(
)
)
;
}
currentResult
=
valueExpr
;
literal
.
putMetadata
(
"value"
,
currentResult
)
;
}
