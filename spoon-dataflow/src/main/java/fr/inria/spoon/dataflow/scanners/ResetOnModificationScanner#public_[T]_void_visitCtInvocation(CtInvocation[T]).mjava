@Override
public
<
T
>
void
visitCtInvocation
(
CtInvocation
<
T
>
invocation
)
{
super
.
visitCtInvocation
(
invocation
)
;
List
<
CtExpression
<
?
>
>
arguments
=
invocation
.
getArguments
(
)
;
for
(
CtExpression
<
?
>
argument
:
arguments
)
{
CtTypeReference
<
?
>
argumentType
=
getActualType
(
argument
)
;
if
(
!
argumentType
.
isPrimitive
(
)
&&
!
isImmutable
(
argumentType
)
)
{
IntExpr
argumentExpr
=
getTargetValue
(
context
,
variablesMap
,
memory
,
argument
)
;
if
(
argumentExpr
!=
null
)
{
memory
.
resetObject
(
argumentType
,
argumentExpr
)
;
}
}
}
CtExpression
<
?
>
target
=
invocation
.
getTarget
(
)
;
if
(
target
!=
null
)
{
if
(
!
(
target
instanceof
CtTypeAccess
)
)
{
CtTypeReference
<
?
>
targetType
=
getActualType
(
target
)
;
if
(
!
isImmutable
(
targetType
)
)
{
IntExpr
targetExpr
=
getTargetValue
(
context
,
variablesMap
,
memory
,
target
)
;
if
(
targetExpr
!=
null
)
{
memory
.
resetObject
(
targetType
,
targetExpr
)
;
}
}
}
}
}
