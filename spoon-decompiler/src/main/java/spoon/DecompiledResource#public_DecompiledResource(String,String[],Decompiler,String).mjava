/** 
 * Creates a FileSystemFolder containing the decompiled .class and .jar from path. The actual folder is located at pathToDecompiledSources.
 * @param path path to the folder containing the bytecode to decompile
 * @param classpath additional classpath that could help decompilation.
 * @param decompiler decompiler to use. If null the default will be used.
 * @param pathToDecompiledSources output directory for decompiled sources.
 */
public
DecompiledResource
(
String
path
,
String
[
]
classpath
,
Decompiler
decompiler
,
String
pathToDecompiledSources
)
{
super
(
pathToDecompiledSources
)
;
final
Decompiler
decompilerToUse
;
if
(
decompiler
==
null
)
{
decompilerToUse
=
new
CFRDecompiler
(
)
;
}
else
{
decompilerToUse
=
decompiler
;
}
File
output
=
new
File
(
pathToDecompiledSources
)
;
output
.
mkdirs
(
)
;
try
(
Stream
<
Path
>
walk
=
Files
.
walk
(
Paths
.
get
(
path
)
)
)
{
walk
.
filter
(
Files
::
isRegularFile
)
.
filter
(
x
->
x
.
toString
(
)
.
endsWith
(
".class"
)
||
x
.
toString
(
)
.
endsWith
(
".jar"
)
)
.
map
(
x
->
x
.
toString
(
)
)
.
forEach
(
f
->
decompilerToUse
.
decompile
(
f
,
pathToDecompiledSources
,
classpath
)
)
;
}
catch
(
IOException
e
)
{
e
.
printStackTrace
(
)
;
}
}
