/** 
 * JarLauncher constructor. Uses the default Decompiler (CFR) If decompiledSrcPath is null a temporary directory will be created and filled with decompiled sources. This directory is deleted every time this constructor is called. If a decompiledSrcPath is provided, deletion of the content of the directory is up to the user.
 * @param jarPath path to the jar to be analyzed
 * @param decompiledSrcPath path to directory where decompiled source will be output
 * @param pom path to pom associated with the jar to be analyzed
 * @param decompiler Instance implementing {@link spoon.decompiler.Decompiler} to be used
 */
public
JarLauncher
(
String
jarPath
,
String
decompiledSrcPath
,
String
pom
,
Decompiler
decompiler
)
{
this
.
decompiler
=
decompiler
;
if
(
decompiledSrcPath
==
null
)
{
decompiledSrcPath
=
System
.
getProperty
(
"java.io.tmpdir"
)
+
System
.
getProperty
(
"file.separator"
)
+
"spoon-tmp"
;
decompile
=
true
;
}
this
.
decompiledRoot
=
new
File
(
decompiledSrcPath
)
;
if
(
decompiledRoot
.
exists
(
)
&&
!
decompiledRoot
.
canWrite
(
)
)
{
throw
new
SpoonException
(
"Dir "
+
decompiledRoot
.
getPath
(
)
+
" already exists and is not deletable."
)
;
}
else
if
(
decompiledRoot
.
exists
(
)
&&
decompile
)
{
try
{
FileUtils
.
deleteDirectory
(
decompiledRoot
)
;
}
catch
(
IOException
e
)
{
throw
new
SpoonException
(
"Dir "
+
decompiledRoot
.
getPath
(
)
+
" already exists and is not deletable."
)
;
}
}
if
(
!
decompiledRoot
.
exists
(
)
)
{
decompiledRoot
.
mkdirs
(
)
;
decompile
=
true
;
}
decompiledSrc
=
new
File
(
decompiledRoot
,
"src/main/java"
)
;
if
(
!
decompiledSrc
.
exists
(
)
)
{
decompiledSrc
.
mkdirs
(
)
;
decompile
=
true
;
}
if
(
decompiler
==
null
)
{
this
.
decompiler
=
getDefaultDecompiler
(
)
;
}
jar
=
new
File
(
jarPath
)
;
if
(
!
jar
.
exists
(
)
||
!
jar
.
isFile
(
)
)
{
throw
new
SpoonException
(
"Jar "
+
jar
.
getPath
(
)
+
" not found."
)
;
}
decompile
=
true
;
init
(
pom
)
;
}
