private
void
decompileClass
(
String
path
,
String
outputDir
)
throws
Exception
{
final
File
tempClass
=
new
File
(
path
)
;
DecompilerSettings
settings
=
DecompilerSettings
.
javaDefaults
(
)
;
MetadataSystem
metadataSystem
=
new
MetadataSystem
(
new
InputTypeLoader
(
)
)
;
TypeReference
type
=
metadataSystem
.
lookupType
(
tempClass
.
getCanonicalPath
(
)
)
;
DecompilationOptions
decompilationOptions
=
new
DecompilationOptions
(
)
;
decompilationOptions
.
setSettings
(
DecompilerSettings
.
javaDefaults
(
)
)
;
decompilationOptions
.
setFullDecompilation
(
true
)
;
TypeDefinition
resolvedType
=
null
;
if
(
type
==
null
||
(
(
resolvedType
=
type
.
resolve
(
)
)
==
null
)
)
{
throw
new
Exception
(
"Unable to resolve type."
)
;
}
final
Writer
writer
=
createWriter
(
resolvedType
,
settings
,
outputDir
)
;
final
boolean
writeToFile
=
writer
instanceof
FileOutputWriter
;
final
PlainTextOutput
output
;
output
=
new
PlainTextOutput
(
writer
)
;
output
.
setUnicodeOutputEnabled
(
settings
.
isUnicodeOutputEnabled
(
)
)
;
if
(
settings
.
getLanguage
(
)
instanceof
BytecodeLanguage
)
{
output
.
setIndentToken
(
"  "
)
;
}
if
(
writeToFile
)
{
System
.
out
.
printf
(
"Decompiling %s...\n"
,
resolvedType
.
getFullName
(
)
)
;
}
settings
.
getLanguage
(
)
.
decompileType
(
resolvedType
,
output
,
decompilationOptions
)
;
writer
.
flush
(
)
;
if
(
writeToFile
)
{
writer
.
close
(
)
;
}
}
