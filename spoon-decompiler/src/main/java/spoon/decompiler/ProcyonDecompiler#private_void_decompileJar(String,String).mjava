private
void
decompileJar
(
String
jarFilePath
,
String
outputDir
)
throws
IOException
{
DecompilationOptions
decompilationOptions
=
new
DecompilationOptions
(
)
;
decompilationOptions
.
setSettings
(
DecompilerSettings
.
javaDefaults
(
)
)
;
decompilationOptions
.
setFullDecompilation
(
true
)
;
final
File
jarFile
=
new
File
(
jarFilePath
)
;
if
(
!
jarFile
.
exists
(
)
)
{
throw
new
FileNotFoundException
(
"File not found: "
+
jarFilePath
)
;
}
final
DecompilerSettings
settings
=
decompilationOptions
.
getSettings
(
)
;
settings
.
setTypeLoader
(
new
InputTypeLoader
(
)
)
;
settings
.
setExcludeNestedTypes
(
false
)
;
final
JarFile
jar
=
new
JarFile
(
jarFile
)
;
final
Enumeration
<
JarEntry
>
entries
=
jar
.
entries
(
)
;
final
boolean
oldShowSyntheticMembers
=
settings
.
getShowSyntheticMembers
(
)
;
final
ITypeLoader
oldTypeLoader
=
settings
.
getTypeLoader
(
)
;
settings
.
setShowSyntheticMembers
(
false
)
;
settings
.
setTypeLoader
(
new
CompositeTypeLoader
(
new
JarTypeLoader
(
jar
)
,
oldTypeLoader
)
)
;
try
{
MetadataSystem
metadataSystem
=
new
NoRetryMetadataSystem
(
settings
.
getTypeLoader
(
)
)
;
int
classesDecompiled
=
0
;
while
(
entries
.
hasMoreElements
(
)
)
{
final
JarEntry
entry
=
entries
.
nextElement
(
)
;
final
String
name
=
entry
.
getName
(
)
;
if
(
!
name
.
endsWith
(
".class"
)
)
{
continue
;
}
final
String
internalName
=
StringUtilities
.
removeRight
(
name
,
".class"
)
;
try
{
decompileType
(
metadataSystem
,
internalName
,
decompilationOptions
,
outputDir
)
;
if
(
++
classesDecompiled
%
100
==
0
)
{
metadataSystem
=
new
NoRetryMetadataSystem
(
settings
.
getTypeLoader
(
)
)
;
}
}
catch
(
final
Throwable
t
)
{
t
.
printStackTrace
(
)
;
}
}
}
finally
{
settings
.
setShowSyntheticMembers
(
oldShowSyntheticMembers
)
;
settings
.
setTypeLoader
(
oldTypeLoader
)
;
}
}
