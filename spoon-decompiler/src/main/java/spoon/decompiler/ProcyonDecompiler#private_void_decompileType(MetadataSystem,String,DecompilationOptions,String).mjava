private
void
decompileType
(
MetadataSystem
metadataSystem
,
String
typeName
,
DecompilationOptions
options
,
String
outputDir
)
throws
IOException
{
final
TypeReference
type
;
final
DecompilerSettings
settings
=
options
.
getSettings
(
)
;
if
(
typeName
.
length
(
)
==
1
)
{
final
MetadataParser
parser
=
new
MetadataParser
(
IMetadataResolver
.
EMPTY
)
;
final
TypeReference
reference
=
parser
.
parseTypeDescriptor
(
typeName
)
;
type
=
metadataSystem
.
resolve
(
reference
)
;
}
else
{
type
=
metadataSystem
.
lookupType
(
typeName
)
;
}
final
TypeDefinition
resolvedType
;
if
(
type
==
null
||
(
resolvedType
=
type
.
resolve
(
)
)
==
null
)
{
System
.
err
.
printf
(
"!!! ERROR: Failed to load class %s.\n"
,
typeName
)
;
return
;
}
DeobfuscationUtilities
.
processType
(
resolvedType
)
;
if
(
resolvedType
.
isNested
(
)
||
resolvedType
.
isAnonymous
(
)
||
resolvedType
.
isSynthetic
(
)
)
{
return
;
}
final
Writer
writer
=
createWriter
(
resolvedType
,
settings
,
outputDir
)
;
final
boolean
writeToFile
=
writer
instanceof
FileOutputWriter
;
final
PlainTextOutput
output
;
output
=
new
PlainTextOutput
(
writer
)
;
output
.
setUnicodeOutputEnabled
(
settings
.
isUnicodeOutputEnabled
(
)
)
;
if
(
settings
.
getLanguage
(
)
instanceof
BytecodeLanguage
)
{
output
.
setIndentToken
(
"  "
)
;
}
if
(
writeToFile
)
{
System
.
out
.
printf
(
"Decompiling %s...\n"
,
typeName
)
;
}
settings
.
getLanguage
(
)
.
decompileType
(
resolvedType
,
output
,
options
)
;
writer
.
flush
(
)
;
if
(
writeToFile
)
{
writer
.
close
(
)
;
}
}
