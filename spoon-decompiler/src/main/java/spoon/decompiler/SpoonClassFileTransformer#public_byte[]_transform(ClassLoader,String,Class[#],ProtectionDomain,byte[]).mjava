@Override
public
byte
[
]
transform
(
ClassLoader
loader
,
String
className
,
Class
<
?
>
classBeingRedefined
,
ProtectionDomain
protectionDomain
,
byte
[
]
classfileBuffer
)
throws
IllegalClassFormatException
{
try
{
if
(
!
classNameFilter
.
test
(
className
)
)
{
return
classfileBuffer
;
}
String
pathToClassFile
=
loader
.
getResource
(
className
+
".class"
)
.
getPath
(
)
;
decompiler
.
decompile
(
pathToClassFile
,
pathToDecompiled
,
classPath
.
toArray
(
new
String
[
]
{
}
)
)
;
IncrementalLauncher
launcher
=
new
IncrementalLauncher
(
inputSources
,
classPath
,
cache
)
;
launcher
.
addInputResource
(
pathToDecompiled
)
;
CtModel
model
=
launcher
.
buildModel
(
)
;
launcher
.
saveCache
(
)
;
CtType
toBeTransformed
=
model
.
getAllTypes
(
)
.
stream
(
)
.
filter
(
t
->
t
.
getQualifiedName
(
)
.
equals
(
className
.
replace
(
"/"
,
"."
)
)
)
.
findAny
(
)
.
get
(
)
;
if
(
!
transformer
.
accept
(
toBeTransformed
)
)
{
return
classfileBuffer
;
}
launcher
.
getEnvironment
(
)
.
debugMessage
(
"[Agent] transforming "
+
className
)
;
transformer
.
transform
(
toBeTransformed
)
;
SpoonModelBuilder
compiler
=
launcher
.
createCompiler
(
)
;
compiler
.
setBinaryOutputDirectory
(
recompileDir
)
;
compiler
.
compile
(
SpoonModelBuilder
.
InputType
.
CTTYPES
)
;
File
transformedClass
=
new
File
(
compiler
.
getBinaryOutputDirectory
(
)
,
className
+
".class"
)
;
try
{
byte
[
]
fileContent
=
Files
.
readAllBytes
(
transformedClass
.
toPath
(
)
)
;
launcher
.
getEnvironment
(
)
.
debugMessage
(
"[Agent] loading transformed "
+
className
)
;
return
fileContent
;
}
catch
(
IOException
e
)
{
launcher
.
getEnvironment
(
)
.
debugMessage
(
"[ERROR][Agent] while loading transformed "
+
className
)
;
e
.
printStackTrace
(
)
;
}
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
return
classfileBuffer
;
}
