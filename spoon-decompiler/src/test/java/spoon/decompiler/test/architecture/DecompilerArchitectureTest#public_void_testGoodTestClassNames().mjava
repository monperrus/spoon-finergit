@Test
public
void
testGoodTestClassNames
(
)
{
SpoonAPI
spoon
=
new
Launcher
(
)
;
spoon
.
addInputResource
(
"src/test/java/"
)
;
spoon
.
buildModel
(
)
;
for
(
CtMethod
<
?
>
meth
:
spoon
.
getModel
(
)
.
getElements
(
new
TypeFilter
<
CtMethod
>
(
CtMethod
.
class
)
{
@Override
public
boolean
matches
(
CtMethod
element
)
{
return
super
.
matches
(
element
)
&&
element
.
getAnnotation
(
Test
.
class
)
!=
null
;
}
}
)
)
{
assertTrue
(
"naming contract violated for "
+
meth
.
getParent
(
CtClass
.
class
)
.
getSimpleName
(
)
,
meth
.
getParent
(
CtClass
.
class
)
.
getSimpleName
(
)
.
startsWith
(
"Test"
)
||
meth
.
getParent
(
CtClass
.
class
)
.
getSimpleName
(
)
.
endsWith
(
"Test"
)
)
;
}
assertEquals
(
0
,
spoon
.
getModel
(
)
.
getElements
(
new
TypeFilter
<
CtTypeReference
>
(
CtTypeReference
.
class
)
{
@Override
public
boolean
matches
(
CtTypeReference
element
)
{
CtMethod
parent
=
element
.
getParent
(
CtMethod
.
class
)
;
return
"junit.framework.TestCase"
.
equals
(
element
.
getQualifiedName
(
)
)
;
}
}
)
.
size
(
)
)
;
}
