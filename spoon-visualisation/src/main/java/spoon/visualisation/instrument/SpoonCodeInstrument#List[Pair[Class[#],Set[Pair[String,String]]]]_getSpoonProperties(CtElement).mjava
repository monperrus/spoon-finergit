/** 
 * Gets the Spoon properties and their current value of the given element. A Spoon properties is a getter (get..., is...). Note that Spoon has a specific annotation (PropertyGetter, also DerivedProperty) for that we do not use here.
 * @param elt The Spoon element to analyse
 * @return A list of pairs: each pair refers to:1/ an interface that the Spoon element implements 2/ a set of pairs where each pair refers to a property (its name) and its value
 */
List
<
Pair
<
Class
<
?
>
,
Set
<
Pair
<
String
,
String
>
>
>
>
getSpoonProperties
(
final
CtElement
elt
)
{
return
getAllSpoonInterfaces
(
elt
.
getClass
(
)
)
.
map
(
inter
->
new
Pair
<
Class
<
?
>
,
Set
<
Pair
<
String
,
String
>
>
>
(
inter
,
Arrays
.
stream
(
inter
.
getDeclaredMethods
(
)
)
.
filter
(
m
->
(
m
.
isAnnotationPresent
(
PropertyGetter
.
class
)
||
m
.
isAnnotationPresent
(
DerivedProperty
.
class
)
)
&&
m
.
getParameterCount
(
)
==
0
)
.
map
(
m
->
{
try
{
return
new
Pair
<
>
(
m
.
getName
(
)
+
"(): "
+
prettyPrintType
(
m
.
getGenericReturnType
(
)
)
,
String
.
valueOf
(
m
.
invoke
(
elt
)
)
)
;
}
catch
(
final
IllegalAccessException
|
InvocationTargetException
|
NullPointerException
ex
)
{
return
null
;
}
}
)
.
filter
(
entry
->
entry
!=
null
)
.
collect
(
Collectors
.
toSet
(
)
)
)
)
.
filter
(
pair
->
!
pair
.
getValue
(
)
.
isEmpty
(
)
)
.
collect
(
Collectors
.
toList
(
)
)
;
}
