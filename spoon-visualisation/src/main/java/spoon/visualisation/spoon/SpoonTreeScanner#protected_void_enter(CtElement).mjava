@Override
protected
void
enter
(
final
CtElement
elt
)
{
level
++
;
final
String
simpleName
=
elt
.
getClass
(
)
.
getSimpleName
(
)
;
final
Class
<
?
>
cl
=
Arrays
.
stream
(
elt
.
getClass
(
)
.
getInterfaces
(
)
)
.
filter
(
interf
->
simpleName
.
equals
(
interf
.
getSimpleName
(
)
+
"Impl"
)
)
.
findFirst
(
)
.
orElse
(
elt
.
getClass
(
)
)
;
final
Hyperlink
label
=
new
Hyperlink
(
cl
.
getSimpleName
(
)
)
;
final
TextFlow
flow
=
new
TextFlow
(
label
)
;
final
String
url
=
"http://spoon.gforge.inria.fr/mvnsites/spoon-core/apidocs/"
+
cl
.
getName
(
)
.
replace
(
'.'
,
'/'
)
+
".html"
;
Tooltip
.
install
(
label
,
new
Tooltip
(
url
)
)
;
label
.
setOnAction
(
evt
->
new
Thread
(
(
)
->
{
final
OpenWebPage
cmd
=
new
OpenWebPage
(
)
;
cmd
.
setUri
(
URI
.
create
(
url
)
)
;
if
(
cmd
.
canDo
(
)
)
{
cmd
.
doIt
(
)
;
}
}
,
"OPEN_SPOON_DOC_THREAD"
)
.
start
(
)
)
;
final
SourcePosition
pos
=
elt
.
getPosition
(
)
;
final
List
<
Integer
>
lines
;
if
(
pos
.
isValidPosition
(
)
)
{
lines
=
List
.
of
(
pos
.
getSourceStart
(
)
,
pos
.
getSourceEnd
(
)
)
;
}
else
{
lines
=
List
.
of
(
)
;
}
if
(
elt
.
isImplicit
(
)
)
{
flow
.
getChildren
(
)
.
add
(
new
Text
(
"(implicit)"
)
)
;
}
if
(
currRole
!=
null
)
{
flow
.
getChildren
(
)
.
add
(
new
Text
(
"(role: "
+
currRole
+
")"
)
)
;
}
if
(
elt
instanceof
CtType
<
?
>
)
{
flow
.
getChildren
(
)
.
add
(
new
Text
(
": "
+
(
(
CtType
<
?
>
)
elt
)
.
getSimpleName
(
)
)
)
;
printer
.
accept
(
level
,
flow
,
lines
)
;
return
;
}
if
(
elt
instanceof
CtNamedElement
)
{
flow
.
getChildren
(
)
.
add
(
new
Text
(
": "
+
(
(
CtNamedElement
)
elt
)
.
getSimpleName
(
)
)
)
;
printer
.
accept
(
level
,
flow
,
lines
)
;
return
;
}
if
(
elt
instanceof
CtReference
)
{
flow
.
getChildren
(
)
.
add
(
new
Text
(
": "
+
(
(
CtReference
)
elt
)
.
getSimpleName
(
)
)
)
;
printer
.
accept
(
level
,
flow
,
lines
)
;
return
;
}
if
(
elt
instanceof
CtVariableAccess
<
?
>
)
{
final
CtVariableAccess
<
?
>
varaccess
=
(
CtVariableAccess
<
?
>
)
elt
;
final
String
txt
=
": "
+
(
(
varaccess
.
getVariable
(
)
!=
null
)
?
varaccess
.
getVariable
(
)
.
getSimpleName
(
)
:
"(null)"
)
;
flow
.
getChildren
(
)
.
add
(
new
Text
(
txt
)
)
;
printer
.
accept
(
level
,
flow
,
lines
)
;
return
;
}
if
(
elt
instanceof
CtTypeAccess
<
?
>
)
{
final
CtTypeAccess
<
?
>
typeaccess
=
(
CtTypeAccess
<
?
>
)
elt
;
final
String
txt
=
": "
+
(
(
typeaccess
.
getAccessedType
(
)
!=
null
)
?
typeaccess
.
getAccessedType
(
)
.
getSimpleName
(
)
:
"(null)"
)
;
flow
.
getChildren
(
)
.
add
(
new
Text
(
txt
)
)
;
printer
.
accept
(
level
,
flow
,
lines
)
;
return
;
}
if
(
elt
instanceof
CtLiteral
<
?
>
)
{
flow
.
getChildren
(
)
.
add
(
new
Text
(
": "
+
(
(
CtLiteral
<
?
>
)
elt
)
.
getValue
(
)
)
)
;
printer
.
accept
(
level
,
flow
,
lines
)
;
return
;
}
if
(
elt
instanceof
CtAbstractInvocation
<
?
>
)
{
final
CtAbstractInvocation
<
?
>
invoc
=
(
CtAbstractInvocation
<
?
>
)
elt
;
final
String
txt
=
": "
+
(
(
invoc
.
getExecutable
(
)
!=
null
)
?
invoc
.
getExecutable
(
)
.
getSimpleName
(
)
:
"(null)"
)
;
flow
.
getChildren
(
)
.
add
(
new
Text
(
txt
)
)
;
printer
.
accept
(
level
,
flow
,
lines
)
;
return
;
}
if
(
elt
instanceof
CtAnnotation
<
?
>
)
{
final
CtAnnotation
<
?
>
annot
=
(
CtAnnotation
<
?
>
)
elt
;
final
String
txt
=
": "
+
(
(
annot
.
getAnnotationType
(
)
!=
null
)
?
annot
.
getAnnotationType
(
)
.
getSimpleName
(
)
:
"(null)"
)
;
flow
.
getChildren
(
)
.
add
(
new
Text
(
txt
)
)
;
printer
.
accept
(
level
,
flow
,
lines
)
;
return
;
}
printer
.
accept
(
level
,
flow
,
lines
)
;
}
