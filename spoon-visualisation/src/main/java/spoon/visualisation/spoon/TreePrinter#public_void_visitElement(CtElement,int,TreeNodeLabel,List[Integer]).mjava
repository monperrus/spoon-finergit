@Override
public
void
visitElement
(
final
CtElement
elt
,
final
int
level
,
final
@NotNull
TreeNodeLabel
label
,
final
@NotNull
List
<
Integer
>
lines
)
{
if
(
level
>
1
&&
level
<=
levelsToIgnore
)
{
return
;
}
final
int
startPosition
=
lines
.
isEmpty
(
)
?
-
1
:
lines
.
get
(
0
)
;
final
int
endPosition
=
lines
.
isEmpty
(
)
?
-
1
:
lines
.
get
(
1
)
;
final
SpoonTreeItem
item
=
new
SpoonTreeItem
(
createStdTextFlow
(
label
)
,
startPosition
,
endPosition
,
elt
)
;
item
.
setExpanded
(
true
)
;
if
(
currItem
==
null
)
{
tree
.
setRoot
(
item
)
;
}
else
{
if
(
currLevel
<
level
)
{
currItem
.
getChildren
(
)
.
add
(
item
)
;
}
else
{
TreeItem
<
TextFlow
>
parent
=
currItem
.
getParent
(
)
;
while
(
currLevel
>
level
)
{
currLevel
--
;
parent
=
parent
.
getParent
(
)
;
}
if
(
parent
!=
null
)
{
parent
.
getChildren
(
)
.
add
(
item
)
;
}
}
}
currLevel
=
level
;
currItem
=
item
;
}
