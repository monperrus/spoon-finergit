/** 
 * Defines the common arguments for sub-launchers.
 * @return the JSAP arguments
 * @throws JSAPException when the creation fails
 */
protected
JSAP
defineArgs
(
)
throws
JSAPException
{
JSAP
jsap
=
new
JSAP
(
)
;
Switch
sw1
=
new
Switch
(
"help"
)
;
sw1
.
setShortFlag
(
'h'
)
;
sw1
.
setLongFlag
(
"help"
)
;
sw1
.
setDefault
(
"false"
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"verbose"
)
;
sw1
.
setShortFlag
(
'v'
)
;
sw1
.
setLongFlag
(
"verbose"
)
;
sw1
.
setDefault
(
"false"
)
;
sw1
.
setHelp
(
"Output messages about what the compiler is doing"
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"tabs"
)
;
sw1
.
setLongFlag
(
"tabs"
)
;
sw1
.
setDefault
(
"false"
)
;
sw1
.
setHelp
(
"Use tabulations instead of spaces in the generated code (use spaces by default)"
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"fragments"
)
;
sw1
.
setLongFlag
(
"fragments"
)
;
sw1
.
setShortFlag
(
'f'
)
;
sw1
.
setDefault
(
"false"
)
;
sw1
.
setHelp
(
"Use source code fragments to generate source code (preserve formatting)"
)
;
jsap
.
registerParameter
(
sw1
)
;
FlaggedOption
opt2
=
new
FlaggedOption
(
"tabsize"
)
;
opt2
.
setLongFlag
(
"tabsize"
)
;
opt2
.
setStringParser
(
JSAP
.
INTEGER_PARSER
)
;
opt2
.
setDefault
(
"4"
)
;
opt2
.
setHelp
(
"Define tabulation size"
)
;
jsap
.
registerParameter
(
opt2
)
;
sw1
=
new
Switch
(
"debug"
)
;
sw1
.
setLongFlag
(
"vvv"
)
;
sw1
.
setDefault
(
"false"
)
;
sw1
.
setHelp
(
"Generate all debugging info"
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"imports"
)
;
sw1
.
setLongFlag
(
"noimports"
)
;
sw1
.
setDefault
(
"false"
)
;
sw1
.
setHelp
(
"Disable imports in generated files"
)
;
jsap
.
registerParameter
(
sw1
)
;
opt2
=
new
FlaggedOption
(
"compliance"
)
;
opt2
.
setLongFlag
(
"compliance"
)
;
opt2
.
setHelp
(
"set java compliance level (1,2,3,4,5 or 6)"
)
;
opt2
.
setStringParser
(
JSAP
.
INTEGER_PARSER
)
;
opt2
.
setDefault
(
"6"
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"spoonlet"
)
;
opt2
.
setShortFlag
(
's'
)
;
opt2
.
setLongFlag
(
"spoonlet"
)
;
opt2
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt2
.
setRequired
(
false
)
;
opt2
.
setHelp
(
"List of spoonlet files to load"
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"input"
)
;
opt2
.
setShortFlag
(
'i'
)
;
opt2
.
setLongFlag
(
"input"
)
;
opt2
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt2
.
setRequired
(
false
)
;
opt2
.
setHelp
(
"List of path to sources files"
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"processors"
)
;
opt2
.
setShortFlag
(
'p'
)
;
opt2
.
setLongFlag
(
"processors"
)
;
opt2
.
setHelp
(
"List of processor's qualified name to be used"
)
;
opt2
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt2
.
setRequired
(
false
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"template"
)
;
opt2
.
setShortFlag
(
't'
)
;
opt2
.
setLongFlag
(
"template"
)
;
opt2
.
setHelp
(
"list of source templates"
)
;
opt2
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt2
.
setRequired
(
false
)
;
opt2
.
setHelp
(
"list of path to templates java files"
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"output"
)
;
opt2
.
setShortFlag
(
'o'
)
;
opt2
.
setLongFlag
(
"output"
)
;
opt2
.
setDefault
(
"spooned"
)
;
opt2
.
setHelp
(
"specify where to place generated java files"
)
;
opt2
.
setStringParser
(
FileStringParser
.
getParser
(
)
)
;
opt2
.
setRequired
(
false
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"properties"
)
;
opt2
.
setLongFlag
(
"properties"
)
;
opt2
.
setStringParser
(
FileStringParser
.
getParser
(
)
)
;
opt2
.
setRequired
(
false
)
;
opt2
.
setHelp
(
"Directory to search for spoon properties files"
)
;
jsap
.
registerParameter
(
opt2
)
;
UnflaggedOption
opt3
=
new
UnflaggedOption
(
"class"
)
;
opt3
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt3
.
setRequired
(
false
)
;
opt3
.
setHelp
(
"class to launch within the Spoon context (Main class)"
)
;
jsap
.
registerParameter
(
opt3
)
;
opt3
=
new
UnflaggedOption
(
"arguments"
)
;
opt3
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt3
.
setRequired
(
false
)
;
opt3
.
setGreedy
(
true
)
;
opt3
.
setHelp
(
"parameters to be passed to the main method"
)
;
jsap
.
registerParameter
(
opt3
)
;
return
jsap
;
}
