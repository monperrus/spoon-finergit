/** 
 * Starts the Spoon processing.
 */
public
void
run
(
)
{
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"loading command-line arguments..."
)
;
processArguments
(
)
;
getFactory
(
)
.
getEnvironment
(
)
.
reportProgressMessage
(
"start processing..."
)
;
long
t
=
System
.
currentTimeMillis
(
)
;
long
tstart
=
t
;
build
(
)
;
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"model built in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
t
=
System
.
currentTimeMillis
(
)
;
process
(
)
;
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"model processed in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
t
=
System
.
currentTimeMillis
(
)
;
print
(
)
;
if
(
getFactory
(
)
.
getEnvironment
(
)
.
getDefaultFileGenerator
(
)
!=
null
)
{
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"generated source in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
}
t
=
System
.
currentTimeMillis
(
)
;
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"program spooning done in "
+
(
t
-
tstart
)
+
" ms"
)
;
getFactory
(
)
.
getEnvironment
(
)
.
reportEnd
(
)
;
String
progClass
=
getArguments
(
)
.
getString
(
"class"
)
;
String
progArgs
=
getArguments
(
)
.
getStringArray
(
"arguments"
)
;
if
(
progClass
!=
null
)
{
try
{
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"running class: '"
+
progClass
+
"'..."
)
;
Class
clas
=
getClass
(
)
.
getClassLoader
(
)
.
loadClass
(
progClass
)
;
Class
mainArgType
=
{
(
new
String
[
]
)
.
getClass
(
)
}
;
Method
main
=
clas
.
getMethod
(
"main"
,
mainArgType
)
;
Object
argsArray
=
{
progArgs
}
;
main
.
invoke
(
null
,
argsArray
)
;
}
catch
(
ClassNotFoundException
e
)
{
getFactory
(
)
.
getEnvironment
(
)
.
report
(
null
,
Severity
.
ERROR
,
"class not found: "
+
e
.
getMessage
(
)
)
;
if
(
getFactory
(
)
.
getEnvironment
(
)
.
isDebug
(
)
)
e
.
printStackTrace
(
)
;
}
catch
(
NoSuchMethodException
e
)
{
getFactory
(
)
.
getEnvironment
(
)
.
report
(
null
,
Severity
.
ERROR
,
"no such method: "
+
e
.
getMessage
(
)
)
;
if
(
getFactory
(
)
.
getEnvironment
(
)
.
isDebug
(
)
)
e
.
printStackTrace
(
)
;
}
catch
(
SecurityException
e
)
{
e
.
printStackTrace
(
)
;
}
catch
(
IllegalArgumentException
e
)
{
e
.
printStackTrace
(
)
;
}
catch
(
IllegalAccessException
e
)
{
e
.
printStackTrace
(
)
;
}
catch
(
InvocationTargetException
e
)
{
e
.
printStackTrace
(
)
;
}
}
}
