/** 
 * Starts the Spoon processing.
 */
public
void
run
(
)
throws
Exception
{
getEnvironment
(
)
.
reportProgressMessage
(
"Spoon version 2.0"
)
;
getEnvironment
(
)
.
debugMessage
(
"loading command-line arguments..."
)
;
processArguments
(
)
;
if
(
arguments
.
getBoolean
(
"precompile"
)
)
{
ClassLoader
currentThreadClassLoader
=
Thread
.
currentThread
(
)
.
getContextClassLoader
(
)
;
URLClassLoader
urlClassLoader
=
new
URLClassLoader
(
new
URL
[
]
{
arguments
.
getFile
(
"destination"
)
.
toURI
(
)
.
toURL
(
)
}
,
currentThreadClassLoader
)
;
Thread
.
currentThread
(
)
.
setContextClassLoader
(
urlClassLoader
)
;
}
if
(
arguments
.
getBoolean
(
"fragments"
)
)
{
getEnvironment
(
)
.
reportProgressMessage
(
"running in 'fragments' mode: AST changes will be ignored"
)
;
}
getEnvironment
(
)
.
reportProgressMessage
(
"start processing..."
)
;
long
t
=
System
.
currentTimeMillis
(
)
;
long
tstart
=
t
;
SpoonCompiler
compiler
=
new
JDTCompiler
(
factory
=
createFactory
(
)
)
;
compiler
.
setDestinationDirectory
(
arguments
.
getFile
(
"destination"
)
)
;
compiler
.
setOutputDirectory
(
arguments
.
getFile
(
"output"
)
)
;
try
{
for
(
SpoonResource
f
:
getInputSources
(
)
)
{
compiler
.
addInputSource
(
f
)
;
}
for
(
SpoonResource
f
:
getTemplateSources
(
)
)
{
compiler
.
addTemplateSource
(
f
)
;
}
}
catch
(
IOException
e
)
{
getEnvironment
(
)
.
report
(
null
,
Severity
.
ERROR
,
"Error while loading resource : "
+
e
.
getMessage
(
)
)
;
if
(
getEnvironment
(
)
.
isDebug
(
)
)
{
e
.
printStackTrace
(
)
;
}
}
if
(
arguments
.
getBoolean
(
"precompile"
)
)
{
t
=
System
.
currentTimeMillis
(
)
;
compiler
.
compileInputSources
(
)
;
getEnvironment
(
)
.
debugMessage
(
"pre-compiled input sources in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
}
compiler
.
build
(
)
;
getEnvironment
(
)
.
debugMessage
(
"model built in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
t
=
System
.
currentTimeMillis
(
)
;
process
(
factory
)
;
getEnvironment
(
)
.
debugMessage
(
"model processed in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
t
=
System
.
currentTimeMillis
(
)
;
if
(
!
nooutput
)
{
compiler
.
generateProcessedSourceFiles
(
)
;
getEnvironment
(
)
.
debugMessage
(
"generated source in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
}
t
=
System
.
currentTimeMillis
(
)
;
if
(
!
nocompilation
)
{
compiler
.
compile
(
)
;
getEnvironment
(
)
.
debugMessage
(
"generated bytecode in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
}
t
=
System
.
currentTimeMillis
(
)
;
getEnvironment
(
)
.
debugMessage
(
"program spooning done in "
+
(
t
-
tstart
)
+
" ms"
)
;
getEnvironment
(
)
.
reportEnd
(
)
;
}
