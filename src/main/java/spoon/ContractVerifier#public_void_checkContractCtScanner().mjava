/** 
 * verifies the core scanning contracts (enter implies exit, etc) 
 */
public
void
checkContractCtScanner
(
)
{
class
Counter
{
int
scan
;
int
enter
;
int
exit
;
}
final
Counter
counter
=
new
Counter
(
)
;
final
Counter
counterInclNull
=
new
Counter
(
)
;
new
CtScanner
(
)
{
@Override
public
void
scan
(
CtElement
element
)
{
counterInclNull
.
scan
++
;
if
(
element
!=
null
)
{
counter
.
scan
++
;
}
super
.
scan
(
element
)
;
}
@Override
public
void
enter
(
CtElement
element
)
{
counter
.
enter
++
;
super
.
enter
(
element
)
;
}
@Override
public
void
exit
(
CtElement
element
)
{
counter
.
exit
++
;
super
.
exit
(
element
)
;
}
}
.
scan
(
_rootPackage
)
;
assertTrue
(
"violated contract: when enter is called, exit is also called"
,
counter
.
enter
==
counter
.
exit
)
;
assertTrue
(
" violated contract: all scanned elements ust call enter"
,
counter
.
enter
==
counter
.
scan
)
;
Counter
counterBiScan
=
new
Counter
(
)
;
class
ActualCounterScanner
extends
CtBiScannerDefault
{
@Override
public
void
biScan
(
CtElement
element
,
CtElement
other
)
{
super
.
biScan
(
element
,
other
)
;
counterBiScan
.
scan
++
;
if
(
element
==
null
)
{
if
(
other
!=
null
)
{
fail
(
"element can't be null if other isn't null."
)
;
}
}
else
if
(
other
==
null
)
{
fail
(
"other can't be null if element isn't null."
)
;
}
else
{
EqualsVisitor
ev
=
new
EqualsVisitor
(
)
;
boolean
res
=
ev
.
checkEquals
(
element
,
other
)
;
Object
notEqualOther
=
ev
.
getNotEqualOther
(
)
;
String
pb
=
""
;
if
(
notEqualOther
!=
null
)
{
notEqualOther
.
toString
(
)
;
}
if
(
notEqualOther
instanceof
CtElement
)
{
pb
=
" "
+
(
(
CtElement
)
notEqualOther
)
.
getPosition
(
)
.
toString
(
)
;
}
assertTrue
(
"not equal: "
+
pb
,
res
)
;
assertNotSame
(
element
,
other
)
;
}
}
}
final
ActualCounterScanner
actual
=
new
ActualCounterScanner
(
)
;
actual
.
biScan
(
_rootPackage
,
_rootPackage
.
clone
(
)
)
;
assertEquals
(
counterInclNull
.
scan
,
counterBiScan
.
scan
)
;
Counter
counterBiScan2
=
new
Counter
(
)
;
new
CtBiScannerDefault
(
)
{
@Override
public
void
biScan
(
CtElement
element
,
CtElement
other
)
{
counterBiScan2
.
scan
++
;
assertSame
(
element
,
other
)
;
super
.
biScan
(
element
,
other
)
;
}
}
.
biScan
(
_rootPackage
,
_rootPackage
)
;
assertEquals
(
counterInclNull
.
scan
,
counterBiScan2
.
scan
)
;
}
