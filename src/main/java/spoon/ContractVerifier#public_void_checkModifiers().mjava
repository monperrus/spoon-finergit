/** 
 * verifies that the explicit modifier should be present in the original source code 
 */
public
void
checkModifiers
(
)
{
for
(
CtModifiable
modifiable
:
_rootPackage
.
getElements
(
new
TypeFilter
<
>
(
CtModifiable
.
class
)
)
)
{
for
(
CtExtendedModifier
modifier
:
modifiable
.
getExtendedModifiers
(
)
)
{
if
(
modifier
.
isImplicit
(
)
)
{
continue
;
}
SourcePosition
position
=
modifier
.
getPosition
(
)
;
CompilationUnit
compilationUnit
=
position
.
getCompilationUnit
(
)
;
String
originalSourceCode
=
compilationUnit
.
getOriginalSourceCode
(
)
;
assertEquals
(
modifier
.
getKind
(
)
.
toString
(
)
,
originalSourceCode
.
substring
(
position
.
getSourceStart
(
)
,
position
.
getSourceEnd
(
)
+
1
)
)
;
}
}
}
