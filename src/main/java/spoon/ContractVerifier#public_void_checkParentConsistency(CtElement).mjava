/** 
 * public modifier for testing purpose only, not in the public API 
 */
@Internal
public
void
checkParentConsistency
(
CtElement
element
)
{
final
Set
<
CtElement
>
inconsistentParents
=
new
HashSet
<
>
(
)
;
new
CtScanner
(
)
{
private
Deque
<
CtElement
>
previous
=
new
ArrayDeque
(
)
;
@Override
protected
void
enter
(
CtElement
e
)
{
if
(
e
!=
null
)
{
if
(
!
previous
.
isEmpty
(
)
)
{
try
{
if
(
e
.
getParent
(
)
!=
previous
.
getLast
(
)
)
{
inconsistentParents
.
add
(
e
)
;
}
}
catch
(
ParentNotInitializedException
ignore
)
{
inconsistentParents
.
add
(
e
)
;
}
}
previous
.
add
(
e
)
;
}
super
.
enter
(
e
)
;
}
@Override
protected
void
exit
(
CtElement
e
)
{
if
(
e
==
null
)
{
return
;
}
if
(
e
.
equals
(
previous
.
getLast
(
)
)
)
{
previous
.
removeLast
(
)
;
}
else
{
throw
new
RuntimeException
(
"Inconsistent stack"
)
;
}
super
.
exit
(
e
)
;
}
}
.
scan
(
element
)
;
assertEquals
(
"All parents have to be consistent"
,
0
,
inconsistentParents
.
size
(
)
)
;
}
