/** 
 * Caches current spoon model and binary files. Should be called only after model is built. 
 */
public
void
saveCache
(
)
{
if
(
mIncrementalCacheDirectory
==
null
)
{
throw
new
SpoonException
(
"incremental cache directory is null"
)
;
}
Factory
factory
=
getFactory
(
)
;
if
(
factory
==
null
)
{
throw
new
SpoonException
(
"factory is null"
)
;
}
getModelBuilder
(
)
.
compile
(
SpoonModelBuilder
.
InputType
.
FILES
)
;
saveFactory
(
factory
,
mModelFile
)
;
CacheInfo
newCacheInfo
=
new
CacheInfo
(
)
;
newCacheInfo
.
lastBuildTime
=
System
.
currentTimeMillis
(
)
;
Map
<
File
,
Set
<
File
>
>
newSourcesMap
=
new
HashMap
<
>
(
)
;
for
(
Entry
<
String
,
CompilationUnit
>
e
:
factory
.
CompilationUnit
(
)
.
getMap
(
)
.
entrySet
(
)
)
{
newSourcesMap
.
put
(
new
File
(
e
.
getKey
(
)
)
,
new
HashSet
<
>
(
e
.
getValue
(
)
.
getBinaryFiles
(
)
)
)
;
}
if
(
mCacheInfo
!=
null
)
{
newSourcesMap
.
putAll
(
mCacheInfo
.
inputSourcesMap
)
;
for
(
File
r
:
mRemovedSources
)
{
newSourcesMap
.
get
(
r
)
.
forEach
(
File
::
delete
)
;
newSourcesMap
.
remove
(
r
)
;
}
}
Collection
<
File
>
dirs
=
FileUtils
.
listFilesAndDirs
(
mClassFilesDir
,
DirectoryFileFilter
.
INSTANCE
,
TrueFileFilter
.
INSTANCE
)
;
dirs
.
stream
(
)
.
filter
(
d
->
d
.
exists
(
)
&&
FileUtils
.
listFiles
(
d
,
TrueFileFilter
.
INSTANCE
,
TrueFileFilter
.
INSTANCE
)
.
isEmpty
(
)
)
.
forEach
(
FileUtils
::
deleteQuietly
)
;
newCacheInfo
.
inputSourcesMap
=
newSourcesMap
;
saveCacheInfo
(
newCacheInfo
,
mCacheInfoFile
)
;
}
