/** 
 * Defines the common arguments for sub-launchers.
 * @return the JSAP arguments
 * @throws JSAPException when the creation fails
 */
protected
JSAP
defineArgs
(
)
throws
JSAPException
{
JSAP
jsap
=
new
JSAP
(
)
;
Switch
sw1
=
new
Switch
(
"help"
)
;
sw1
.
setShortFlag
(
'h'
)
;
sw1
.
setLongFlag
(
"help"
)
;
sw1
.
setDefault
(
"false"
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"verbose"
)
;
sw1
.
setShortFlag
(
'v'
)
;
sw1
.
setLongFlag
(
"verbose"
)
;
sw1
.
setDefault
(
"false"
)
;
sw1
.
setHelp
(
"Output messages about what the compiler is doing."
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"tabs"
)
;
sw1
.
setLongFlag
(
"tabs"
)
;
sw1
.
setDefault
(
"false"
)
;
sw1
.
setHelp
(
"Use tabulations instead of spaces in the generated code (use spaces by default)."
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"fragments"
)
;
sw1
.
setLongFlag
(
"fragments"
)
;
sw1
.
setShortFlag
(
'f'
)
;
sw1
.
setDefault
(
"false"
)
;
sw1
.
setHelp
(
"Use source code fragments to generate source code (preserve formatting)."
)
;
jsap
.
registerParameter
(
sw1
)
;
FlaggedOption
opt2
=
new
FlaggedOption
(
"tabsize"
)
;
opt2
.
setLongFlag
(
"tabsize"
)
;
opt2
.
setStringParser
(
JSAP
.
INTEGER_PARSER
)
;
opt2
.
setDefault
(
"4"
)
;
opt2
.
setHelp
(
"Define tabulation size."
)
;
jsap
.
registerParameter
(
opt2
)
;
sw1
=
new
Switch
(
"debug"
)
;
sw1
.
setLongFlag
(
"vvv"
)
;
sw1
.
setDefault
(
"false"
)
;
sw1
.
setHelp
(
"Generate all debugging info."
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"imports"
)
;
sw1
.
setLongFlag
(
"with-imports"
)
;
sw1
.
setDefault
(
"false"
)
;
sw1
.
setHelp
(
"Enable imports in generated files."
)
;
jsap
.
registerParameter
(
sw1
)
;
opt2
=
new
FlaggedOption
(
"compliance"
)
;
opt2
.
setLongFlag
(
"compliance"
)
;
opt2
.
setHelp
(
"Java source code compliance level (1,2,3,4,5, 6 or 7)."
)
;
opt2
.
setStringParser
(
JSAP
.
INTEGER_PARSER
)
;
opt2
.
setDefault
(
"7"
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"spoonlet"
)
;
opt2
.
setShortFlag
(
's'
)
;
opt2
.
setLongFlag
(
"spoonlet"
)
;
opt2
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt2
.
setRequired
(
false
)
;
opt2
.
setHelp
(
"List of spoonlet files to load."
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"input"
)
;
opt2
.
setShortFlag
(
'i'
)
;
opt2
.
setLongFlag
(
"input"
)
;
opt2
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt2
.
setRequired
(
false
)
;
opt2
.
setHelp
(
"List of path to sources files."
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"processors"
)
;
opt2
.
setShortFlag
(
'p'
)
;
opt2
.
setLongFlag
(
"processors"
)
;
opt2
.
setHelp
(
"List of processor's qualified name to be used."
)
;
opt2
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt2
.
setRequired
(
false
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"template"
)
;
opt2
.
setShortFlag
(
't'
)
;
opt2
.
setLongFlag
(
"template"
)
;
opt2
.
setHelp
(
"List of source templates."
)
;
opt2
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt2
.
setRequired
(
false
)
;
opt2
.
setHelp
(
"List of path to templates java files."
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"output"
)
;
opt2
.
setShortFlag
(
'o'
)
;
opt2
.
setLongFlag
(
"output"
)
;
opt2
.
setDefault
(
"spooned"
)
;
opt2
.
setHelp
(
"Specify where to place generated java files."
)
;
opt2
.
setStringParser
(
FileStringParser
.
getParser
(
)
)
;
opt2
.
setRequired
(
false
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"properties"
)
;
opt2
.
setLongFlag
(
"properties"
)
;
opt2
.
setStringParser
(
FileStringParser
.
getParser
(
)
)
;
opt2
.
setRequired
(
false
)
;
opt2
.
setHelp
(
"Directory to search for spoon properties files."
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"source-classpath"
)
;
opt2
.
setLongFlag
(
"source-classpath"
)
;
opt2
.
setHelp
(
"An optional classpath to be passed to the internal Java compiler when building or compiling the input sources."
)
;
opt2
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt2
.
setRequired
(
false
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"template-classpath"
)
;
opt2
.
setLongFlag
(
"template-classpath"
)
;
opt2
.
setHelp
(
"An optional classpath to be passed to the internal Java compiler when building the template sources."
)
;
opt2
.
setStringParser
(
JSAP
.
STRING_PARSER
)
;
opt2
.
setRequired
(
false
)
;
jsap
.
registerParameter
(
opt2
)
;
opt2
=
new
FlaggedOption
(
"destination"
)
;
opt2
.
setShortFlag
(
'd'
)
;
opt2
.
setLongFlag
(
"destination"
)
;
opt2
.
setDefault
(
"spooned-classes"
)
;
opt2
.
setHelp
(
"An optional destination directory for the generated class files."
)
;
opt2
.
setStringParser
(
FileStringParser
.
getParser
(
)
)
;
opt2
.
setRequired
(
false
)
;
jsap
.
registerParameter
(
opt2
)
;
FlaggedOption
opt3
=
new
FlaggedOption
(
"output-type"
)
;
opt3
.
setLongFlag
(
opt3
.
getUsageName
(
)
)
;
String
msg
=
"states how to print the processed source code: "
;
for
(
OutputType
v
:
OutputType
.
values
(
)
)
{
msg
=
v
.
name
(
)
+
"/"
;
}
opt3
.
setHelp
(
msg
)
;
opt3
.
setDefault
(
"classes"
)
;
jsap
.
registerParameter
(
opt3
)
;
sw1
=
new
Switch
(
"compile"
)
;
sw1
.
setLongFlag
(
sw1
.
getUsageName
(
)
)
;
sw1
.
setHelp
(
"Enable compilation and output class files."
)
;
sw1
.
setDefault
(
"false"
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"precompile"
)
;
sw1
.
setLongFlag
(
"precompile"
)
;
sw1
.
setHelp
(
"Enable pre-compilation of input source files before processing. Compiled classes will be added to the classpath so that they are accessible to the processing manager (typically, processors, annotations, and templates should be pre-compiled most of the time)."
)
;
sw1
.
setDefault
(
"false"
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"buildOnlyOutdatedFiles"
)
;
sw1
.
setLongFlag
(
"buildOnlyOutdatedFiles"
)
;
sw1
.
setHelp
(
"Set Spoon to build only the source files that have been modified since the latest source code generation, for performance purpose. Note that this option requires to have the -noouput option set to true (which is the default)."
+
"This option is not appropriate to all kinds of processing. In particular processings that implement or rely on a global analysis should avoid this option because the processor will only have access to the outdated source code (the files modified since the latest processing)."
)
;
sw1
.
setDefault
(
"false"
)
;
jsap
.
registerParameter
(
sw1
)
;
sw1
=
new
Switch
(
"gui"
)
;
sw1
.
setShortFlag
(
'g'
)
;
sw1
.
setLongFlag
(
"gui"
)
;
sw1
.
setHelp
(
"Show spoon model after processing"
)
;
jsap
.
registerParameter
(
sw1
)
;
return
jsap
;
}
