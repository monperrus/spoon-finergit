protected
void
processArguments
(
)
{
jsapActualArgs
=
getArguments
(
)
;
Environment
environment
=
factory
.
getEnvironment
(
)
;
environment
.
setComplianceLevel
(
jsapActualArgs
.
getInt
(
"compliance"
)
)
;
environment
.
setLevel
(
jsapActualArgs
.
getString
(
"level"
)
)
;
environment
.
setAutoImports
(
jsapActualArgs
.
getBoolean
(
"imports"
)
)
;
environment
.
setNoClasspath
(
jsapActualArgs
.
getBoolean
(
"noclasspath"
)
)
;
environment
.
setPreserveLineNumbers
(
jsapActualArgs
.
getBoolean
(
"lines"
)
)
;
environment
.
setTabulationSize
(
jsapActualArgs
.
getInt
(
"tabsize"
)
)
;
environment
.
useTabulations
(
jsapActualArgs
.
getBoolean
(
"tabs"
)
)
;
environment
.
setCopyResources
(
!
jsapActualArgs
.
getBoolean
(
"no-copy-resources"
)
)
;
if
(
jsapActualArgs
.
getBoolean
(
"enable-comments"
)
)
{
Launcher
.
LOGGER
.
warn
(
"The option --enable-comments (-c) is deprecated as it is now the default behaviour in Spoon."
)
;
}
else
{
Launcher
.
LOGGER
.
warn
(
"Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour."
)
;
}
if
(
jsapActualArgs
.
getBoolean
(
"disable-comments"
)
)
{
environment
.
setCommentEnabled
(
false
)
;
}
else
{
environment
.
setCommentEnabled
(
true
)
;
}
environment
.
setShouldCompile
(
jsapActualArgs
.
getBoolean
(
"compile"
)
)
;
environment
.
setSelfChecks
(
jsapActualArgs
.
getBoolean
(
"disable-model-self-checks"
)
)
;
String
outputString
=
jsapActualArgs
.
getString
(
"output-type"
)
;
OutputType
outputType
=
OutputType
.
fromString
(
outputString
)
;
if
(
outputType
==
null
)
{
throw
new
SpoonException
(
"Unknown output type: "
+
outputString
)
;
}
else
{
environment
.
setOutputType
(
outputType
)
;
}
try
{
Charset
charset
=
Charset
.
forName
(
jsapActualArgs
.
getString
(
"encoding"
)
)
;
environment
.
setEncoding
(
charset
)
;
}
catch
(
Exception
e
)
{
throw
new
SpoonException
(
e
)
;
}
if
(
getArguments
(
)
.
getString
(
"generate-files"
)
!=
null
)
{
setOutputFilter
(
getArguments
(
)
.
getString
(
"generate-files"
)
.
split
(
":"
)
)
;
}
modelBuilder
=
createCompiler
(
)
;
if
(
getArguments
(
)
.
getString
(
"input"
)
!=
null
)
{
for
(
String
s
:
getArguments
(
)
.
getString
(
"input"
)
.
split
(
"["
+
File
.
pathSeparatorChar
+
"]"
)
)
{
try
{
modelBuilder
.
addInputSource
(
SpoonResourceHelper
.
createResource
(
new
File
(
s
)
)
)
;
}
catch
(
FileNotFoundException
e
)
{
throw
new
SpoonException
(
e
)
;
}
}
}
if
(
jsapActualArgs
.
getBoolean
(
"precompile"
)
)
{
modelBuilder
.
compile
(
InputType
.
FILES
)
;
getEnvironment
(
)
.
setSourceClasspath
(
new
String
[
]
{
getEnvironment
(
)
.
getBinaryOutputDirectory
(
)
}
)
;
}
if
(
getArguments
(
)
.
getFile
(
"output"
)
!=
null
)
{
setSourceOutputDirectory
(
getArguments
(
)
.
getFile
(
"output"
)
)
;
}
if
(
getArguments
(
)
.
getString
(
"template"
)
!=
null
)
{
for
(
String
s
:
getArguments
(
)
.
getString
(
"template"
)
.
split
(
"["
+
File
.
pathSeparatorChar
+
"]"
)
)
{
try
{
modelBuilder
.
addTemplateSource
(
SpoonResourceHelper
.
createResource
(
new
File
(
s
)
)
)
;
}
catch
(
FileNotFoundException
e
)
{
environment
.
report
(
null
,
Level
.
ERROR
,
"Unable to add template file: "
+
e
.
getMessage
(
)
)
;
LOGGER
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
}
}
if
(
getArguments
(
)
.
getString
(
"processors"
)
!=
null
)
{
for
(
String
processorName
:
getArguments
(
)
.
getString
(
"processors"
)
.
split
(
File
.
pathSeparator
)
)
{
addProcessor
(
processorName
)
;
}
}
}
