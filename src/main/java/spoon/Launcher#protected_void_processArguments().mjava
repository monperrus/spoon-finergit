protected
void
processArguments
(
)
{
jsapActualArgs
=
getArguments
(
)
;
Environment
environment
=
factory
.
getEnvironment
(
)
;
environment
.
setComplianceLevel
(
jsapActualArgs
.
getInt
(
"compliance"
)
)
;
environment
.
setLevel
(
jsapActualArgs
.
getString
(
"level"
)
)
;
final
boolean
debug
=
jsapActualArgs
.
getBoolean
(
"debug"
)
;
final
boolean
verbose
=
jsapActualArgs
.
getBoolean
(
"verbose"
)
;
if
(
debug
)
{
environment
.
setLevel
(
"DEBUG"
)
;
}
else
if
(
verbose
)
{
environment
.
setLevel
(
"INFO"
)
;
}
LOGGER
.
setLevel
(
environment
.
getLevel
(
)
)
;
environment
.
setXmlRootFolder
(
jsapActualArgs
.
getFile
(
"properties"
)
)
;
environment
.
setDefaultFileGenerator
(
createOutputWriter
(
jsapActualArgs
.
getFile
(
"output"
)
,
environment
)
)
;
environment
.
setAutoImports
(
jsapActualArgs
.
getBoolean
(
"imports"
)
)
;
environment
.
setNoClasspath
(
jsapActualArgs
.
getBoolean
(
"noclasspath"
)
)
;
environment
.
setPreserveLineNumbers
(
jsapActualArgs
.
getBoolean
(
"lines"
)
)
;
environment
.
setTabulationSize
(
jsapActualArgs
.
getInt
(
"tabsize"
)
)
;
environment
.
useTabulations
(
jsapActualArgs
.
getBoolean
(
"tabs"
)
)
;
environment
.
setCopyResources
(
!
jsapActualArgs
.
getBoolean
(
"no-copy-resources"
)
)
;
environment
.
setGenerateJavadoc
(
jsapActualArgs
.
getBoolean
(
"generate-javadoc"
)
)
;
modelBuilder
=
createCompiler
(
)
;
if
(
getArguments
(
)
.
getString
(
"input"
)
!=
null
)
{
for
(
String
s
:
getArguments
(
)
.
getString
(
"input"
)
.
split
(
"["
+
File
.
pathSeparatorChar
+
"]"
)
)
{
try
{
modelBuilder
.
addInputSource
(
SpoonResourceHelper
.
createResource
(
new
File
(
s
)
)
)
;
}
catch
(
FileNotFoundException
e
)
{
throw
new
SpoonException
(
e
)
;
}
}
}
if
(
getArguments
(
)
.
getString
(
"template"
)
!=
null
)
{
for
(
String
s
:
getArguments
(
)
.
getString
(
"template"
)
.
split
(
"["
+
File
.
pathSeparatorChar
+
"]"
)
)
{
try
{
modelBuilder
.
addTemplateSource
(
SpoonResourceHelper
.
createResource
(
new
File
(
s
)
)
)
;
}
catch
(
FileNotFoundException
e
)
{
environment
.
report
(
null
,
Level
.
ERROR
,
"Unable to add template file: "
+
e
.
getMessage
(
)
)
;
LOGGER
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
}
}
if
(
getArguments
(
)
.
getString
(
"processors"
)
!=
null
)
{
for
(
String
processorName
:
getArguments
(
)
.
getString
(
"processors"
)
.
split
(
File
.
pathSeparator
)
)
{
addProcessor
(
processorName
)
;
}
}
}
