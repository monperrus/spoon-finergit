/** 
 * Processes the program within a  {@link SpoonClassLoader}.
 */
@Override
public
void
run
(
)
throws
Exception
{
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"loading command-line arguments..."
)
;
processArguments
(
)
;
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"start Processing..."
)
;
long
t
=
System
.
currentTimeMillis
(
)
;
build
(
)
;
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"model built in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
t
=
System
.
currentTimeMillis
(
)
;
process
(
)
;
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"model processed in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
t
=
System
.
currentTimeMillis
(
)
;
SpoonClassLoader
ccl
=
new
SpoonClassLoader
(
)
;
ccl
.
setFactory
(
getFactory
(
)
)
;
if
(
getArguments
(
)
.
getString
(
"sourcepath"
)
!=
null
)
ccl
.
setSourcePath
(
new
File
(
getArguments
(
)
.
getString
(
"sourcepath"
)
)
)
;
ProcessingManager
pm
=
new
RuntimeProcessingManager
(
getFactory
(
)
)
;
for
(
String
s
:
getLtProcessorTypes
(
)
)
pm
.
addProcessor
(
s
)
;
ccl
.
setProcessingManager
(
pm
)
;
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"running..."
)
;
String
progClass
=
getArguments
(
)
.
getString
(
"class"
)
;
String
progArgs
=
getArguments
(
)
.
getStringArray
(
"arguments"
)
;
Class
<
?
>
clas
=
ccl
.
loadClass
(
progClass
)
;
Class
<
?
>
mainArgType
=
{
(
new
String
[
]
)
.
getClass
(
)
}
;
Method
main
=
clas
.
getMethod
(
"main"
,
mainArgType
)
;
Object
argsArray
=
{
progArgs
}
;
main
.
invoke
(
null
,
argsArray
)
;
}
