/** 
 * Extract the information from the pom
 * @param path the path to the pom
 * @param parent the parent pom
 * @return the extracted model
 * @throws IOException when the file does not exist
 * @throws XmlPullParserException when the file is corrupted
 */
private
InheritanceModel
readPOM
(
String
path
,
InheritanceModel
parent
)
throws
IOException
,
XmlPullParserException
{
if
(
!
path
.
endsWith
(
".xml"
)
&&
!
path
.
endsWith
(
".pom"
)
)
{
path
=
Paths
.
get
(
path
,
"pom.xml"
)
.
toString
(
)
;
}
File
pomFile
=
new
File
(
path
)
;
if
(
!
pomFile
.
exists
(
)
)
{
return
null
;
}
MavenXpp3Reader
pomReader
=
new
MavenXpp3Reader
(
)
;
try
(
FileReader
reader
=
new
FileReader
(
pomFile
)
)
{
Model
model
=
pomReader
.
read
(
reader
)
;
InheritanceModel
inheritanceModel
=
new
InheritanceModel
(
model
,
parent
,
pomFile
.
getParentFile
(
)
)
;
for
(
String
module
:
model
.
getModules
(
)
)
{
inheritanceModel
.
addModule
(
readPOM
(
Paths
.
get
(
pomFile
.
getParent
(
)
,
module
)
.
toString
(
)
,
inheritanceModel
)
)
;
}
return
inheritanceModel
;
}
}
