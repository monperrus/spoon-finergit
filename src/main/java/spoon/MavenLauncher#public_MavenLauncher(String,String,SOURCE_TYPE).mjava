/** 
 * @param mavenProject the path to the root of the project
 * @param m2RepositoryPath the path to the m2repository
 */
public
MavenLauncher
(
String
mavenProject
,
String
m2RepositoryPath
,
SOURCE_TYPE
sourceType
)
{
super
(
)
;
this
.
m2RepositoryPath
=
m2RepositoryPath
;
this
.
sourceType
=
sourceType
;
File
mavenProjectFile
=
new
File
(
mavenProject
)
;
if
(
!
mavenProjectFile
.
exists
(
)
)
{
throw
new
SpoonException
(
mavenProject
+
" does not exist."
)
;
}
InheritanceModel
model
;
try
{
model
=
readPOM
(
mavenProject
,
null
)
;
}
catch
(
Exception
e
)
{
throw
new
SpoonException
(
"Unable to read the pom"
,
e
)
;
}
if
(
model
==
null
)
{
throw
new
SpoonException
(
"Unable to create the model, pom not found?"
)
;
}
if
(
SOURCE_TYPE
.
APP_SOURCE
==
sourceType
||
SOURCE_TYPE
.
ALL_SOURCE
==
sourceType
)
{
List
<
File
>
sourceDirectories
=
model
.
getSourceDirectories
(
)
;
for
(
File
sourceDirectory
:
sourceDirectories
)
{
this
.
addInputResource
(
sourceDirectory
.
getAbsolutePath
(
)
)
;
}
}
if
(
SOURCE_TYPE
.
TEST_SOURCE
==
sourceType
||
SOURCE_TYPE
.
ALL_SOURCE
==
sourceType
)
{
List
<
File
>
testSourceDirectories
=
model
.
getTestDirectories
(
)
;
for
(
File
sourceDirectory
:
testSourceDirectories
)
{
this
.
addInputResource
(
sourceDirectory
.
getAbsolutePath
(
)
)
;
}
}
List
<
File
>
dependencies
=
model
.
getDependencies
(
false
)
;
String
[
]
classpath
=
new
String
[
]
;
for
(
int
i
=
0
;
i
<
dependencies
.
size
(
)
;
i
++
)
{
File
file
=
dependencies
.
get
(
i
)
;
classpath
[
i
]
=
file
.
getAbsolutePath
(
)
;
}
this
.
getModelBuilder
(
)
.
setSourceClasspath
(
classpath
)
;
this
.
getEnvironment
(
)
.
setComplianceLevel
(
model
.
getSourceVersion
(
)
)
;
}
