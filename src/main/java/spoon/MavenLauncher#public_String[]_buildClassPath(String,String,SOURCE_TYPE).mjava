/** 
 * Call maven invoker to generate the classpath. Either M2_HOME must be initialized, or the command mvn must be in PATH.
 * @param mvnHome the path to the m2repository
 * @param mavenProject the path to the root of the project
 * @param sourceType the source type (App, test, or all)
 */
public
static
String
[
]
buildClassPath
(
String
mvnHome
,
String
mavenProject
,
SOURCE_TYPE
sourceType
)
{
if
(
mvnHome
==
null
)
{
mvnHome
=
guessMavenHome
(
)
;
if
(
mvnHome
==
null
)
{
throw
new
SpoonException
(
"M2_HOME must be initialized to use this MavenLauncher constructor."
)
;
}
}
String
projectPath
=
mavenProject
;
if
(
!
projectPath
.
endsWith
(
".xml"
)
&&
!
projectPath
.
endsWith
(
".pom"
)
)
{
projectPath
=
Paths
.
get
(
projectPath
,
"pom.xml"
)
.
toString
(
)
;
}
File
pom
=
new
File
(
projectPath
)
;
generateClassPathFile
(
pom
,
new
File
(
mvnHome
)
,
sourceType
)
;
List
<
File
>
classPathPrints
;
String
[
]
classpath
;
try
{
classPathPrints
=
Files
.
find
(
Paths
.
get
(
pom
.
getParentFile
(
)
.
getAbsolutePath
(
)
)
,
Integer
.
MAX_VALUE
,
(
filePath
,
fileAttr
)
->
filePath
.
endsWith
(
spoonClasspathTmpFileName
)
)
.
map
(
p
->
p
.
toFile
(
)
)
.
collect
(
Collectors
.
toList
(
)
)
;
File
[
]
classPathPrintFiles
=
new
File
[
]
;
classPathPrintFiles
=
classPathPrints
.
toArray
(
classPathPrintFiles
)
;
classpath
=
readClassPath
(
classPathPrintFiles
)
;
}
catch
(
IOException
e
)
{
throw
new
SpoonException
(
"Failed to generate class path for "
+
pom
.
getAbsolutePath
(
)
+
"."
)
;
}
return
classpath
;
}
