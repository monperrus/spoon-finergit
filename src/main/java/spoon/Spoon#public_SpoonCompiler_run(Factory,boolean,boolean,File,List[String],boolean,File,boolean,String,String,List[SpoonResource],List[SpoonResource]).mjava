/** 
 * Runs Spoon on the given factory, with the given run options. A Spoon run will perform the following tasks: <ol> <li>Pre-compilation (optional).</li> <li>Source model building in the given factory.</li> <li>Template model building in the given factory (if any template source is given).</li> <li>Model processing with the list of given processors if any.</li> <li>Processed Source code printing and generation (can be disabled with <code>nooutput</code>).</li> <li>Processed source code compilation (optional).</li> <ol>
 * @param factory the factory to be used, with a properly initialized environment
 * @param precompile precompile the source code before processing to make sure that the input source classes will be available in the classpath
 * @param nooutput disables source code output
 * @param outputDirectory the output directory of the generated source files
 * @param processorTypes the list of processors to be applied to the built model
 * @param compile compile the source code to bytecode once generated
 * @param destinationDirectory the destination directory of the compiled bytecode
 * @param buildOnlyOutdatedFiles build and compile the files that has been modified since the last build/compilation (requires <code>!nooutput</code> and <code>compile</code> with a correctly set <code>detinatioDirectory</code>)
 * @param sourceClasspath the classpath to build and compile the input sources, given as a string
 * @param templateClasspath the classpath to build the template sources, given as a string
 * @param inputSources a list of resources containing the input sources
 * @param templateSources a list of resources containing the template sources (can contain zip or jar files)
 * @return the Spoon compiler created by Spoon
 * @throws Exception in case something bad happens
 */
public
static
SpoonCompiler
run
(
Factory
factory
,
boolean
precompile
,
boolean
nooutput
,
File
outputDirectory
,
List
<
String
>
processorTypes
,
boolean
compile
,
File
destinationDirectory
,
boolean
buildOnlyOutdatedFiles
,
String
sourceClasspath
,
String
templateClasspath
,
List
<
SpoonResource
>
inputSources
,
List
<
SpoonResource
>
templateSources
)
throws
Exception
{
Environment
env
=
factory
.
getEnvironment
(
)
;
env
.
reportProgressMessage
(
"running Spoon..."
)
;
if
(
env
.
isUsingSourceCodeFragments
(
)
)
{
env
.
reportProgressMessage
(
"running in 'fragments' mode: AST changes will be ignored"
)
;
}
env
.
reportProgressMessage
(
"start processing..."
)
;
long
t
=
System
.
currentTimeMillis
(
)
;
long
tstart
=
t
;
SpoonCompiler
compiler
=
new
JDTCompiler
(
factory
)
;
compiler
.
setBuildOnlyOutdatedFiles
(
!
nooutput
&&
buildOnlyOutdatedFiles
)
;
compiler
.
setDestinationDirectory
(
destinationDirectory
)
;
compiler
.
setOutputDirectory
(
outputDirectory
)
;
compiler
.
setSourceClasspath
(
sourceClasspath
)
;
compiler
.
setTemplateClasspath
(
templateClasspath
)
;
env
.
debugMessage
(
"output: "
+
compiler
.
getOutputDirectory
(
)
)
;
env
.
debugMessage
(
"destination: "
+
compiler
.
getDestinationDirectory
(
)
)
;
env
.
debugMessage
(
"source classpath: "
+
compiler
.
getSourceClasspath
(
)
)
;
env
.
debugMessage
(
"template classpath: "
+
compiler
.
getTemplateClasspath
(
)
)
;
try
{
for
(
SpoonResource
f
:
inputSources
)
{
env
.
debugMessage
(
"add input source: "
+
f
)
;
compiler
.
addInputSource
(
f
)
;
}
for
(
SpoonResource
f
:
templateSources
)
{
env
.
debugMessage
(
"add template source: "
+
f
)
;
compiler
.
addTemplateSource
(
f
)
;
}
}
catch
(
Exception
e
)
{
env
.
report
(
null
,
Severity
.
ERROR
,
"Error while loading resource : "
+
e
.
getMessage
(
)
)
;
if
(
env
.
isDebug
(
)
)
{
e
.
printStackTrace
(
)
;
}
}
if
(
precompile
)
{
t
=
System
.
currentTimeMillis
(
)
;
compiler
.
compileInputSources
(
)
;
env
.
debugMessage
(
"pre-compiled input sources in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
}
compiler
.
build
(
)
;
env
.
debugMessage
(
"model built in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
t
=
System
.
currentTimeMillis
(
)
;
process
(
factory
,
processorTypes
)
;
env
.
debugMessage
(
"model processed in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
t
=
System
.
currentTimeMillis
(
)
;
if
(
!
nooutput
)
{
compiler
.
generateProcessedSourceFiles
(
)
;
env
.
debugMessage
(
"generated source in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
}
t
=
System
.
currentTimeMillis
(
)
;
if
(
compile
)
{
compiler
.
compile
(
)
;
env
.
debugMessage
(
"generated bytecode in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
}
t
=
System
.
currentTimeMillis
(
)
;
env
.
debugMessage
(
"program spooning done in "
+
(
t
-
tstart
)
+
" ms"
)
;
env
.
reportEnd
(
)
;
return
compiler
;
}
