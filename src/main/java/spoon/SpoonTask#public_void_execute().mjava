/** 
 * Executes the task.
 */
@Override
public
void
execute
(
)
throws
BuildException
{
setFork
(
false
)
;
if
(
verbose
)
{
createArg
(
)
.
setValue
(
"-v"
)
;
}
if
(
debug
)
{
createArg
(
)
.
setValue
(
"--vvv"
)
;
}
if
(
precompile
)
{
createArg
(
)
.
setValue
(
"--precompile"
)
;
}
if
(
tabs
)
{
createArg
(
)
.
setValue
(
"--tabs"
)
;
}
createArg
(
)
.
setValue
(
"--tabsize"
)
;
createArg
(
)
.
setValue
(
""
+
tabSize
)
;
if
(
outputType
!=
null
)
{
createArg
(
)
.
setValue
(
"--output-type"
)
;
createArg
(
)
.
setValue
(
outputType
)
;
}
if
(
encoding
!=
null
)
{
createArg
(
)
.
setValue
(
"--encoding"
)
;
createArg
(
)
.
setValue
(
encoding
)
;
}
if
(
compile
)
{
createArg
(
)
.
setValue
(
"--compile"
)
;
}
if
(
buildOnlyOutdatedFiles
)
{
createArg
(
)
.
setValue
(
"--buildOnlyOutdatedFiles"
)
;
}
if
(
lines
)
{
createArg
(
)
.
setValue
(
"--lines"
)
;
}
createArg
(
)
.
setValue
(
"--compliance"
)
;
createArg
(
)
.
setValue
(
""
+
javaCompliance
)
;
if
(
(
spoonlet
!=
null
)
||
(
spoonletfileset
.
size
(
)
>
0
)
)
{
createArg
(
)
.
setValue
(
"-s"
)
;
String
f
=
""
;
if
(
spoonlet
!=
null
)
{
f
=
spoonlet
.
getAbsolutePath
(
)
+
File
.
pathSeparator
;
}
for
(
int
i
=
0
;
i
<
spoonletfileset
.
size
(
)
;
i
++
)
{
FileSet
fs
=
spoonletfileset
.
elementAt
(
i
)
;
DirectoryScanner
ds
=
fs
.
getDirectoryScanner
(
getProject
(
)
)
;
File
dir
=
fs
.
getDir
(
getProject
(
)
)
;
String
[
]
srcs
=
ds
.
getIncludedFiles
(
)
;
for
(
String
element
:
srcs
)
{
f
=
dir
.
getAbsolutePath
(
)
+
File
.
separatorChar
+
element
+
File
.
pathSeparator
;
}
}
createArg
(
)
.
setValue
(
f
)
;
}
if
(
output
!=
null
)
{
if
(
output
.
exists
(
)
&&
!
output
.
isDirectory
(
)
)
{
throw
new
BuildException
(
"Output must be a directory"
)
;
}
createArg
(
)
.
setValue
(
"-o"
)
;
createArg
(
)
.
setValue
(
output
.
getAbsolutePath
(
)
)
;
}
if
(
destination
!=
null
)
{
if
(
destination
.
exists
(
)
&&
!
destination
.
isDirectory
(
)
)
{
throw
new
BuildException
(
"Destination must be a directory"
)
;
}
createArg
(
)
.
setValue
(
"-d"
)
;
createArg
(
)
.
setValue
(
destination
.
getAbsolutePath
(
)
)
;
}
if
(
(
input
!=
null
)
||
(
sourcefilesets
.
size
(
)
>
0
)
)
{
createArg
(
)
.
setValue
(
"-i"
)
;
String
f
=
""
;
if
(
input
!=
null
)
{
f
=
input
.
getAbsolutePath
(
)
+
File
.
pathSeparator
;
}
for
(
int
i
=
0
;
i
<
sourcefilesets
.
size
(
)
;
i
++
)
{
FileSet
fs
=
sourcefilesets
.
elementAt
(
i
)
;
File
dir
=
fs
.
getDir
(
getProject
(
)
)
;
f
=
dir
.
getAbsolutePath
(
)
+
File
.
pathSeparator
;
}
createArg
(
)
.
setValue
(
f
)
;
}
if
(
(
template
!=
null
)
||
(
templatefilesets
.
size
(
)
>
0
)
)
{
createArg
(
)
.
setValue
(
"-t"
)
;
String
f
=
""
;
if
(
template
!=
null
)
{
if
(
!
template
.
exists
(
)
)
{
throw
new
BuildException
(
"template file or directory does not exist ("
+
template
.
getAbsolutePath
(
)
+
")"
)
;
}
f
=
template
.
getAbsolutePath
(
)
+
File
.
pathSeparator
;
}
for
(
int
i
=
0
;
i
<
templatefilesets
.
size
(
)
;
i
++
)
{
FileSet
fs
=
templatefilesets
.
elementAt
(
i
)
;
File
dir
=
fs
.
getDir
(
getProject
(
)
)
;
f
=
dir
.
getAbsolutePath
(
)
+
File
.
pathSeparator
;
}
createArg
(
)
.
setValue
(
f
)
;
}
if
(
properties
!=
null
)
{
createArg
(
)
.
setValue
(
"--properties"
)
;
if
(
!
properties
.
exists
(
)
)
{
throw
new
BuildException
(
"properties directory does not exist ("
+
properties
.
getAbsolutePath
(
)
+
")"
)
;
}
createArg
(
)
.
setValue
(
properties
.
getAbsolutePath
(
)
)
;
}
if
(
(
processorTypes
!=
null
)
&&
(
processorTypes
.
size
(
)
>
0
)
)
{
createArg
(
)
.
setValue
(
"-p"
)
;
String
process
=
""
;
for
(
ProcessorType
t
:
processorTypes
)
{
process
=
t
.
type
+
File
.
pathSeparator
;
}
createArg
(
)
.
setValue
(
process
)
;
}
if
(
classname
!=
null
)
{
createArg
(
)
.
setValue
(
classname
)
;
}
if
(
sourceClasspath
!=
null
)
{
createArg
(
)
.
setValue
(
"--source-classpath"
)
;
createArg
(
)
.
setValue
(
sourceClasspath
.
toString
(
)
)
;
}
else
if
(
getCommandLine
(
)
.
getClasspath
(
)
!=
null
)
{
createArg
(
)
.
setValue
(
"--source-classpath"
)
;
createArg
(
)
.
setValue
(
getCommandLine
(
)
.
getClasspath
(
)
.
toString
(
)
)
;
}
if
(
templateClasspath
!=
null
)
{
createArg
(
)
.
setValue
(
"--template-classpath"
)
;
createArg
(
)
.
setValue
(
templateClasspath
.
toString
(
)
)
;
}
else
if
(
getCommandLine
(
)
.
getClasspath
(
)
!=
null
)
{
createArg
(
)
.
setValue
(
"--template-classpath"
)
;
createArg
(
)
.
setValue
(
getCommandLine
(
)
.
getClasspath
(
)
.
toString
(
)
)
;
}
super
.
execute
(
)
;
}
