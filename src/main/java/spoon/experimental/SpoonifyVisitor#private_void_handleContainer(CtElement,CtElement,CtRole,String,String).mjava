private
void
handleContainer
(
CtElement
element
,
CtElement
parent
,
CtRole
elementRoleInParent
,
String
variableName
,
String
container
)
{
String
concreteClass
=
null
;
switch
(
container
)
{
case
"Map"
:
concreteClass
=
"HashMap"
;
break
;
case
"List"
:
concreteClass
=
"ArrayList"
;
break
;
case
"Set"
:
concreteClass
=
"HashSet"
;
break
;
}
String
containerName
;
if
(
!
roleContainer
.
peek
(
)
.
containsKey
(
elementRoleInParent
)
)
{
containerName
=
parentName
.
peek
(
)
+
elementRoleInParent
.
toString
(
)
.
substring
(
0
,
1
)
.
toUpperCase
(
)
+
elementRoleInParent
.
toString
(
)
.
substring
(
1
)
+
"s"
;
roleContainer
.
peek
(
)
.
put
(
elementRoleInParent
,
containerName
)
;
result
.
append
(
printTabs
(
)
+
container
+
" "
+
containerName
+
" = new "
+
concreteClass
+
"();\n"
)
;
}
else
{
containerName
=
roleContainer
.
peek
(
)
.
get
(
elementRoleInParent
)
;
}
if
(
container
.
equals
(
"Map"
)
)
{
List
<
String
>
keys
=
new
ArrayList
<
>
(
)
;
Map
m
=
parent
.
getValueByRole
(
elementRoleInParent
)
;
for
(
Object
e
:
m
.
entrySet
(
)
)
{
Map
.
Entry
entry
=
(
Map
.
Entry
)
e
;
if
(
entry
.
getValue
(
)
.
equals
(
element
)
)
{
keys
.
add
(
(
String
)
entry
.
getKey
(
)
)
;
}
}
for
(
String
key
:
keys
)
{
result
.
append
(
printTabs
(
)
+
containerName
+
".put(\""
+
key
+
"\", "
+
variableName
+
");\n"
)
;
}
}
else
{
result
.
append
(
printTabs
(
)
+
containerName
+
".add("
+
variableName
+
");\n"
)
;
}
}
