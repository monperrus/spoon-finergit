/** 
 * @param currentElement the {@link CtElement} whose changes has to be checked
 * @return set of {@link CtRole}s whose attribute was changed on `currentElement` or any child of this attribute was changed since this  {@link ChangeCollector} was attached
 */
public
Set
<
CtRole
>
getChanges
(
CtElement
currentElement
)
{
final
Set
<
CtRole
>
changes
=
new
HashSet
<
>
(
getDirectChanges
(
currentElement
)
)
;
final
Scanner
scanner
=
new
Scanner
(
)
;
scanner
.
setListener
(
new
CtScannerListener
(
)
{
int
depth
=
0
;
CtRole
checkedRole
;
@Override
public
ScanningMode
enter
(
CtElement
element
)
{
if
(
depth
==
0
)
{
checkedRole
=
scanner
.
getScannedRole
(
)
;
}
if
(
changes
.
contains
(
checkedRole
)
)
{
return
ScanningMode
.
SKIP_ALL
;
}
if
(
elementToChangeRole
.
containsKey
(
element
)
)
{
changes
.
add
(
checkedRole
)
;
return
ScanningMode
.
SKIP_ALL
;
}
depth
++
;
return
ScanningMode
.
NORMAL
;
}
@Override
public
void
exit
(
CtElement
element
)
{
depth
--
;
}
}
)
;
currentElement
.
accept
(
scanner
)
;
return
Collections
.
unmodifiableSet
(
changes
)
;
}
