private
CtClass
<
Object
>
createCloneVisitor
(
)
{
final
CtPackage
aPackage
=
getFactory
(
)
.
Package
(
)
.
getOrCreate
(
TARGET_CLONE_PACKAGE
)
;
final
CtClass
<
Object
>
target
=
getFactory
(
)
.
Class
(
)
.
get
(
GENERATING_CLONE
)
;
target
.
setSimpleName
(
TARGET_CLONE_TYPE
)
;
target
.
addModifier
(
ModifierKind
.
PUBLIC
)
;
aPackage
.
addType
(
target
)
;
final
List
<
CtTypeReference
>
references
=
target
.
getElements
(
new
TypeFilter
<
CtTypeReference
>
(
CtTypeReference
.
class
)
{
@Override
public
boolean
matches
(
CtTypeReference
reference
)
{
return
GENERATING_CLONE
.
equals
(
reference
.
getQualifiedName
(
)
)
;
}
}
)
;
for
(
CtTypeReference
reference
:
references
)
{
reference
.
setSimpleName
(
TARGET_CLONE_TYPE
)
;
reference
.
setPackage
(
aPackage
.
getReference
(
)
)
;
}
target
.
getConstructors
(
)
.
forEach
(
c
->
c
.
addModifier
(
ModifierKind
.
PUBLIC
)
)
;
return
target
;
}
