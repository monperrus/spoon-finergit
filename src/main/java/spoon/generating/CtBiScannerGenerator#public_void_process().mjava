public
void
process
(
)
{
final
CtLocalVariable
<
?
>
peekElement
=
getFactory
(
)
.
Class
(
)
.
get
(
GENERATING_BISCANNER_PACKAGE
+
".PeekElementTemplate"
)
.
getMethod
(
"statement"
)
.
getBody
(
)
.
getStatement
(
0
)
;
final
CtClass
<
Object
>
target
=
createBiScanner
(
)
;
for
(
CtTypeMember
tm
:
getFactory
(
)
.
Class
(
)
.
get
(
CtScanner
.
class
)
.
getTypeMembers
(
)
)
{
if
(
!
(
tm
instanceof
CtMethod
)
)
{
continue
;
}
CtMethod
<
?
>
element
=
(
CtMethod
)
tm
;
if
(
!
element
.
getSimpleName
(
)
.
startsWith
(
"visitCt"
)
)
{
continue
;
}
Factory
factory
=
element
.
getFactory
(
)
;
CtMethod
<
?
>
clone
=
factory
.
Core
(
)
.
clone
(
element
)
;
clone
.
addComment
(
getFactory
(
)
.
Code
(
)
.
createComment
(
"autogenerated by "
+
getClass
(
)
.
getSimpleName
(
)
,
CtComment
.
CommentType
.
INLINE
)
)
;
final
CtLocalVariable
<
?
>
peek
=
factory
.
Core
(
)
.
clone
(
peekElement
)
;
final
CtTypeReference
type
=
factory
.
Core
(
)
.
clone
(
clone
.
getParameters
(
)
.
get
(
0
)
.
getType
(
)
)
;
type
.
getActualTypeArguments
(
)
.
clear
(
)
;
peek
.
getDefaultExpression
(
)
.
addTypeCast
(
type
)
;
peek
.
setType
(
type
)
;
clone
.
getBody
(
)
.
insertBegin
(
peek
)
;
for
(
int
i
=
2
;
i
<
clone
.
getBody
(
)
.
getStatements
(
)
.
size
(
)
-
1
;
i
++
)
{
final
CtInvocation
targetInvocation
=
(
CtInvocation
)
(
(
CtInvocation
)
clone
.
getBody
(
)
.
getStatement
(
i
)
)
.
getArguments
(
)
.
get
(
1
)
;
if
(
"getValue"
.
equals
(
targetInvocation
.
getExecutable
(
)
.
getSimpleName
(
)
)
&&
"CtLiteral"
.
equals
(
targetInvocation
.
getExecutable
(
)
.
getDeclaringType
(
)
.
getSimpleName
(
)
)
)
{
clone
.
getBody
(
)
.
getStatement
(
i
--
)
.
delete
(
)
;
continue
;
}
CtInvocation
<
?
>
replace
=
(
CtInvocation
<
?
>
)
clone
.
getBody
(
)
.
getStatement
(
i
)
.
clone
(
)
;
replace
.
getExecutable
(
)
.
setSimpleName
(
"biScan"
)
;
final
CtVariableAccess
<
?
>
otherRead
=
factory
.
Code
(
)
.
createVariableRead
(
peek
.
getReference
(
)
,
false
)
;
replace
.
addArgument
(
factory
.
Code
(
)
.
createInvocation
(
otherRead
,
(
(
CtInvocation
)
replace
.
getArguments
(
)
.
get
(
1
)
)
.
getExecutable
(
)
)
)
;
if
(
"Map"
.
equals
(
targetInvocation
.
getExecutable
(
)
.
getType
(
)
.
getSimpleName
(
)
)
)
{
(
(
CtExpression
)
replace
.
getArguments
(
)
.
get
(
1
)
)
.
replace
(
factory
.
Code
(
)
.
createInvocation
(
targetInvocation
,
factory
.
Executable
(
)
.
createReference
(
"List Map#values()"
)
)
)
;
CtInvocation
invocation
=
factory
.
Code
(
)
.
createInvocation
(
replace
.
getArguments
(
)
.
get
(
2
)
.
clone
(
)
,
factory
.
Executable
(
)
.
createReference
(
"List Map#values()"
)
)
;
replace
.
getArguments
(
)
.
get
(
2
)
.
replace
(
invocation
)
;
}
clone
.
getBody
(
)
.
getStatement
(
i
)
.
replace
(
replace
)
;
}
target
.
addMethod
(
clone
)
;
}
}
