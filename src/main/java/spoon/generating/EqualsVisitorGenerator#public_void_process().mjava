@Override
public
void
process
(
)
{
final
CtClass
<
Object
>
target
=
createEqualsVisitor
(
)
;
new
CtScanner
(
)
{
@Override
public
<
T
>
void
visitCtMethod
(
CtMethod
<
T
>
element
)
{
if
(
!
element
.
getSimpleName
(
)
.
startsWith
(
"visitCt"
)
)
{
return
;
}
Factory
factory
=
element
.
getFactory
(
)
;
CtMethod
<
T
>
clone
=
factory
.
Core
(
)
.
clone
(
element
)
;
final
CtAnnotation
<
?
>
ignoredAnnotation
=
factory
.
Core
(
)
.
createAnnotation
(
)
;
ignoredAnnotation
.
setAnnotationType
(
factory
.
Type
(
)
.
createReference
(
IgnoredByEquals
.
class
)
)
;
for
(
int
i
=
2
;
i
<
clone
.
getBody
(
)
.
getStatements
(
)
.
size
(
)
-
1
;
i
++
)
{
final
CtInvocation
targetInvocation
=
(
CtInvocation
)
(
(
CtInvocation
)
clone
.
getBody
(
)
.
getStatement
(
i
)
)
.
getArguments
(
)
.
get
(
0
)
;
if
(
targetInvocation
.
getExecutable
(
)
.
getExecutableDeclaration
(
)
.
getAnnotations
(
)
.
contains
(
ignoredAnnotation
)
)
{
clone
.
getBody
(
)
.
getStatement
(
i
--
)
.
delete
(
)
;
continue
;
}
CtInvocation
replace
=
(
CtInvocation
)
factory
.
Core
(
)
.
clone
(
clone
.
getBody
(
)
.
getStatement
(
i
)
)
;
clone
.
getBody
(
)
.
getStatement
(
i
)
.
replace
(
replace
)
;
}
target
.
addMethod
(
clone
)
;
}
}
.
scan
(
getFactory
(
)
.
Class
(
)
.
get
(
CtBiScannerDefault
.
class
)
)
;
}
