@Override
public
<
T
>
void
visitCtMethod
(
CtMethod
<
T
>
element
)
{
if
(
!
element
.
getSimpleName
(
)
.
startsWith
(
"visitCt"
)
)
{
return
;
}
Factory
factory
=
element
.
getFactory
(
)
;
CtMethod
<
T
>
clone
=
element
.
clone
(
)
;
factory
.
Annotation
(
)
.
annotate
(
clone
,
Override
.
class
)
;
clone
.
getBody
(
)
.
getStatements
(
)
.
clear
(
)
;
for
(
int
i
=
1
;
i
<
element
.
getBody
(
)
.
getStatements
(
)
.
size
(
)
-
1
;
i
++
)
{
CtInvocation
inv
=
element
.
getBody
(
)
.
getStatement
(
i
)
;
CtInvocation
getter
=
(
CtInvocation
)
inv
.
getArguments
(
)
.
get
(
0
)
;
if
(
clone
.
getComments
(
)
.
size
(
)
==
0
)
{
final
CtComment
comment
=
factory
.
Core
(
)
.
createComment
(
)
;
comment
.
setCommentType
(
CtComment
.
CommentType
.
INLINE
)
;
comment
.
setContent
(
"auto-generated, see "
+
ReplacementVisitorGenerator
.
class
.
getName
(
)
)
;
clone
.
addComment
(
comment
)
;
}
if
(
excludes
.
contains
(
getter
.
getExecutable
(
)
.
toString
(
)
)
)
{
continue
;
}
Class
actualClass
=
getter
.
getType
(
)
.
getActualClass
(
)
;
CtInvocation
<
?
>
invocation
=
createInvocation
(
factory
,
element
,
inv
,
getter
,
actualClass
)
;
clone
.
getBody
(
)
.
addStatement
(
invocation
)
;
}
target
.
addMethod
(
clone
)
;
}
