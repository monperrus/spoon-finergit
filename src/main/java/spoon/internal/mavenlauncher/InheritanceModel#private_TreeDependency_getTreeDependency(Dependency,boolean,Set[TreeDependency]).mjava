private
TreeDependency
getTreeDependency
(
Dependency
dependency
,
boolean
isLib
,
Set
<
TreeDependency
>
hierarchy
)
{
String
groupId
=
extractVariable
(
dependency
.
getGroupId
(
)
)
;
String
artifactId
=
extractVariable
(
dependency
.
getArtifactId
(
)
)
;
String
version
=
extractVersion
(
groupId
,
artifactId
,
dependency
.
getVersion
(
)
)
;
if
(
version
==
null
)
{
Launcher
.
LOGGER
.
warn
(
"A dependency version cannot be resolved: "
+
groupId
+
":"
+
artifactId
+
":"
+
version
)
;
return
null
;
}
if
(
isLib
&&
dependency
.
isOptional
(
)
)
{
return
null
;
}
if
(
"test"
.
equals
(
dependency
.
getScope
(
)
)
&&
(
MavenLauncher
.
SOURCE_TYPE
.
APP_SOURCE
==
sourceType
||
isLib
)
)
{
return
null
;
}
if
(
isLib
&&
(
"test"
.
equals
(
dependency
.
getScope
(
)
)
||
"provided"
.
equals
(
dependency
.
getScope
(
)
)
)
)
{
Launcher
.
LOGGER
.
log
(
Level
.
WARN
,
"Dependency ignored (scope: provided or test):"
+
dependency
.
getGroupId
(
)
+
":"
+
dependency
.
getArtifactId
(
)
+
":"
+
version
)
;
return
null
;
}
TreeDependency
dependence
=
new
TreeDependency
(
groupId
,
artifactId
,
version
,
dependency
.
getType
(
)
,
m2RepositoryPath
)
;
try
{
InheritanceModel
dependencyModel
=
readPom
(
groupId
,
artifactId
,
version
)
;
if
(
dependencyModel
!=
null
)
{
dependence
=
dependencyModel
.
getTreeDependency
(
true
,
hierarchy
)
;
dependence
.
groupId
=
groupId
;
dependence
.
artifactId
=
artifactId
;
dependence
.
version
=
version
;
if
(
dependency
.
getExclusions
(
)
!=
null
)
{
for
(
int
i
=
0
;
i
<
dependency
.
getExclusions
(
)
.
size
(
)
;
i
++
)
{
Exclusion
exclusion
=
dependency
.
getExclusions
(
)
.
get
(
i
)
;
dependence
.
removeDependency
(
exclusion
.
getGroupId
(
)
,
exclusion
.
getArtifactId
(
)
)
;
}
}
}
}
catch
(
Exception
e
)
{
Launcher
.
LOGGER
.
log
(
Level
.
ERROR
,
"Unable to read the pom of the dependency:"
+
dependence
.
toString
(
)
,
e
)
;
}
return
dependence
;
}
