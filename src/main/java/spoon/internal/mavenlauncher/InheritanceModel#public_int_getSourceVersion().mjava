/** 
 * Get the source version of the project
 * @return the source version of the project
 */
public
int
getSourceVersion
(
)
{
if
(
model
.
getBuild
(
)
!=
null
)
{
for
(
Plugin
plugin
:
model
.
getBuild
(
)
.
getPlugins
(
)
)
{
if
(
!
"maven-compiler-plugin"
.
equals
(
plugin
.
getArtifactId
(
)
)
)
{
continue
;
}
Xpp3Dom
configuration
=
(
Xpp3Dom
)
plugin
.
getConfiguration
(
)
;
Xpp3Dom
source
=
configuration
.
getChild
(
"source"
)
;
if
(
source
!=
null
)
{
return
Integer
.
parseInt
(
extractVariable
(
source
.
getValue
(
)
)
.
substring
(
2
)
)
;
}
break
;
}
}
String
javaVersion
=
getProperty
(
"java.version"
)
;
if
(
javaVersion
!=
null
)
{
return
Integer
.
parseInt
(
extractVariable
(
javaVersion
)
.
substring
(
2
)
)
;
}
javaVersion
=
getProperty
(
"java.src.version"
)
;
if
(
javaVersion
!=
null
)
{
return
Integer
.
parseInt
(
extractVariable
(
javaVersion
)
.
substring
(
2
)
)
;
}
javaVersion
=
getProperty
(
"maven.compiler.source"
)
;
if
(
javaVersion
!=
null
)
{
return
Integer
.
parseInt
(
extractVariable
(
javaVersion
)
.
substring
(
2
)
)
;
}
javaVersion
=
getProperty
(
"maven.compile.source"
)
;
if
(
javaVersion
!=
null
)
{
return
Integer
.
parseInt
(
extractVariable
(
javaVersion
)
.
substring
(
2
)
)
;
}
return
environment
.
getComplianceLevel
(
)
;
}
