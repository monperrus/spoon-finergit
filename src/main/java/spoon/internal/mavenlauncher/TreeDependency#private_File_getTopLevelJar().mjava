private
File
getTopLevelJar
(
)
{
if
(
"pom"
.
equals
(
type
)
)
{
return
null
;
}
if
(
groupId
!=
null
&&
version
!=
null
)
{
String
fileName
=
artifactId
+
"-"
+
version
;
Path
depPath
=
Paths
.
get
(
m2RepositoryPath
,
groupId
.
replaceAll
(
"\\."
,
"/"
)
,
artifactId
,
version
)
;
File
depFile
=
depPath
.
toFile
(
)
;
if
(
depFile
.
exists
(
)
)
{
File
jarFile
=
Paths
.
get
(
depPath
.
toString
(
)
,
fileName
+
".jar"
)
.
toFile
(
)
;
if
(
jarFile
.
exists
(
)
)
{
return
jarFile
;
}
else
{
Launcher
.
LOGGER
.
log
(
Level
.
ERROR
,
"Jar not found at "
+
jarFile
)
;
}
}
else
{
String
tmp
=
version
;
int
buildIndex
=
version
.
indexOf
(
"-"
)
;
if
(
buildIndex
!=
-
1
)
{
String
build
=
version
.
substring
(
buildIndex
+
1
)
;
tmp
=
version
.
replace
(
build
,
"SNAPSHOT"
)
;
}
else
{
buildIndex
=
version
.
indexOf
(
"-"
)
;
}
depPath
=
Paths
.
get
(
m2RepositoryPath
,
groupId
.
replaceAll
(
"\\."
,
"/"
)
,
artifactId
,
tmp
)
;
depFile
=
depPath
.
toFile
(
)
;
if
(
depFile
.
exists
(
)
)
{
File
jarFile
=
Paths
.
get
(
depPath
.
toString
(
)
,
fileName
+
".jar"
)
.
toFile
(
)
;
if
(
jarFile
.
exists
(
)
)
{
return
jarFile
;
}
else
{
Launcher
.
LOGGER
.
log
(
Level
.
ERROR
,
"Jar not found at "
+
jarFile
)
;
}
}
else
{
Launcher
.
LOGGER
.
log
(
Level
.
ERROR
,
"Dependency not found at "
+
depPath
)
;
}
}
}
return
null
;
}
