/** 
 * parses the Javadoc content (description + tags) 
 */
public
static
Javadoc
parse
(
String
commentContent
)
{
List
<
String
>
cleanLines
;
cleanLines
=
Arrays
.
asList
(
commentContent
.
split
(
CtComment
.
LINE_SEPARATOR
)
)
;
int
indexOfFirstBlockTag
=
cleanLines
.
stream
(
)
.
filter
(
Javadoc
::
isABlockLine
)
.
map
(
cleanLines
::
indexOf
)
.
findFirst
(
)
.
orElse
(
-
1
)
;
List
<
String
>
blockLines
;
String
descriptionText
;
if
(
indexOfFirstBlockTag
==
-
1
)
{
descriptionText
=
trimRight
(
String
.
join
(
CtComment
.
LINE_SEPARATOR
,
cleanLines
)
)
;
blockLines
=
Collections
.
emptyList
(
)
;
}
else
{
descriptionText
=
trimRight
(
String
.
join
(
CtComment
.
LINE_SEPARATOR
,
cleanLines
.
subList
(
0
,
indexOfFirstBlockTag
)
)
)
;
String
tagBlock
=
cleanLines
.
subList
(
indexOfFirstBlockTag
,
cleanLines
.
size
(
)
)
.
stream
(
)
.
collect
(
Collectors
.
joining
(
CtComment
.
LINE_SEPARATOR
)
)
;
blockLines
=
BLOCK_PATTERN
.
splitAsStream
(
tagBlock
)
.
filter
(
x
->
!
x
.
isEmpty
(
)
)
.
map
(
s
->
BLOCK_TAG_PREFIX
+
s
)
.
collect
(
Collectors
.
toList
(
)
)
;
}
Javadoc
document
=
new
Javadoc
(
parseText
(
descriptionText
)
)
;
blockLines
.
forEach
(
l
->
document
.
addBlockTag
(
parseBlockTag
(
l
)
)
)
;
return
document
;
}
