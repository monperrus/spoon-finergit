/** 
 * @param method
 * @param createIfNotExist
 * @return existing {@link MMMethod}, which overrides `method` or creates and registers new one if `createIfNotExist`==true
 */
MMMethod
addMethod
(
CtMethod
<
?
>
method
,
boolean
createIfNotExist
)
{
for
(
MMMethod
mmMethod
:
roleMethods
)
{
if
(
mmMethod
.
overrides
(
method
)
)
{
mmMethod
.
addRelatedMethod
(
method
)
;
return
mmMethod
;
}
}
if
(
createIfNotExist
)
{
MMMethod
mmMethod
=
new
MMMethod
(
this
,
method
)
;
roleMethods
.
add
(
mmMethod
)
;
getOrCreate
(
methodsByKind
,
mmMethod
.
getKind
(
)
,
(
)
->
new
ArrayList
<
>
(
)
)
.
add
(
mmMethod
)
;
MMMethod
conflict
=
roleMethodsBySignature
.
put
(
mmMethod
.
getSignature
(
)
,
mmMethod
)
;
if
(
conflict
!=
null
)
{
throw
new
SpoonException
(
"Conflict on "
+
getOwner
(
)
.
getName
(
)
+
"."
+
name
+
" method signature: "
+
mmMethod
.
getSignature
(
)
)
;
}
return
mmMethod
;
}
return
null
;
}
