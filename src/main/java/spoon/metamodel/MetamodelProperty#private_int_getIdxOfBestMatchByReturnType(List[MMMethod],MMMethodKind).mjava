private
int
getIdxOfBestMatchByReturnType
(
List
<
MMMethod
>
methods
,
MMMethodKind
key
)
{
if
(
methods
.
size
(
)
>
2
)
{
throw
new
SpoonException
(
"Resolving of more then 2 conflicting getters is not supported. There are: "
+
methods
.
toString
(
)
)
;
}
CtTypeReference
<
?
>
returnType1
=
methods
.
get
(
0
)
.
getActualCtMethod
(
)
.
getType
(
)
;
CtTypeReference
<
?
>
returnType2
=
methods
.
get
(
1
)
.
getActualCtMethod
(
)
.
getType
(
)
;
Factory
f
=
returnType1
.
getFactory
(
)
;
boolean
is1Iterable
=
returnType1
.
isSubtypeOf
(
f
.
Type
(
)
.
ITERABLE
)
;
boolean
is2Iterable
=
returnType2
.
isSubtypeOf
(
f
.
Type
(
)
.
ITERABLE
)
;
if
(
is1Iterable
!=
is2Iterable
)
{
if
(
is1Iterable
)
{
if
(
isIterableOf
(
returnType1
,
returnType2
)
)
{
return
0
;
}
}
else
{
if
(
isIterableOf
(
returnType2
,
returnType1
)
)
{
return
1
;
}
}
}
return
-
1
;
}
