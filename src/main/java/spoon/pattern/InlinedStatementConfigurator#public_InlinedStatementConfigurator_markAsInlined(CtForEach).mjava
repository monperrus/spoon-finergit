/** 
 * marks  {@link CtForEach} as inline statement.
 * @param foreach to be marked {@link CtForEach} element
 * @return this to support fluent API
 */
public
InlinedStatementConfigurator
markAsInlined
(
CtForEach
foreach
)
{
RootNode
vr
=
patternBuilder
.
getPatternNode
(
foreach
.
getExpression
(
)
)
;
if
(
(
vr
instanceof
PrimitiveMatcher
)
==
false
)
{
throw
new
SpoonException
(
"Each inline `for(x : iterable)` statement must have defined pattern parameter for `iterable` expression"
)
;
}
PrimitiveMatcher
parameterOfExpression
=
(
PrimitiveMatcher
)
vr
;
ForEachNode
mvr
=
new
ForEachNode
(
)
;
mvr
.
setIterableParameter
(
parameterOfExpression
)
;
CtLocalVariable
<
?
>
lv
=
foreach
.
getVariable
(
)
;
String
paramName
=
lv
.
getSimpleName
(
)
;
patternBuilder
.
configureLocalParameters
(
pb
->
{
pb
.
parameter
(
paramName
)
.
byVariable
(
lv
)
;
mvr
.
setLocalParameter
(
pb
.
getCurrentParameter
(
)
)
;
}
)
;
mvr
.
setNestedModel
(
patternBuilder
.
getPatternNode
(
foreach
,
CtRole
.
BODY
,
CtRole
.
STATEMENT
)
)
;
patternBuilder
.
setNodeOfElement
(
foreach
,
mvr
,
conflictResolutionMode
)
;
return
this
;
}
