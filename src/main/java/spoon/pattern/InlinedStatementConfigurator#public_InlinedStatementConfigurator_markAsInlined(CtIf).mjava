/** 
 * marks  {@link CtIf} as inline statement.
 * @param ifElement to be marked {@link CtIf} element
 * @return this to support fluent API
 */
public
InlinedStatementConfigurator
markAsInlined
(
CtIf
ifElement
)
{
SwitchNode
osp
=
new
SwitchNode
(
)
;
boolean
[
]
canBeInline
=
{
true
}
;
forEachIfCase
(
ifElement
,
(
expression
,
block
)
->
{
if
(
expression
!=
null
)
{
RootNode
vrOfExpression
=
patternBuilder
.
getPatternNode
(
expression
)
;
if
(
vrOfExpression
instanceof
ParameterNode
==
false
)
{
if
(
failOnMissingParameter
)
{
throw
new
SpoonException
(
"Each inline `if` statement must have defined pattern parameter in expression. If you want to ignore this, then call InlinedStatementConfigurator#setFailOnMissingParameter(false) first."
)
;
}
else
{
canBeInline
[
0
]
=
false
;
return
;
}
}
if
(
vrOfExpression
instanceof
PrimitiveMatcher
)
{
osp
.
addCase
(
(
PrimitiveMatcher
)
vrOfExpression
,
getPatternNode
(
bodyToStatements
(
block
)
)
)
;
}
else
{
throw
new
SpoonException
(
"Inline `if` statement have defined single value pattern parameter in expression. But there is "
+
vrOfExpression
.
getClass
(
)
.
getName
(
)
)
;
}
}
else
{
osp
.
addCase
(
null
,
getPatternNode
(
bodyToStatements
(
block
)
)
)
;
}
}
)
;
if
(
canBeInline
[
0
]
)
{
patternBuilder
.
setNodeOfElement
(
ifElement
,
osp
,
conflictResolutionMode
)
;
}
return
this
;
}
