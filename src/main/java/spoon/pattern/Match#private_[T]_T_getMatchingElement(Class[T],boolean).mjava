/** 
 * @param clazz the Class of returned element. throws SpoonException if matching value is not assignable to `clazz`
 * @param failIfMany if there is more then one matching element and `failIfMany` == true, then it throws SpoonException.
 * @return first matching element
 */
private
<
T
>
T
getMatchingElement
(
Class
<
T
>
clazz
,
boolean
failIfMany
)
{
if
(
matchingElements
.
isEmpty
(
)
)
{
return
null
;
}
if
(
failIfMany
&&
matchingElements
.
size
(
)
!=
1
)
{
throw
new
SpoonException
(
"There is more then one match"
)
;
}
Object
object
=
matchingElements
.
get
(
0
)
;
if
(
object
!=
null
&&
clazz
.
isInstance
(
object
)
==
false
)
{
throw
new
SpoonException
(
"Match contains a "
+
object
.
getClass
(
)
+
" which cannot be cast to "
+
clazz
)
;
}
return
clazz
.
cast
(
object
)
;
}
