static
CtTypeReference
<
?
>
getLocalTypeRefBySimpleName
(
CtType
<
?
>
templateType
,
String
typeSimpleName
)
{
CtType
<
?
>
type
=
templateType
.
getNestedType
(
typeSimpleName
)
;
if
(
type
!=
null
)
{
return
type
.
getReference
(
)
;
}
type
=
templateType
.
getPackage
(
)
.
getType
(
typeSimpleName
)
;
if
(
type
!=
null
)
{
return
type
.
getReference
(
)
;
}
Set
<
String
>
typeQNames
=
new
HashSet
<
>
(
)
;
templateType
.
filterChildren
(
(
CtTypeReference
<
?
>
ref
)
->
typeSimpleName
.
equals
(
ref
.
getSimpleName
(
)
)
)
.
forEach
(
(
CtTypeReference
<
?
>
ref
)
->
typeQNames
.
add
(
ref
.
getQualifiedName
(
)
)
)
;
if
(
typeQNames
.
size
(
)
>
1
)
{
throw
new
SpoonException
(
"The type parameter "
+
typeSimpleName
+
" is ambiguous. It matches multiple types: "
+
typeQNames
)
;
}
if
(
typeQNames
.
size
(
)
==
1
)
{
return
templateType
.
getFactory
(
)
.
Type
(
)
.
createReference
(
typeQNames
.
iterator
(
)
.
next
(
)
)
;
}
return
null
;
}
