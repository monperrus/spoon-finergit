/** 
 * Sets a template model from return expression of the method of template type selected by filter
 * @param filter the {@link Filter} whose match defines to be used {@link CtExecutable}
 */
private
void
setReturnExpressionOfMethod
(
Filter
<
CtMethod
<
?
>
>
filter
)
{
CtMethod
<
?
>
method
=
getOneByFilter
(
filter
)
;
CtBlock
<
?
>
body
=
method
.
getBody
(
)
;
if
(
body
.
getStatements
(
)
.
size
(
)
!=
1
)
{
throw
new
SpoonException
(
"The body of "
+
method
.
getSignature
(
)
+
" must contain exactly one statement. But there is:\n"
+
body
.
toString
(
)
)
;
}
CtStatement
firstStatement
=
body
.
getStatements
(
)
.
get
(
0
)
;
if
(
firstStatement
instanceof
CtReturn
<
?
>
==
false
)
{
throw
new
SpoonException
(
"The body of "
+
method
.
getSignature
(
)
+
" must contain return statement. But there is:\n"
+
body
.
toString
(
)
)
;
}
setElements
(
Collections
.
singletonList
(
(
(
CtReturn
<
?
>
)
firstStatement
)
.
getReturnedExpression
(
)
)
)
;
}
