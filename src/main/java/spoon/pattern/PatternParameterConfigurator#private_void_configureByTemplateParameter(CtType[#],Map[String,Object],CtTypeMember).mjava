private
void
configureByTemplateParameter
(
CtType
<
?
>
templateType
,
Map
<
String
,
Object
>
parameterValues
,
CtTypeMember
typeMember
)
{
Factory
f
=
typeMember
.
getFactory
(
)
;
CtTypeReference
<
CtTypeReference
>
typeReferenceRef
=
f
.
Type
(
)
.
createReference
(
CtTypeReference
.
class
)
;
CtTypeReference
<
CtStatement
>
ctStatementRef
=
f
.
Type
(
)
.
createReference
(
CtStatement
.
class
)
;
CtTypeReference
<
TemplateParameter
>
templateParamRef
=
f
.
Type
(
)
.
createReference
(
TemplateParameter
.
class
)
;
Parameter
param
=
typeMember
.
getAnnotation
(
Parameter
.
class
)
;
if
(
param
!=
null
)
{
if
(
typeMember
instanceof
CtField
)
{
CtField
<
?
>
paramField
=
(
CtField
<
?
>
)
typeMember
;
String
fieldName
=
typeMember
.
getSimpleName
(
)
;
String
stringMarker
=
(
param
.
value
(
)
!=
null
&&
!
param
.
value
(
)
.
isEmpty
(
)
)
?
param
.
value
(
)
:
fieldName
;
String
parameterName
=
stringMarker
;
CtTypeReference
<
?
>
paramType
=
paramField
.
getType
(
)
;
if
(
paramType
.
isSubtypeOf
(
f
.
Type
(
)
.
ITERABLE
)
||
paramType
instanceof
CtArrayTypeReference
<
?
>
)
{
parameter
(
parameterName
)
.
setContainerKind
(
ContainerKind
.
LIST
)
.
byNamedElement
(
stringMarker
)
.
byReferenceName
(
stringMarker
)
;
}
else
if
(
paramType
.
isSubtypeOf
(
typeReferenceRef
)
||
paramType
.
getQualifiedName
(
)
.
equals
(
Class
.
class
.
getName
(
)
)
)
{
String
nestedType
=
getLocalTypeRefBySimpleName
(
templateType
,
stringMarker
)
;
if
(
nestedType
!=
null
)
{
parameter
(
parameterName
)
.
byType
(
nestedType
)
;
}
parameter
(
parameterName
)
.
byVariable
(
paramField
)
;
}
else
if
(
paramType
.
getQualifiedName
(
)
.
equals
(
String
.
class
.
getName
(
)
)
)
{
String
nestedType
=
getLocalTypeRefBySimpleName
(
templateType
,
stringMarker
)
;
if
(
nestedType
!=
null
)
{
parameter
(
parameterName
)
.
byType
(
nestedType
)
;
}
}
else
if
(
paramType
.
isSubtypeOf
(
templateParamRef
)
)
{
parameter
(
parameterName
)
.
byTemplateParameterReference
(
paramField
)
;
templateType
.
getMethodsByName
(
stringMarker
)
.
forEach
(
m
->
{
parameter
(
parameterName
)
.
byInvocation
(
m
)
;
}
)
;
}
else
if
(
paramType
.
isSubtypeOf
(
ctStatementRef
)
)
{
templateType
.
getMethodsByName
(
stringMarker
)
.
forEach
(
m
->
{
parameter
(
parameterName
)
.
setContainerKind
(
ContainerKind
.
LIST
)
.
byInvocation
(
m
)
;
}
)
;
}
else
{
parameter
(
parameterName
)
.
byVariable
(
paramField
)
;
}
if
(
paramType
.
getQualifiedName
(
)
.
equals
(
Object
.
class
.
getName
(
)
)
&&
parameterValues
!=
null
)
{
Object
value
=
parameterValues
.
get
(
parameterName
)
;
if
(
value
instanceof
CtLiteral
||
value
instanceof
CtTypeReference
)
{
ParameterInfo
pi
=
parameter
(
parameterName
)
.
getCurrentParameter
(
)
;
queryModel
(
)
.
filterChildren
(
(
CtInvocation
<
?
>
inv
)
->
{
return
inv
.
getExecutable
(
)
.
getSimpleName
(
)
.
equals
(
stringMarker
)
;
}
)
.
forEach
(
(
CtInvocation
<
?
>
inv
)
->
{
addSubstitutionRequest
(
pi
,
inv
)
;
}
)
;
}
}
parameter
(
parameterName
)
.
setConflictResolutionMode
(
ConflictResolutionMode
.
KEEP_OLD_NODE
)
.
bySubstring
(
stringMarker
)
;
if
(
parameterValues
!=
null
)
{
addInlineStatements
(
fieldName
,
parameterValues
.
get
(
parameterName
)
)
;
}
}
else
{
throw
new
SpoonException
(
"Template Parameter annotation on "
+
typeMember
.
getClass
(
)
.
getName
(
)
+
" is not supported"
)
;
}
}
else
if
(
typeMember
instanceof
CtField
<
?
>
&&
(
(
CtField
<
?
>
)
typeMember
)
.
getType
(
)
.
isSubtypeOf
(
templateParamRef
)
)
{
CtField
<
?
>
field
=
(
CtField
<
?
>
)
typeMember
;
String
parameterName
=
typeMember
.
getSimpleName
(
)
;
Object
value
=
parameterValues
==
null
?
null
:
parameterValues
.
get
(
parameterName
)
;
Class
valueType
=
null
;
boolean
multiple
=
false
;
if
(
value
!=
null
)
{
valueType
=
value
.
getClass
(
)
;
if
(
value
instanceof
CtBlock
)
{
multiple
=
true
;
}
}
parameter
(
parameterName
)
.
setValueType
(
valueType
)
.
setContainerKind
(
multiple
?
ContainerKind
.
LIST
:
ContainerKind
.
SINGLE
)
.
byTemplateParameterReference
(
field
)
;
if
(
parameterValues
!=
null
)
{
addInlineStatements
(
parameterName
,
parameterValues
.
get
(
parameterName
)
)
;
}
}
}
