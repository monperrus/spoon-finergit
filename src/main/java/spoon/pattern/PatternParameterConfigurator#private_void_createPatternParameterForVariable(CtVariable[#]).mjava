/** 
 * Add parameters for each variable reference of `variable`
 * @param variable to be substituted variable
 * @return this to support fluent API
 */
private
void
createPatternParameterForVariable
(
CtVariable
<
?
>
variable
)
{
CtQueryable
searchScope
;
if
(
patternBuilder
.
isInModel
(
variable
)
)
{
addSubstitutionRequest
(
parameter
(
variable
.
getSimpleName
(
)
)
.
getCurrentParameter
(
)
,
variable
)
;
searchScope
=
variable
;
}
else
{
searchScope
=
queryModel
(
)
;
}
searchScope
.
map
(
new
VariableReferenceFunction
(
variable
)
)
.
forEach
(
(
CtVariableReference
<
?
>
varRef
)
->
{
CtFieldRead
<
?
>
fieldRead
=
varRef
.
getParent
(
CtFieldRead
.
class
)
;
if
(
fieldRead
!=
null
)
{
addSubstitutionRequest
(
parameter
(
fieldRead
.
getVariable
(
)
.
getSimpleName
(
)
)
.
getCurrentParameter
(
)
,
fieldRead
)
;
}
else
{
addSubstitutionRequest
(
parameter
(
varRef
.
getSimpleName
(
)
)
.
getCurrentParameter
(
)
,
varRef
)
;
}
}
)
;
}
