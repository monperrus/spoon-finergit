/** 
 * Add parameters for each field reference to variable named `variableName` For example this pattern model class Params { int paramA; int paramB; } void matcher(Params p) { return p.paramA + p.paramB; } called with `byFieldRefOfVariable("p")` will create pattern parameters: `paramA` and `paramB`
 * @param varName the name of the variable reference
 * @return {@link PatternParameterConfigurator} to support fluent API
 */
public
PatternParameterConfigurator
byFieldAccessOnVariable
(
String
varName
)
{
CtVariable
<
?
>
var
=
queryModel
(
)
.
map
(
new
PotentialVariableDeclarationFunction
(
varName
)
)
.
first
(
)
;
if
(
var
!=
null
)
{
createPatternParameterForVariable
(
var
)
;
}
else
{
List
<
CtVariable
<
?
>
>
vars
=
queryModel
(
)
.
filterChildren
(
new
NamedElementFilter
(
CtVariable
.
class
,
varName
)
)
.
list
(
)
;
if
(
vars
.
size
(
)
>
1
)
{
throw
new
SpoonException
(
"Ambiguous variable "
+
varName
)
;
}
else
if
(
vars
.
size
(
)
==
1
)
{
createPatternParameterForVariable
(
vars
.
get
(
0
)
)
;
}
}
return
this
;
}
