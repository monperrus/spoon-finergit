/** 
 * All spoon model string attributes whose value is equal to `stringMarker` are subject for substitution by current parameter
 * @param stringMarker a string value which has to be substituted
 * @return {@link PatternParameterConfigurator} to support fluent API
 */
public
PatternParameterConfigurator
byString
(
String
stringMarker
)
{
ParameterInfo
pi
=
getCurrentParameter
(
)
;
new
StringAttributeScanner
(
)
{
@Override
protected
void
visitStringAttribute
(
RoleHandler
roleHandler
,
CtElement
element
,
String
value
)
{
if
(
stringMarker
.
equals
(
value
)
)
{
addSubstitutionRequest
(
pi
,
element
,
roleHandler
.
getRole
(
)
)
;
}
}
protected
void
visitStringAttribute
(
RoleHandler
roleHandler
,
CtElement
element
,
String
mapEntryKey
,
CtElement
mapEntryValue
)
{
if
(
stringMarker
.
equals
(
mapEntryKey
)
)
{
patternBuilder
.
modifyNodeOfAttributeOfElement
(
element
,
roleHandler
.
getRole
(
)
,
conflictResolutionMode
,
oldAttrNode
->
{
if
(
oldAttrNode
instanceof
MapEntryNode
)
{
MapEntryNode
mapEntryNode
=
(
MapEntryNode
)
oldAttrNode
;
return
new
MapEntryNode
(
new
ParameterNode
(
pi
)
,
(
(
MapEntryNode
)
oldAttrNode
)
.
getValue
(
)
)
;
}
return
oldAttrNode
;
}
)
;
}
}
}
.
scan
(
patternBuilder
.
getPatternModel
(
)
)
;
return
this
;
}
