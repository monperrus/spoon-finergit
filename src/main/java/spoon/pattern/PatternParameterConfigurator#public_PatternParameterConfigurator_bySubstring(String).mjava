/** 
 * All spoon model string attributes whose value contains whole string or a substring equal to `stringMarker` are subject for substitution by current parameter. Only the `stringMarker` substring of the string value is substituted!
 * @param stringMarker a string value which has to be substituted
 * @return {@link PatternParameterConfigurator} to support fluent API
 */
public
PatternParameterConfigurator
bySubstring
(
String
stringMarker
)
{
ParameterInfo
pi
=
getCurrentParameter
(
)
;
new
StringAttributeScanner
(
)
{
@Override
protected
void
visitStringAttribute
(
RoleHandler
roleHandler
,
CtElement
element
,
String
value
)
{
if
(
value
!=
null
&&
value
.
indexOf
(
stringMarker
)
>=
0
)
{
addSubstitutionRequest
(
pi
,
element
,
roleHandler
.
getRole
(
)
,
stringMarker
)
;
}
}
protected
void
visitStringAttribute
(
RoleHandler
roleHandler
,
CtElement
element
,
String
mapEntryKey
,
CtElement
mapEntryValue
)
{
if
(
mapEntryKey
!=
null
&&
mapEntryKey
.
indexOf
(
stringMarker
)
>=
0
)
{
patternBuilder
.
modifyNodeOfAttributeOfElement
(
element
,
roleHandler
.
getRole
(
)
,
conflictResolutionMode
,
oldAttrNode
->
{
List
<
RootNode
>
nodes
=
(
(
ListOfNodes
)
oldAttrNode
)
.
getNodes
(
)
;
for
(
int
i
=
0
;
i
<
nodes
.
size
(
)
;
i
++
)
{
RootNode
node
=
nodes
.
get
(
i
)
;
if
(
node
instanceof
MapEntryNode
)
{
MapEntryNode
mapEntryNode
=
(
MapEntryNode
)
node
;
nodes
.
set
(
i
,
new
MapEntryNode
(
StringNode
.
setReplaceMarker
(
mapEntryNode
.
getKey
(
)
,
stringMarker
,
pi
)
,
mapEntryNode
.
getValue
(
)
)
)
;
}
}
return
oldAttrNode
;
}
)
;
}
}
}
.
scan
(
patternBuilder
.
getPatternModel
(
)
)
;
return
this
;
}
