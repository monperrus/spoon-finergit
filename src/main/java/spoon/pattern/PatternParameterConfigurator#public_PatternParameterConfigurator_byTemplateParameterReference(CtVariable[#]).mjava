/** 
 * variable read/write of `variable` of type  {@link TemplateParameter}
 * @param variable a variable whose references will be substituted
 * @return {@link PatternParameterConfigurator} to support fluent API
 */
public
PatternParameterConfigurator
byTemplateParameterReference
(
CtVariable
<
?
>
variable
)
{
ParameterInfo
pi
=
getCurrentParameter
(
)
;
queryModel
(
)
.
map
(
new
VariableReferenceFunction
(
variable
)
)
.
forEach
(
(
CtVariableReference
<
?
>
varRef
)
->
{
CtVariableAccess
<
?
>
varAccess
=
(
CtVariableAccess
<
?
>
)
varRef
.
getParent
(
)
;
CtElement
invocationOfS
=
varAccess
.
getParent
(
)
;
if
(
invocationOfS
instanceof
CtInvocation
<
?
>
)
{
CtInvocation
<
?
>
invocation
=
(
CtInvocation
<
?
>
)
invocationOfS
;
if
(
"S"
.
equals
(
invocation
.
getExecutable
(
)
.
getSimpleName
(
)
)
)
{
addSubstitutionRequest
(
pi
,
invocation
)
;
return
;
}
}
throw
new
SpoonException
(
"TemplateParameter reference is NOT used as target of invocation of TemplateParameter#S()"
)
;
}
)
;
return
this
;
}
