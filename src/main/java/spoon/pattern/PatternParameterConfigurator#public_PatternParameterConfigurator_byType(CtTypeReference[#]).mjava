/** 
 * type referred by  {@link CtTypeReference} `type` and all the references (with same actual type arguments)to that type are subject for substitution by current parameter
 * @param type a fully qualified name of to be substituted Class
 * @return {@link PatternParameterConfigurator} to support fluent API
 */
public
PatternParameterConfigurator
byType
(
CtTypeReference
<
?
>
type
)
{
ParameterInfo
pi
=
getCurrentParameter
(
)
;
queryModel
(
)
.
filterChildren
(
(
CtTypeReference
<
?
>
typeRef
)
->
typeRef
.
equals
(
type
)
)
.
forEach
(
(
CtTypeReference
<
?
>
typeRef
)
->
{
addSubstitutionRequest
(
pi
,
typeRef
)
;
}
)
;
String
typeQName
=
type
.
getQualifiedName
(
)
;
CtType
<
?
>
type2
=
queryModel
(
)
.
filterChildren
(
(
CtType
<
?
>
t
)
->
t
.
getQualifiedName
(
)
.
equals
(
typeQName
)
)
.
first
(
)
;
if
(
type2
!=
null
)
{
ComputedParameterInfo
piName
=
new
ComputedParameterInfo
(
SimpleNameOfTypeReferenceParameterComputer
.
INSTANCE
,
pi
)
;
piName
.
setParameterValueType
(
String
.
class
)
;
addSubstitutionRequest
(
piName
,
type2
,
CtRole
.
NAME
)
;
}
return
this
;
}
