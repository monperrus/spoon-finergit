/** 
 * type identified by `typeQualifiedName` itself and all the references (with arbitrary actual type arguments) to that type are subject for substitution by current parameter
 * @param typeQualifiedName a fully qualified name of to be substituted Class
 * @return {@link PatternParameterConfigurator} to support fluent API
 */
public
PatternParameterConfigurator
byType
(
String
typeQualifiedName
)
{
ParameterInfo
pi
=
getCurrentParameter
(
)
;
queryModel
(
)
.
filterChildren
(
(
CtTypeReference
<
?
>
typeRef
)
->
typeRef
.
getQualifiedName
(
)
.
equals
(
typeQualifiedName
)
)
.
forEach
(
(
CtTypeReference
<
?
>
typeRef
)
->
{
addSubstitutionRequest
(
pi
,
typeRef
)
;
}
)
;
CtType
<
?
>
type2
=
queryModel
(
)
.
filterChildren
(
(
CtType
<
?
>
t
)
->
t
.
getQualifiedName
(
)
.
equals
(
typeQualifiedName
)
)
.
first
(
)
;
if
(
type2
!=
null
)
{
addSubstitutionRequest
(
pi
,
type2
,
CtRole
.
NAME
)
;
}
return
this
;
}
