/** 
 * Generates type in the package `ownerPackage` with simple name `typeSimpleName` using this  {@link GeneratorImpl} and provided `params`Note: the root of pattern element must be one or more types.
 * @param ownerPackage the target package
 * @param typeSimpleName the simple name of future generated type
 * @param params the pattern parameters
 * @return the generated type
 */
@SuppressWarnings("unchecked")
private
<
T
extends
CtType
<
?
>
>
T
createType
(
CtPackage
ownerPackage
,
String
typeSimpleName
,
Map
<
String
,
Object
>
params
)
{
@SuppressWarnings({"rawtypes"})
List
<
CtType
>
types
=
generate
(
CtType
.
class
,
new
ImmutableMapImpl
(
params
,
PatternBuilder
.
TARGET_TYPE
,
ownerPackage
.
getFactory
(
)
.
Type
(
)
.
createReference
(
getQualifiedName
(
ownerPackage
,
typeSimpleName
)
)
)
)
;
T
result
=
null
;
for
(
CtType
<
?
>
type
:
types
)
{
ownerPackage
.
addType
(
type
)
;
if
(
type
.
getSimpleName
(
)
.
equals
(
typeSimpleName
)
)
{
result
=
(
T
)
type
;
}
}
return
result
;
}
