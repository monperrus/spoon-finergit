/** 
 * Generates zero, one or more target depending on kind of this  {@link RootNode}, expected `result` and input `parameters`
 * @param node to be generated node
 * @param result the holder which receives the generated node
 * @param parameters the input parameters
 */
public
<
T
>
void
generateTargets
(
RootNode
node
,
ResultHolder
<
T
>
result
,
ImmutableMap
parameters
)
{
node
.
generateTargets
(
this
,
result
,
parameters
)
;
if
(
node
.
isSimplifyGenerated
(
)
)
{
result
.
mapEachResult
(
element
->
{
if
(
element
instanceof
CtCodeElement
)
{
CtCodeElement
code
=
(
CtCodeElement
)
element
;
try
{
code
=
code
.
partiallyEvaluate
(
)
;
if
(
result
.
getRequiredClass
(
)
.
isInstance
(
code
)
)
{
return
(
T
)
code
;
}
}
catch
(
SpoonClassNotFoundException
e
)
{
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"Partial evaluation was skipped because of: "
+
e
.
getMessage
(
)
)
;
}
}
return
element
;
}
)
;
}
}
