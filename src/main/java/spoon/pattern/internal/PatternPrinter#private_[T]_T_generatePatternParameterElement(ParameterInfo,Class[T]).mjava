/** 
 * Creates a element which will be printed in source code of pattern as marker of parameter
 * @param factory a SpoonFactory which has to be used to create new elements
 * @param potentialParameterMarker
 * @param type
 * @return dummy template element, which represents a template type in source of generated Pattern.Or null if potentialParameterMarker is not a marker of parameter
 */
private
<
T
>
T
generatePatternParameterElement
(
ParameterInfo
parameterInfo
,
Class
<
T
>
type
)
{
if
(
type
!=
null
)
{
if
(
type
.
isAssignableFrom
(
CtInvocation
.
class
)
)
{
return
(
T
)
factory
.
createInvocation
(
factory
.
createThisAccess
(
factory
.
Type
(
)
.
objectType
(
)
,
true
)
,
factory
.
createExecutableReference
(
)
.
setSimpleName
(
parameterInfo
.
getName
(
)
)
)
;
}
if
(
type
.
isAssignableFrom
(
CtLocalVariable
.
class
)
)
{
return
(
T
)
factory
.
createLocalVariable
(
factory
.
Type
(
)
.
objectType
(
)
,
parameterInfo
.
getName
(
)
,
null
)
;
}
if
(
type
.
isAssignableFrom
(
String
.
class
)
)
{
return
(
T
)
parameterInfo
.
getName
(
)
;
}
}
return
null
;
}
