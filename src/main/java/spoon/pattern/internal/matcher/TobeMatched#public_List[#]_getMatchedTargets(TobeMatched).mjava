/** 
 * @param tobeMatchedTargets {@link TobeMatched} with targets, which didn't matched yet. These which has to be matched next.
 * @return matched targets. It means these targets, which are not contained in `notMatchedTargets`
 */
public
List
<
?
>
getMatchedTargets
(
TobeMatched
tobeMatchedTargets
)
{
int
nrOfMatches
=
getTargets
(
)
.
size
(
)
-
tobeMatchedTargets
.
getTargets
(
)
.
size
(
)
;
if
(
nrOfMatches
>=
0
)
{
if
(
nrOfMatches
==
0
)
{
return
Collections
.
emptyList
(
)
;
}
List
<
Object
>
matched
=
new
ArrayList
(
nrOfMatches
)
;
for
(
Object
target
:
getTargets
(
)
)
{
if
(
containsSame
(
tobeMatchedTargets
.
getTargets
(
)
,
target
)
)
{
continue
;
}
matched
.
add
(
target
)
;
}
if
(
matched
.
size
(
)
==
nrOfMatches
)
{
return
matched
;
}
}
throw
new
SpoonException
(
"Invalid input `originTobeMatched`"
)
;
}
