/** 
 * Calls matcher algorithm to match target item
 * @param matcher a matching algorithm
 * @return {@link TobeMatched} with List of remaining (to be matched) targets or null if there is no match
 */
public
TobeMatched
matchNext
(
BiFunction
<
Object
,
ImmutableMap
,
ImmutableMap
>
matcher
)
{
if
(
targets
.
isEmpty
(
)
)
{
return
null
;
}
if
(
ordered
)
{
ImmutableMap
parameters
=
matcher
.
apply
(
targets
.
get
(
0
)
,
getParameters
(
)
)
;
if
(
parameters
!=
null
)
{
return
removeTarget
(
parameters
,
0
)
;
}
return
null
;
}
else
{
int
idxOfMatch
=
0
;
while
(
idxOfMatch
<
targets
.
size
(
)
)
{
ImmutableMap
parameters
=
matcher
.
apply
(
targets
.
get
(
idxOfMatch
)
,
getParameters
(
)
)
;
if
(
parameters
!=
null
)
{
return
removeTarget
(
parameters
,
idxOfMatch
)
;
}
idxOfMatch
++
;
}
return
null
;
}
}
