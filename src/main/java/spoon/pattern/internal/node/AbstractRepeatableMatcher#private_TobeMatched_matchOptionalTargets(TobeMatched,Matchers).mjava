private
TobeMatched
matchOptionalTargets
(
TobeMatched
targets
,
Matchers
next
)
{
if
(
isTryNextMatch
(
targets
.
getParameters
(
)
)
==
false
)
{
return
next
.
matchAllWith
(
targets
)
;
}
switch
(
getMatchingStrategy
(
)
)
{
case
GREEDY
:
{
{
TobeMatched
match
=
matchAllWith
(
targets
)
;
if
(
match
!=
null
)
{
match
=
matchOptionalTargets
(
match
,
next
)
;
if
(
match
!=
null
)
{
return
match
;
}
}
}
return
next
.
matchAllWith
(
targets
)
;
}
case
RELUCTANT
:
{
{
TobeMatched
match
=
next
.
matchAllWith
(
targets
)
;
if
(
match
!=
null
)
{
return
match
;
}
}
TobeMatched
match
=
matchAllWith
(
targets
)
;
if
(
match
==
null
)
{
return
null
;
}
return
matchOptionalTargets
(
match
,
next
)
;
}
case
POSSESSIVE
:
while
(
isTryNextMatch
(
targets
.
getParameters
(
)
)
)
{
TobeMatched
tmp
=
matchAllWith
(
targets
)
;
if
(
tmp
==
null
)
{
if
(
isMandatory
(
targets
.
getParameters
(
)
)
)
{
return
null
;
}
break
;
}
targets
=
tmp
;
}
return
next
.
matchAllWith
(
targets
)
;
}
throw
new
SpoonException
(
"Unsupported quantifier "
+
getMatchingStrategy
(
)
)
;
}
