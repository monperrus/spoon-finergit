/** 
 * Creates an implicit  {@link ElementNode}, which contains all non derived attributes of `element` and all it's children
 * @param element source element, which is used to initialize {@link ElementNode}
 * @param patternElementToSubstRequests the {@link Map}, which will receive mapping between `element` and it's children and newly created tree of  {@link ElementNode}s
 * @return a tree of {@link ElementNode}s, which reflects tree of `element`
 */
public
static
ElementNode
create
(
CtElement
element
,
Map
<
CtElement
,
RootNode
>
patternElementToSubstRequests
)
{
MetamodelConcept
mmConcept
=
Metamodel
.
getInstance
(
)
.
getConcept
(
element
.
getClass
(
)
)
;
ElementNode
elementNode
=
new
ElementNode
(
mmConcept
,
element
)
;
if
(
patternElementToSubstRequests
.
put
(
element
,
elementNode
)
!=
null
)
{
throw
new
SpoonException
(
"Each pattern element can have only one implicit Node."
)
;
}
for
(
MetamodelProperty
mmField
:
mmConcept
.
getProperties
(
)
)
{
if
(
mmField
.
isDerived
(
)
)
{
continue
;
}
elementNode
.
setNodeOfRole
(
mmField
.
getRole
(
)
,
create
(
mmField
.
getContainerKind
(
)
,
mmField
.
getValue
(
element
)
,
patternElementToSubstRequests
)
)
;
}
return
elementNode
;
}
