/** 
 * Same like  {@link #create(CtElement,Map)} but with {@link Map} of String to elements or primitive objects
 * @param map Map of objects which has to be transformed to nodes
 * @param patternElementToSubstRequests mapping between {@link CtElement} from `map` to created `node`
 * @return a list of {@link MapEntryNode}s, which reflects `map`
 */
public
static
ListOfNodes
create
(
Map
<
String
,
?
>
map
,
Map
<
CtElement
,
RootNode
>
patternElementToSubstRequests
)
{
if
(
map
==
null
)
{
map
=
Collections
.
emptyMap
(
)
;
}
List
<
MapEntryNode
>
constantMatchers
=
new
ArrayList
<
>
(
map
.
size
(
)
)
;
List
<
MapEntryNode
>
variableMatchers
=
new
ArrayList
<
>
(
)
;
Matchers
last
=
null
;
for
(
Map
.
Entry
<
?
,
?
>
entry
:
map
.
entrySet
(
)
)
{
MapEntryNode
mem
=
new
MapEntryNode
(
create
(
entry
.
getKey
(
)
,
patternElementToSubstRequests
)
,
create
(
entry
.
getValue
(
)
,
patternElementToSubstRequests
)
)
;
if
(
mem
.
getKey
(
)
==
entry
.
getKey
(
)
)
{
constantMatchers
.
add
(
mem
)
;
}
else
{
variableMatchers
.
add
(
mem
)
;
}
}
constantMatchers
.
addAll
(
variableMatchers
)
;
return
listOfNodesToNode
(
constantMatchers
)
;
}
