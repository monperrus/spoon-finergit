/** 
 * Same like  {@link #create(CtElement,Map)} but with {@link Set} of elements or primitive objects
 * @param templates Set of objects which has to be transformed to nodes
 * @param patternElementToSubstRequests mapping between {@link CtElement} from `templates` to created `node`
 * @return a list of trees of nodes, which reflects Set of `templates`
 */
public
static
ListOfNodes
create
(
Set
<
?
>
templates
,
Map
<
CtElement
,
RootNode
>
patternElementToSubstRequests
)
{
if
(
templates
==
null
)
{
templates
=
Collections
.
emptySet
(
)
;
}
List
<
RootNode
>
constantMatchers
=
new
ArrayList
<
>
(
templates
.
size
(
)
)
;
List
<
RootNode
>
variableMatchers
=
new
ArrayList
<
>
(
)
;
for
(
Object
template
:
templates
)
{
RootNode
matcher
=
create
(
template
,
patternElementToSubstRequests
)
;
if
(
matcher
instanceof
ElementNode
)
{
constantMatchers
.
add
(
matcher
)
;
}
else
{
variableMatchers
.
add
(
matcher
)
;
}
}
constantMatchers
.
addAll
(
variableMatchers
)
;
return
listOfNodesToNode
(
constantMatchers
)
;
}
