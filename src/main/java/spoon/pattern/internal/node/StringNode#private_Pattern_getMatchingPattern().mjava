private
synchronized
Pattern
getMatchingPattern
(
)
{
if
(
regExpPattern
==
null
)
{
List
<
Region
>
regions
=
getRegions
(
)
;
StringBuilder
re
=
new
StringBuilder
(
)
;
List
<
ParameterInfo
>
paramsByRegions
=
new
ArrayList
<
>
(
)
;
int
start
=
0
;
for
(
Region
region
:
regions
)
{
if
(
region
.
from
>
start
)
{
re
.
append
(
escapeRegExp
(
getStringValueWithMarkers
(
)
.
substring
(
start
,
region
.
from
)
)
)
;
}
else
if
(
start
>
0
)
{
throw
new
SpoonException
(
"Cannot detect string parts if parameter separators are missing in pattern value: "
+
getStringValueWithMarkers
(
)
)
;
}
re
.
append
(
"("
)
.
append
(
".*?"
)
.
append
(
")"
)
;
paramsByRegions
.
add
(
region
.
param
)
;
start
=
region
.
to
;
}
if
(
start
<
getStringValueWithMarkers
(
)
.
length
(
)
)
{
re
.
append
(
escapeRegExp
(
getStringValueWithMarkers
(
)
.
substring
(
start
)
)
)
;
}
regExpPattern
=
Pattern
.
compile
(
re
.
toString
(
)
)
;
params
=
paramsByRegions
.
toArray
(
new
ParameterInfo
[
]
)
;
}
return
regExpPattern
;
}
