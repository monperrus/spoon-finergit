final
public
void
process
(
)
{
Element
root
=
document
.
getDocumentElement
(
)
;
NodeList
nodeList
=
root
.
getElementsByTagName
(
"class"
)
;
int
len
=
nodeList
.
getLength
(
)
;
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
Element
clazz
=
(
Element
)
nodeList
.
item
(
i
)
;
String
nameExpr
=
clazz
.
getAttribute
(
"expr"
)
;
for
(
CtType
<
?
>
t
:
getFactory
(
)
.
Type
(
)
.
getAll
(
true
)
)
{
if
(
!
isTypeMatching
(
t
,
nameExpr
)
)
continue
;
try
{
annotateElement
(
t
,
clazz
)
;
}
catch
(
Exception
e
)
{
Launcher
.
logger
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
NodeList
nodeList3
=
clazz
.
getElementsByTagName
(
"field"
)
;
for
(
int
j
=
0
;
j
<
nodeList3
.
getLength
(
)
;
j
++
)
{
Element
fieldElt
=
(
Element
)
nodeList3
.
item
(
j
)
;
if
(
fieldElt
.
getParentNode
(
)
!=
clazz
)
continue
;
String
fieldExpr
=
fieldElt
.
getAttribute
(
"expr"
)
;
for
(
CtField
<
?
>
field
:
t
.
getFields
(
)
)
{
if
(
!
isFieldMatching
(
field
,
fieldExpr
)
)
continue
;
try
{
annotateElement
(
field
,
fieldElt
)
;
}
catch
(
Exception
e
)
{
Launcher
.
logger
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
}
}
if
(
!
(
t
instanceof
CtType
)
)
continue
;
List
<
CtExecutable
<
?
>
>
executables
=
new
ArrayList
<
CtExecutable
<
?
>
>
(
)
;
executables
.
addAll
(
(
(
CtType
<
?
>
)
t
)
.
getMethods
(
)
)
;
if
(
t
instanceof
CtClass
)
{
executables
.
addAll
(
(
(
CtClass
<
?
>
)
t
)
.
getConstructors
(
)
)
;
}
NodeList
nodeList2
=
clazz
.
getElementsByTagName
(
"executable"
)
;
for
(
int
j
=
0
;
j
<
nodeList2
.
getLength
(
)
;
j
++
)
{
Element
executableElt
=
(
Element
)
nodeList2
.
item
(
j
)
;
if
(
executableElt
.
getParentNode
(
)
!=
clazz
)
continue
;
String
executableExpr
=
executableElt
.
getAttribute
(
"expr"
)
;
for
(
CtExecutable
<
?
>
executable
:
executables
)
{
if
(
!
isExecutableMatching
(
executable
,
executableExpr
)
)
continue
;
try
{
annotateElement
(
executable
,
executableElt
)
;
}
catch
(
Exception
e
)
{
Launcher
.
logger
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
}
}
}
}
}
