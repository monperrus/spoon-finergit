private
void
doRefactor
(
Launcher
spoon
)
{
MethodInvocationSearch
processor
=
new
MethodInvocationSearch
(
)
;
spoon
.
getEnvironment
(
)
.
setPrettyPrinterCreator
(
(
)
->
{
return
new
SniperJavaPrettyPrinter
(
spoon
.
getEnvironment
(
)
)
;
}
)
;
CtModel
model
=
spoon
.
buildModel
(
)
;
model
.
getElements
(
new
TypeFilter
<
>
(
CtField
.
class
)
)
.
forEach
(
processor
::
scan
)
;
model
.
getElements
(
new
TypeFilter
<
>
(
CtExecutable
.
class
)
)
.
forEach
(
processor
::
scan
)
;
Collection
<
MethodCallState
>
invocationsOfMethod
=
processor
.
getInvocationsOfMethod
(
)
;
removeUncalledMethods
(
invocationsOfMethod
)
;
for
(
CtExecutable
<
?
>
method
:
model
.
getElements
(
new
TypeFilter
<
>
(
CtExecutable
.
class
)
)
)
{
if
(
method
.
hasAnnotation
(
Deprecated
.
class
)
&&
invocationsOfMethod
.
stream
(
)
.
noneMatch
(
v
->
v
.
getMethod
(
)
.
equals
(
method
)
)
)
{
method
.
delete
(
)
;
}
}
spoon
.
prettyprint
(
)
;
}
