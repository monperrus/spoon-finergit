/** 
 * search for all methods and lambdas which has to be refactored together with target method
 */
private
void
computeAllInvocations
(
)
{
ExecutableReferenceFilter
execRefFilter
=
new
ExecutableReferenceFilter
(
)
;
for
(
CtExecutable
<
?
>
exec
:
getTargetExecutables
(
)
)
{
execRefFilter
.
addExecutable
(
exec
)
;
}
final
List
<
CtInvocation
<
?
>
>
invocations
=
new
ArrayList
<
>
(
)
;
target
.
getFactory
(
)
.
getModel
(
)
.
getRootPackage
(
)
.
filterChildren
(
execRefFilter
)
.
forEach
(
new
CtConsumer
<
CtExecutableReference
<
?
>
>
(
)
{
@Override
public
void
accept
(
CtExecutableReference
<
?
>
t
)
{
CtElement
parent
=
t
.
getParent
(
)
;
if
(
parent
instanceof
CtInvocation
<
?
>
)
{
invocations
.
add
(
(
CtInvocation
<
?
>
)
parent
)
;
}
}
}
)
;
targetInvocations
=
Collections
.
unmodifiableList
(
invocations
)
;
}
