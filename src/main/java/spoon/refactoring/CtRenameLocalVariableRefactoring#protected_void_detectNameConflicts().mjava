@Override
protected
void
detectNameConflicts
(
)
{
PotentialVariableDeclarationFunction
potentialDeclarationFnc
=
new
PotentialVariableDeclarationFunction
(
newName
)
;
CtVariable
<
?
>
var
=
getTarget
(
)
.
map
(
potentialDeclarationFnc
)
.
first
(
)
;
if
(
var
!=
null
)
{
if
(
var
instanceof
CtField
)
{
}
else
if
(
potentialDeclarationFnc
.
isTypeOnTheWay
(
)
)
{
CtVariableReference
<
?
>
shadowedVar
=
target
.
map
(
new
SiblingsFunction
(
)
.
includingSelf
(
true
)
.
mode
(
Mode
.
NEXT
)
)
.
map
(
new
VariableReferenceFunction
(
var
)
)
.
first
(
)
;
if
(
shadowedVar
!=
null
)
{
createNameConflictIssue
(
var
,
shadowedVar
)
;
}
else
{
}
}
else
{
createNameConflictIssue
(
var
)
;
}
}
final
QueryDriver
queryDriver
=
new
QueryDriver
(
)
;
getTarget
(
)
.
map
(
new
LocalVariableScopeFunction
(
queryDriver
)
)
.
select
(
new
Filter
<
CtElement
>
(
)
{
/** 
 * return true for all CtVariables, which are in conflict
 */
@Override
public
boolean
matches
(
CtElement
element
)
{
if
(
element
instanceof
CtType
<
?
>
)
{
CtType
<
?
>
localClass
=
(
CtType
<
?
>
)
element
;
Collection
<
CtFieldReference
<
?
>
>
fields
=
localClass
.
getAllFields
(
)
;
for
(
CtFieldReference
<
?
>
fieldRef
:
fields
)
{
if
(
newName
.
equals
(
fieldRef
.
getSimpleName
(
)
)
)
{
queryDriver
.
ignoreChildrenOf
(
element
)
;
CtLocalVariableReference
<
?
>
shadowedVar
=
element
.
map
(
new
LocalVariableReferenceFunction
(
target
)
)
.
first
(
)
;
if
(
shadowedVar
!=
null
)
{
createNameConflictIssue
(
fieldRef
.
getFieldDeclaration
(
)
,
shadowedVar
)
;
return
true
;
}
return
false
;
}
}
return
false
;
}
if
(
element
instanceof
CtVariable
<
?
>
)
{
CtVariable
<
?
>
variable
=
(
CtVariable
<
?
>
)
element
;
if
(
newName
.
equals
(
variable
.
getSimpleName
(
)
)
==
false
)
{
return
false
;
}
if
(
variable
instanceof
CtField
)
{
throw
new
SpoonException
(
"This should not happen. The children of local class which contains a field with new name should be skipped!"
)
;
}
if
(
variable
instanceof
CtCatchVariable
||
variable
instanceof
CtLocalVariable
||
variable
instanceof
CtParameter
)
{
if
(
queryDriver
.
isInContextOfLocalClass
(
)
)
{
queryDriver
.
ignoreChildrenOf
(
variable
.
getParent
(
)
)
;
CtQueryable
searchScope
;
if
(
variable
instanceof
CtLocalVariable
)
{
searchScope
=
variable
.
map
(
new
SiblingsFunction
(
)
.
includingSelf
(
true
)
.
mode
(
Mode
.
NEXT
)
)
;
}
else
{
searchScope
=
variable
.
getParent
(
)
;
}
CtLocalVariableReference
<
?
>
shadowedVar
=
searchScope
.
map
(
new
LocalVariableReferenceFunction
(
target
)
)
.
first
(
)
;
if
(
shadowedVar
!=
null
)
{
createNameConflictIssue
(
variable
,
shadowedVar
)
;
return
true
;
}
return
false
;
}
else
{
createNameConflictIssue
(
variable
)
;
return
true
;
}
}
else
{
throw
new
SpoonException
(
"Unexpected variable "
+
variable
.
getClass
(
)
.
getName
(
)
)
;
}
}
return
false
;
}
}
)
.
first
(
)
;
}
