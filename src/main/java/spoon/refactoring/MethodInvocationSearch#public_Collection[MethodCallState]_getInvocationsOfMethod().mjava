public
Collection
<
MethodCallState
>
getInvocationsOfMethod
(
)
{
Collection
<
MethodCallState
>
transformedResult
=
new
HashSet
<
>
(
)
;
Stream
.
concat
(
invocationsOfMethod
.
keySet
(
)
.
stream
(
)
,
invocationsOfField
.
keySet
(
)
.
stream
(
)
)
.
map
(
MethodCallState
::
new
)
.
forEach
(
transformedResult
::
add
)
;
for
(
MethodCallState
methodCallState
:
transformedResult
)
{
invocationsOfField
.
getOrDefault
(
methodCallState
.
getMethod
(
)
,
Collections
.
emptyList
(
)
)
.
forEach
(
methodCallState
::
add
)
;
invocationsOfMethod
.
getOrDefault
(
methodCallState
.
getMethod
(
)
,
Collections
.
emptyList
(
)
)
.
forEach
(
methodCallState
::
add
)
;
}
return
transformedResult
;
}
