/** 
 * See doc in  {@link CtType#copyType()} 
 */
public
static
CtType
<
?
>
copyType
(
final
CtType
<
?
>
type
)
{
CtType
<
?
>
clone
=
type
.
clone
(
)
;
String
tentativeTypeName
=
type
.
getSimpleName
(
)
+
"Copy"
;
while
(
type
.
getFactory
(
)
.
Type
(
)
.
get
(
type
.
getPackage
(
)
.
getQualifiedName
(
)
+
"."
+
tentativeTypeName
)
!=
null
)
{
tentativeTypeName
=
"X"
;
}
final
String
cloneTypeName
=
tentativeTypeName
;
clone
.
setSimpleName
(
cloneTypeName
)
;
type
.
getPackage
(
)
.
addType
(
clone
)
;
new
CtScanner
(
)
{
@Override
public
<
T
>
void
visitCtTypeReference
(
CtTypeReference
<
T
>
reference
)
{
if
(
reference
.
getDeclaration
(
)
==
null
)
{
return
;
}
if
(
reference
.
getDeclaration
(
)
==
type
)
{
reference
.
setSimpleName
(
cloneTypeName
)
;
}
if
(
reference
.
getDeclaration
(
)
!=
clone
)
{
throw
new
SpoonException
(
"post condition broken "
+
reference
)
;
}
super
.
visitCtTypeReference
(
reference
)
;
}
@Override
public
<
T
>
void
visitCtExecutableReference
(
CtExecutableReference
<
T
>
reference
)
{
CtExecutable
<
T
>
declaration
=
reference
.
getDeclaration
(
)
;
if
(
declaration
==
null
)
{
return
;
}
if
(
declaration
.
hasParent
(
type
)
)
{
reference
.
getDeclaringType
(
)
.
setSimpleName
(
cloneTypeName
)
;
}
if
(
!
reference
.
getDeclaration
(
)
.
hasParent
(
clone
)
)
{
throw
new
SpoonException
(
"post condition broken "
+
reference
)
;
}
super
.
visitCtExecutableReference
(
reference
)
;
}
@Override
public
<
T
>
void
visitCtFieldReference
(
CtFieldReference
<
T
>
reference
)
{
CtField
<
T
>
declaration
=
reference
.
getDeclaration
(
)
;
if
(
declaration
==
null
)
{
return
;
}
if
(
declaration
.
hasParent
(
type
)
)
{
reference
.
getDeclaringType
(
)
.
setSimpleName
(
cloneTypeName
)
;
}
if
(
reference
.
getDeclaration
(
)
==
null
||
!
reference
.
getDeclaration
(
)
.
hasParent
(
clone
)
)
{
throw
new
SpoonException
(
"post condition broken "
+
reference
)
;
}
super
.
visitCtFieldReference
(
reference
)
;
}
}
.
scan
(
clone
)
;
return
clone
;
}
