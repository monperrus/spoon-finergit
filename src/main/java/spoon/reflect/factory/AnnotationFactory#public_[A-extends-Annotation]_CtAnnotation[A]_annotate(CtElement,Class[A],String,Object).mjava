/** 
 * Creates/updates an element's annotation value.
 * @param element the program element to annotate
 * @param annotationType the annotation type
 * @param annotationElementName the annotation element name
 * @param value the value of the annotation element
 * @return the created/updated annotation
 */
@SuppressWarnings("unchecked")
public
<
A
extends
Annotation
>
CtAnnotation
<
A
>
annotate
(
CtElement
element
,
Class
<
A
>
annotationType
,
String
annotationElementName
,
Object
value
)
{
CtAnnotation
annotation
=
element
.
getAnnotation
(
factory
.
Type
(
)
.
createReference
(
annotationType
)
)
;
if
(
annotation
==
null
)
{
annotation
=
factory
.
Core
(
)
.
createAnnotation
(
)
;
annotation
.
setAnnotationType
(
factory
.
Type
(
)
.
createReference
(
annotationType
)
)
;
element
.
getAnnotations
(
)
.
add
(
annotation
)
;
annotation
.
setParent
(
element
)
;
}
boolean
isArray
;
CtAnnotationType
annotationtype
=
(
(
CtAnnotationType
)
annotation
.
getAnnotationType
(
)
.
getDeclaration
(
)
)
;
if
(
annotationtype
!=
null
)
{
CtField
e
=
annotationtype
.
getField
(
annotationElementName
)
;
isArray
=
(
e
.
getType
(
)
instanceof
CtArrayTypeReference
)
;
}
else
{
Method
m
=
null
;
try
{
m
=
annotation
.
getAnnotationType
(
)
.
getActualClass
(
)
.
getMethod
(
annotationElementName
,
new
Class
[
]
)
;
}
catch
(
Exception
ex
)
{
throw
new
RuntimeException
(
"undefined element '"
+
annotationElementName
+
"' for annotation '"
+
annotationType
.
getName
(
)
+
"'"
)
;
}
isArray
=
m
.
getReturnType
(
)
.
isArray
(
)
;
}
if
(
isArray
==
(
(
value
instanceof
Collection
)
||
value
.
getClass
(
)
.
isArray
(
)
)
)
{
if
(
value
.
getClass
(
)
.
isArray
(
)
)
{
value
=
Arrays
.
asList
(
value
)
;
}
annotation
.
getElementValues
(
)
.
put
(
annotationElementName
,
value
)
;
}
else
{
if
(
isArray
)
{
(
(
List
)
annotation
.
getElementValue
(
annotationElementName
)
)
.
add
(
value
)
;
}
else
{
throw
new
RuntimeException
(
"cannot assing an array to a non-array annotation element"
)
;
}
}
return
annotation
;
}
