/** 
 * Creates/updates an element's annotation value.
 * @param element the program element to annotate
 * @param annotationType the annotation type
 * @param annotationElementName the annotation element name
 * @param value the value of the annotation element
 * @return the created/updated annotation
 */
public
<
A
extends
Annotation
>
CtAnnotation
<
A
>
annotate
(
CtElement
element
,
CtTypeReference
<
A
>
annotationType
,
String
annotationElementName
,
Object
value
)
{
final
CtAnnotation
<
A
>
annotation
=
annotate
(
element
,
annotationType
)
;
boolean
isArray
;
CtAnnotationType
<
A
>
ctAnnotationType
=
(
(
CtAnnotationType
<
A
>
)
annotation
.
getAnnotationType
(
)
.
getDeclaration
(
)
)
;
boolean
hasAlreadyValue
=
annotation
.
getValues
(
)
.
containsKey
(
annotationElementName
)
;
if
(
ctAnnotationType
!=
null
)
{
CtMethod
<
?
>
e
=
ctAnnotationType
.
getMethod
(
annotationElementName
)
;
isArray
=
(
e
.
getType
(
)
instanceof
CtArrayTypeReference
)
;
}
else
{
Method
m
;
try
{
m
=
annotation
.
getAnnotationType
(
)
.
getActualClass
(
)
.
getMethod
(
annotationElementName
,
new
Class
[
]
)
;
}
catch
(
Exception
ex
)
{
annotation
.
addValue
(
annotationElementName
,
value
)
;
return
annotation
;
}
isArray
=
m
.
getReturnType
(
)
.
isArray
(
)
;
}
if
(
isArray
||
!
hasAlreadyValue
)
{
annotation
.
addValue
(
annotationElementName
,
value
)
;
}
else
{
throw
new
SpoonException
(
"cannot assign an array to a non-array annotation element"
)
;
}
return
annotation
;
}
