/** 
 * Creates a constructor call. The correct constructor is inferred based on parameters
 * @param type the decelerating type of the constructor
 * @param parameters the arguments of the constructor call
 * @param < T > the actual type of the decelerating type of the constructor if available
 * @return the constructor call
 */
public
<
T
>
CtConstructorCall
<
T
>
createConstructorCall
(
CtTypeReference
<
T
>
type
,
CtExpression
<
?
>
...
parameters
)
{
CtConstructorCall
<
T
>
constructorCall
=
factory
.
Core
(
)
.
createConstructorCall
(
)
;
CtExecutableReference
<
T
>
executableReference
=
factory
.
Core
(
)
.
createExecutableReference
(
)
;
executableReference
.
setType
(
type
)
;
executableReference
.
setDeclaringType
(
type
==
null
?
type
:
type
.
clone
(
)
)
;
executableReference
.
setSimpleName
(
CtExecutableReference
.
CONSTRUCTOR_NAME
)
;
List
<
CtTypeReference
<
?
>
>
typeReferences
=
new
ArrayList
<
CtTypeReference
<
?
>
>
(
)
;
for
(
int
i
=
0
;
i
<
parameters
.
length
;
i
++
)
{
CtExpression
<
?
>
parameter
=
parameters
[
i
]
;
typeReferences
.
add
(
parameter
.
getType
(
)
)
;
}
executableReference
.
setParameters
(
typeReferences
)
;
constructorCall
.
setArguments
(
Arrays
.
asList
(
parameters
)
)
;
constructorCall
.
setExecutable
(
executableReference
)
;
return
constructorCall
;
}
