/** 
 * Creates a class access expression of the form <code>C.class</code>.
 * @param < T > the actual type of the accessed class if available
 * @param type a type reference to the accessed class
 * @return the class access expression.
 */
public
<
T
>
CtFieldAccess
<
Class
<
T
>
>
createClassAccess
(
CtTypeReference
<
T
>
type
)
{
CtFieldAccess
<
Class
<
T
>
>
ca
=
factory
.
Core
(
)
.
createFieldAccess
(
)
;
@SuppressWarnings({"rawtypes","unchecked"})
CtTypeReference
<
Class
<
T
>
>
classType
=
(
CtTypeReference
)
factory
.
Type
(
)
.
createReference
(
Class
.
class
)
;
ca
.
setType
(
classType
)
;
CtFieldReference
<
Class
<
T
>
>
field
=
factory
.
Core
(
)
.
createFieldReference
(
)
;
field
.
setDeclaringType
(
type
)
;
field
.
setType
(
classType
)
;
field
.
setSimpleName
(
"class"
)
;
ca
.
setVariable
(
field
)
;
return
ca
;
}
