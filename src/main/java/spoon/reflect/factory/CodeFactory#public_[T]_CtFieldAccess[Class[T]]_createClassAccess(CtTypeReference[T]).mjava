/** 
 * Creates a class access expression of the form <code>C.class</code>.
 * @param < T > the actual type of the accessed class if available
 * @param type a type reference to the accessed class
 * @return the class access expression.
 */
public
<
T
>
CtFieldAccess
<
Class
<
T
>
>
createClassAccess
(
CtTypeReference
<
T
>
type
)
{
@SuppressWarnings({"rawtypes","unchecked"})
CtTypeReference
<
Class
<
T
>
>
classType
=
(
CtTypeReference
)
factory
.
Type
(
)
.
createReference
(
Class
.
class
)
;
CtTypeAccess
<
T
>
typeAccess
=
factory
.
Code
(
)
.
createTypeAccess
(
type
)
;
CtFieldReference
<
Class
<
T
>
>
fieldReference
=
factory
.
Core
(
)
.
createFieldReference
(
)
;
fieldReference
.
setSimpleName
(
"class"
)
;
fieldReference
.
setType
(
classType
)
;
fieldReference
.
setDeclaringType
(
type
)
;
CtFieldRead
<
Class
<
T
>
>
fieldRead
=
factory
.
Core
(
)
.
createFieldRead
(
)
;
fieldRead
.
setType
(
factory
.
Core
(
)
.
clone
(
classType
)
)
;
fieldRead
.
setVariable
(
fieldReference
)
;
fieldRead
.
setTarget
(
typeAccess
)
;
return
fieldRead
;
}
