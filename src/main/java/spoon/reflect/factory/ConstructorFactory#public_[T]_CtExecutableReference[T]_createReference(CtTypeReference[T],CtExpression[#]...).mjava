/** 
 * Creates a constructor reference.
 * @param type Declaring type of the constructor.
 * @param parameters Constructor parameters.
 * @param < T > Infered type of the constructor.
 * @return CtExecutablereference if a constructor.
 */
public
<
T
>
CtExecutableReference
<
T
>
createReference
(
CtTypeReference
<
T
>
type
,
CtExpression
<
?
>
...
parameters
)
{
final
CtExecutableReference
<
T
>
executableReference
=
factory
.
Core
(
)
.
createExecutableReference
(
)
;
executableReference
.
setType
(
type
)
;
executableReference
.
setDeclaringType
(
type
)
;
executableReference
.
setSimpleName
(
CtExecutableReference
.
CONSTRUCTOR_NAME
)
;
List
<
CtTypeReference
<
?
>
>
typeReferences
=
new
ArrayList
<
CtTypeReference
<
?
>
>
(
)
;
for
(
CtExpression
<
?
>
parameter
:
parameters
)
{
typeReferences
.
add
(
parameter
.
getType
(
)
)
;
}
executableReference
.
setParameters
(
typeReferences
)
;
return
executableReference
;
}
