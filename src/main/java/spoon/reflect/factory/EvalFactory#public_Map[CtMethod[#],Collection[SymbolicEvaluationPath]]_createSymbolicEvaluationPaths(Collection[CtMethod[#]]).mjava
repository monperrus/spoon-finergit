/** 
 * Gets the symbolic evaluation paths of the program, as calculated by {@link spoon.reflect.eval.SymbolicEvaluator}.
 * @param entryPoints the entry point methods
 * @return a map containing the paths for each entry point
 */
@SuppressWarnings("unchecked")
public
Map
<
CtMethod
<
?
>
,
Collection
<
SymbolicEvaluationPath
>
>
createSymbolicEvaluationPaths
(
Collection
<
CtMethod
<
?
>
>
entryPoints
)
{
Map
<
CtMethod
<
?
>
,
Collection
<
SymbolicEvaluationPath
>
>
results
=
new
HashMap
<
CtMethod
<
?
>
,
Collection
<
SymbolicEvaluationPath
>
>
(
)
;
for
(
CtMethod
<
?
>
m
:
entryPoints
)
{
SymbolicEvaluationPathsMaker
pathsMaker
=
new
SymbolicEvaluationPathsMaker
(
)
;
SymbolicEvaluator
evaluator
=
createSymbolicEvaluator
(
pathsMaker
)
;
evaluator
.
invoke
(
m
)
;
results
.
put
(
m
,
pathsMaker
.
getPaths
(
)
)
;
}
return
results
;
}
