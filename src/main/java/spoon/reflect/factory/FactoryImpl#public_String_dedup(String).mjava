/** 
 * Returns a String equal to the given symbol. Performs probablilistic deduplication.
 */
public
String
dedup
(
String
symbol
)
{
Dedup
dedup
=
threadLocalDedup
.
get
(
)
;
Map
<
String
,
String
>
cache
=
dedup
.
cache
;
String
cached
;
if
(
(
cached
=
cache
.
get
(
symbol
)
)
!=
null
)
{
return
cached
;
}
else
{
int
prob
=
(
int
)
(
Integer
.
MIN_VALUE
+
(
0.2
*
(
1L
<<
32
)
)
)
;
if
(
dedup
.
random
.
nextInt
(
)
<
prob
)
{
cache
.
put
(
symbol
,
symbol
)
;
}
return
symbol
;
}
}
