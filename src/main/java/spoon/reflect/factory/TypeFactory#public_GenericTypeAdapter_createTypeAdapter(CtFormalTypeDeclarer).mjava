/** 
 * Create a  {@link GenericTypeAdapter} for adapting of formal type parameters from any compatible context to the context of provided `formalTypeDeclarer`
 * @param formalTypeDeclarer the target scope of the returned  {@link GenericTypeAdapter}
 */
public
GenericTypeAdapter
createTypeAdapter
(
CtFormalTypeDeclarer
formalTypeDeclarer
)
{
class
Visitor
extends
CtAbstractVisitor
{
GenericTypeAdapter
adapter
;
@Override
public
<
T
>
void
visitCtClass
(
CtClass
<
T
>
ctClass
)
{
adapter
=
new
ClassTypingContext
(
ctClass
)
;
}
@Override
public
<
T
>
void
visitCtInterface
(
CtInterface
<
T
>
intrface
)
{
adapter
=
new
ClassTypingContext
(
intrface
)
;
}
@Override
public
<
T
>
void
visitCtMethod
(
CtMethod
<
T
>
m
)
{
adapter
=
new
MethodTypingContext
(
)
.
setMethod
(
m
)
;
}
@Override
public
<
T
>
void
visitCtConstructor
(
CtConstructor
<
T
>
c
)
{
adapter
=
new
MethodTypingContext
(
)
.
setConstructor
(
c
)
;
}
}
Visitor
visitor
=
new
Visitor
(
)
;
formalTypeDeclarer
.
accept
(
visitor
)
;
return
visitor
.
adapter
;
}
