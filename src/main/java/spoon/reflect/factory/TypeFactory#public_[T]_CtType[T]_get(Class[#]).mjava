/** 
 * Gets a type from its runtime Java class. If the class isn't in the spoon path, the class will be build from the Java reflection and will be marked as shadow (see  {@link spoon.reflect.declaration.CtShadowable}).
 * @param < T > actual type of the class
 * @param cl the java class: note that this class should be Class&lt;T&gt; but it then poses problem when T is a generic type itself
 */
@SuppressWarnings("unchecked")
public
<
T
>
CtType
<
T
>
get
(
Class
<
?
>
cl
)
{
final
CtType
<
T
>
aType
=
get
(
cl
.
getName
(
)
)
;
if
(
aType
==
null
)
{
final
CtType
<
T
>
shadowClass
=
(
CtType
<
T
>
)
this
.
shadowCache
.
get
(
cl
)
;
if
(
shadowClass
==
null
)
{
final
CtType
<
T
>
newShadowClass
=
new
JavaReflectionTreeBuilder
(
createFactory
(
)
)
.
scan
(
(
Class
<
T
>
)
cl
)
;
newShadowClass
.
setFactory
(
factory
)
;
newShadowClass
.
accept
(
new
CtScanner
(
)
{
@Override
public
void
scan
(
CtElement
element
)
{
if
(
element
!=
null
)
{
element
.
setFactory
(
factory
)
;
}
}
}
)
;
this
.
shadowCache
.
put
(
cl
,
newShadowClass
)
;
return
newShadowClass
;
}
else
{
return
shadowClass
;
}
}
return
aType
;
}
