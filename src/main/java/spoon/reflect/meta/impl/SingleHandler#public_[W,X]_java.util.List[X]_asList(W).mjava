public
<
W
,
X
>
java
.
util
.
List
<
X
>
asList
(
W
e
)
{
return
new
AbstractList
<
X
>
(
)
{
T
element
=
castTarget
(
e
)
;
boolean
hasValue
=
this
.
getValue
(
element
)
!=
null
;
@Override
public
int
size
(
)
{
return
hasValue
?
1
:
0
;
}
@SuppressWarnings("unchecked")
@Override
public
X
get
(
int
index
)
{
if
(
index
<
0
||
index
>=
size
(
)
)
{
throw
new
IndexOutOfBoundsException
(
"Index: "
+
index
+
", Size: "
+
size
(
)
)
;
}
return
(
X
)
this
.
getValue
(
element
)
;
}
@Override
public
X
set
(
int
index
,
X
value
)
{
if
(
index
<
0
||
index
>=
size
(
)
)
{
throw
new
IndexOutOfBoundsException
(
"Index: "
+
index
+
", Size: "
+
size
(
)
)
;
}
X
oldValue
=
get
(
0
)
;
this
.
setValue
(
element
,
value
)
;
return
(
X
)
oldValue
;
}
@Override
public
boolean
add
(
X
value
)
{
if
(
hasValue
)
{
throw
new
SpoonException
(
"Single value attribute cannot have more then one value"
)
;
}
this
.
setValue
(
element
,
value
)
;
hasValue
=
true
;
return
true
;
}
@Override
public
X
remove
(
int
index
)
{
if
(
index
<
0
||
index
>=
size
(
)
)
{
throw
new
IndexOutOfBoundsException
(
"Index: "
+
index
+
", Size: "
+
size
(
)
)
;
}
X
oldValue
=
get
(
0
)
;
if
(
oldValue
!=
null
)
{
this
.
setValue
(
element
,
null
)
;
}
hasValue
=
false
;
return
oldValue
;
}
@Override
public
boolean
remove
(
Object
value
)
{
if
(
hasValue
==
false
)
{
return
false
;
}
X
oldValue
=
get
(
0
)
;
if
(
equals
(
oldValue
,
value
)
)
{
if
(
oldValue
!=
null
)
{
this
.
setValue
(
element
,
null
)
;
}
hasValue
=
false
;
return
true
;
}
return
false
;
}
private
boolean
equals
(
Object
v1
,
Object
v2
)
{
if
(
v1
==
v2
)
{
return
true
;
}
if
(
v1
==
null
)
{
return
false
;
}
return
v1
.
equals
(
v2
)
;
}
}
;
}
