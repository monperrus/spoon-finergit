/** 
 * Build path from a string representation. for example: new CtPathBuilder().fromString(".spoon.test.path.Foo.foo#statement[index=0]") Match the first statement of method foo from class spoon.test.path.Foo. Some specials characters . :  match with the given name # : match with a CtPathRole / : match with a element type (for example, to match all classes, use /CtClass
 */
public
CtPath
fromString
(
String
pathStr
)
throws
CtPathException
{
CtPathImpl
path
=
new
CtPathImpl
(
)
;
Tokenizer
tokenizer
=
new
Tokenizer
(
pathStr
)
;
String
token
=
tokenizer
.
getNextToken
(
MAIN_DELIMITERS
)
;
while
(
token
!=
null
)
{
String
kind
=
token
;
CtPathElement
pathElement
;
token
=
tokenizer
.
getNextToken
(
PATH_DELIMITERS
)
;
if
(
token
!=
null
&&
token
.
length
(
)
==
1
&&
PATH_DELIMITERS
.
contains
(
token
)
)
{
throw
new
CtPathException
(
"Path value is missing"
)
;
}
if
(
CtNamedPathElement
.
STRING
.
equals
(
kind
)
)
{
pathElement
=
new
CtNamedPathElement
(
token
,
false
)
;
}
else
if
(
CtTypedNameElement
.
STRING
.
equals
(
kind
)
)
{
pathElement
=
new
CtTypedNameElement
(
load
(
token
)
)
;
}
else
if
(
CtRolePathElement
.
STRING
.
equals
(
kind
)
)
{
pathElement
=
new
CtRolePathElement
(
CtRole
.
fromName
(
token
)
)
;
}
else
{
throw
new
CtPathException
(
"Unexpected token "
+
kind
)
;
}
token
=
tokenizer
.
getNextToken
(
PATH_DELIMITERS
)
;
if
(
AbstractPathElement
.
ARGUMENT_START
.
equals
(
token
)
)
{
while
(
true
)
{
String
argName
=
tokenizer
.
getNextToken
(
ARG_NAME_DELIMITERS
)
;
if
(
!
NAME_MATCHER
.
matcher
(
argName
)
.
matches
(
)
)
{
throw
new
CtPathException
(
"Argument name must be a word, but is: "
+
argName
)
;
}
token
=
tokenizer
.
getNextToken
(
ARG_NAME_DELIMITERS
)
;
if
(
!
AbstractPathElement
.
ARGUMENT_NAME_SEPARATOR
.
equals
(
token
)
)
{
throw
new
CtPathException
(
"Expects "
+
AbstractPathElement
.
ARGUMENT_NAME_SEPARATOR
)
;
}
token
=
parseArgumentValue
(
tokenizer
,
argName
,
pathElement
)
;
if
(
"]"
.
equals
(
token
)
)
{
break
;
}
}
token
=
tokenizer
.
getNextToken
(
MAIN_DELIMITERS
)
;
}
path
.
addLast
(
pathElement
)
;
}
return
path
;
}
