/** 
 * Get the  {@link CtRole} associated to the field name
 * @param name
 * @return
 */
public
static
CtRole
fromName
(
String
name
)
{
name
=
name
.
toLowerCase
(
)
;
for
(
int
i
=
0
;
i
<
CtRole
.
values
(
)
.
length
;
i
++
)
{
if
(
CtRole
.
values
(
)
[
i
]
.
getCamelCaseName
(
)
.
toLowerCase
(
)
.
equals
(
name
)
)
{
return
CtRole
.
values
(
)
[
i
]
;
}
}
if
(
"implicit"
.
equals
(
name
)
)
{
return
IS_IMPLICIT
;
}
if
(
"varargs"
.
equals
(
name
)
)
{
return
IS_VARARGS
;
}
if
(
"defaultmethod"
.
equals
(
name
)
)
{
return
IS_DEFAULT
;
}
if
(
"block"
.
equals
(
name
)
)
{
return
BODY
;
}
if
(
"param"
.
equals
(
name
)
)
{
return
PARAMETER
;
}
if
(
"dimensionexpressions"
.
equals
(
name
)
)
{
return
DIMENSION
;
}
if
(
"actualtypearguments"
.
equals
(
name
)
)
{
return
TYPE_PARAMETER
;
}
if
(
"formalcttypeparameters"
.
equals
(
name
)
)
{
return
TYPE_PARAMETER
;
}
if
(
"typecasts"
.
equals
(
name
)
)
{
return
CAST
;
}
if
(
"cases"
.
equals
(
name
)
)
{
return
CASE
;
}
if
(
"enumvalues"
.
equals
(
name
)
||
"elementvalues"
.
equals
(
name
)
)
{
return
VALUE
;
}
if
(
"throwntypes"
.
equals
(
name
)
)
{
return
THROWN
;
}
if
(
"value"
.
equals
(
name
)
||
"returnedexpression"
.
equals
(
name
)
||
"expressions"
.
equals
(
name
)
)
{
return
EXPRESSION
;
}
if
(
"asserted"
.
equals
(
name
)
)
{
return
CONDITION
;
}
if
(
"parameters"
.
equals
(
name
)
)
{
return
PARAMETER
;
}
if
(
"typemembers"
.
equals
(
name
)
)
{
return
FIELD
;
}
if
(
"throwexpression"
.
equals
(
name
)
)
{
return
THROWN
;
}
if
(
"returntype"
.
equals
(
name
)
||
"componenttype"
.
equals
(
name
)
)
{
return
TYPE
;
}
if
(
"caseexpression"
.
equals
(
name
)
)
{
return
CASE
;
}
if
(
"elseexpression"
.
equals
(
name
)
||
"elsestatement"
.
equals
(
name
)
)
{
return
ELSE
;
}
if
(
"thenexpression"
.
equals
(
name
)
||
"thenstatement"
.
equals
(
name
)
)
{
return
THEN
;
}
if
(
"righthandoperand"
.
equals
(
name
)
)
{
return
RIGHT_OPERAND
;
}
if
(
"lefthandoperand"
.
equals
(
name
)
)
{
return
LEFT_OPERAND
;
}
if
(
"pack"
.
equals
(
name
)
||
"packs"
.
equals
(
name
)
)
{
return
SUB_PACKAGE
;
}
if
(
"superclass"
.
equals
(
name
)
)
{
return
SUPER_TYPE
;
}
if
(
"name"
.
equals
(
name
)
||
"simplename"
.
equals
(
name
)
)
{
return
NAME
;
}
return
null
;
}
