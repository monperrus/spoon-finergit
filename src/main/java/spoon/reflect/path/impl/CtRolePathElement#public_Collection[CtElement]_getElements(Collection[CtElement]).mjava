@Override
public
Collection
<
CtElement
>
getElements
(
Collection
<
CtElement
>
roots
)
{
Collection
<
CtElement
>
matchs
=
new
LinkedList
<
>
(
)
;
for
(
CtElement
root
:
roots
)
{
RoleHandler
roleHandler
=
RoleHandlerHelper
.
getOptionalRoleHandler
(
root
.
getClass
(
)
,
getRole
(
)
)
;
if
(
roleHandler
!=
null
)
{
switch
(
roleHandler
.
getContainerKind
(
)
)
{
case
SINGLE
:
if
(
roleHandler
.
getValue
(
root
)
!=
null
)
{
matchs
.
add
(
roleHandler
.
getValue
(
root
)
)
;
}
break
;
case
LIST
:
if
(
getArguments
(
)
.
containsKey
(
"index"
)
)
{
int
index
=
Integer
.
parseInt
(
getArguments
(
)
.
get
(
"index"
)
)
;
if
(
index
<
roleHandler
.
asList
(
root
)
.
size
(
)
)
{
matchs
.
add
(
(
CtElement
)
roleHandler
.
asList
(
root
)
.
get
(
index
)
)
;
}
}
else
{
matchs
.
addAll
(
roleHandler
.
asList
(
root
)
)
;
}
break
;
case
SET
:
if
(
getArguments
(
)
.
containsKey
(
"name"
)
)
{
String
name
=
getArguments
(
)
.
get
(
"name"
)
;
try
{
CtElement
match
=
getFromSet
(
roleHandler
.
asSet
(
root
)
,
name
)
;
if
(
match
!=
null
)
{
matchs
.
add
(
match
)
;
}
}
catch
(
CtPathException
e
)
{
}
}
else
{
matchs
.
addAll
(
roleHandler
.
asSet
(
root
)
)
;
}
break
;
case
MAP
:
if
(
getArguments
(
)
.
containsKey
(
"key"
)
)
{
String
name
=
getArguments
(
)
.
get
(
"key"
)
;
if
(
roleHandler
.
asMap
(
root
)
.
containsKey
(
name
)
)
{
matchs
.
add
(
(
CtElement
)
roleHandler
.
asMap
(
root
)
.
get
(
name
)
)
;
}
}
else
{
Map
<
String
,
CtElement
>
map
=
roleHandler
.
asMap
(
root
)
;
matchs
.
addAll
(
map
.
values
(
)
)
;
}
break
;
}
}
}
return
matchs
;
}
