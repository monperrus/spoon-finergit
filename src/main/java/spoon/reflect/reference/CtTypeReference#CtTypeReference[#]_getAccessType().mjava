/** 
 * Computes nearest access path parent to this type from the context of this type reference. The context is defined by this.getParent(CtType.class). Normally the declaring type can be used as access path. For example in this class hierarchy <pre> class A { class B { class C {} } } </pre> The C.getAccessParentFrom(null) will return B, because B can be used to access C, using code like <code>B.C</code><br> But when some class (A or B) on the access path is not visible in type X, then we must found an alternative path. For example in case like, when A and B are invisible, e.g because of modifier <code>protected</code>: <pre> class D extends B { } class X extends D { class F extends C } </pre> The C.getAccessParentFrom(X) will return D, because D can be used to access C in scope of X.
 * @return type reference which can be used to access this type in scope of contextType.
 */
@DerivedProperty
CtTypeReference
<
?
>
getAccessType
(
)
;
