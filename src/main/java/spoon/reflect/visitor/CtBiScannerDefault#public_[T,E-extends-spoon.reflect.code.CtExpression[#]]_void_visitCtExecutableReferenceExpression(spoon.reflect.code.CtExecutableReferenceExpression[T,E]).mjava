@java.lang.Override
public
<
T
,
E
extends
spoon
.
reflect
.
code
.
CtExpression
<
?
>
>
void
visitCtExecutableReferenceExpression
(
final
spoon
.
reflect
.
code
.
CtExecutableReferenceExpression
<
T
,
E
>
expression
)
{
spoon
.
reflect
.
code
.
CtExecutableReferenceExpression
other
=
(
(
spoon
.
reflect
.
code
.
CtExecutableReferenceExpression
)
(
this
.
stack
.
peek
(
)
)
)
;
enter
(
expression
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
COMMENT
,
expression
.
getComments
(
)
,
other
.
getComments
(
)
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
ANNOTATION
,
expression
.
getAnnotations
(
)
,
other
.
getAnnotations
(
)
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
TYPE
,
expression
.
getType
(
)
,
other
.
getType
(
)
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
CAST
,
expression
.
getTypeCasts
(
)
,
other
.
getTypeCasts
(
)
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
EXECUTABLE_REF
,
expression
.
getExecutable
(
)
,
other
.
getExecutable
(
)
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
TARGET
,
expression
.
getTarget
(
)
,
other
.
getTarget
(
)
)
;
exit
(
expression
)
;
}
