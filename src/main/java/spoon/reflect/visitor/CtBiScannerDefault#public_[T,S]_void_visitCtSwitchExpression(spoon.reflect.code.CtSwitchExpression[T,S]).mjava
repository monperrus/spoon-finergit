public
<
T
,
S
>
void
visitCtSwitchExpression
(
final
spoon
.
reflect
.
code
.
CtSwitchExpression
<
T
,
S
>
switchExpression
)
{
spoon
.
reflect
.
code
.
CtSwitchExpression
other
=
(
(
spoon
.
reflect
.
code
.
CtSwitchExpression
)
(
this
.
stack
.
peek
(
)
)
)
;
enter
(
switchExpression
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
ANNOTATION
,
switchExpression
.
getAnnotations
(
)
,
other
.
getAnnotations
(
)
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
EXPRESSION
,
switchExpression
.
getSelector
(
)
,
other
.
getSelector
(
)
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
CASE
,
switchExpression
.
getCases
(
)
,
other
.
getCases
(
)
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
COMMENT
,
switchExpression
.
getComments
(
)
,
other
.
getComments
(
)
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
TYPE
,
switchExpression
.
getType
(
)
,
other
.
getType
(
)
)
;
biScan
(
spoon
.
reflect
.
path
.
CtRole
.
CAST
,
switchExpression
.
getTypeCasts
(
)
,
other
.
getTypeCasts
(
)
)
;
exit
(
switchExpression
)
;
}
