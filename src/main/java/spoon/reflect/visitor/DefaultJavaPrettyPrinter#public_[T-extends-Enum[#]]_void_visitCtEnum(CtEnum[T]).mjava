public
<
T
extends
Enum
<
?
>
>
void
visitCtEnum
(
CtEnum
<
T
>
ctEnum
)
{
visitCtType
(
ctEnum
)
;
write
(
"enum "
+
ctEnum
.
getSimpleName
(
)
)
;
if
(
ctEnum
.
getSuperInterfaces
(
)
.
size
(
)
>
0
)
{
write
(
" implements "
)
;
for
(
CtTypeReference
<
?
>
ref
:
ctEnum
.
getSuperInterfaces
(
)
)
{
scan
(
ref
)
;
write
(
" , "
)
;
}
removeLastChar
(
)
;
}
context
.
currentThis
.
push
(
ctEnum
.
getReference
(
)
)
;
write
(
" {"
)
.
incTab
(
)
.
writeln
(
)
;
if
(
ctEnum
.
getEnumValues
(
)
.
size
(
)
==
0
)
{
writeTabs
(
)
.
write
(
";"
)
.
writeln
(
)
;
}
else
{
for
(
CtEnumValue
<
?
>
enumValue
:
ctEnum
.
getEnumValues
(
)
)
{
scan
(
enumValue
)
;
write
(
", "
)
;
}
removeLastChar
(
)
;
write
(
";"
)
;
}
for
(
CtField
<
?
>
field
:
ctEnum
.
getFields
(
)
)
{
if
(
!
(
field
instanceof
CtEnumValue
)
)
{
writeln
(
)
.
writeTabs
(
)
.
scan
(
field
)
;
}
}
for
(
CtConstructor
<
?
>
c
:
ctEnum
.
getConstructors
(
)
)
{
if
(
!
c
.
isImplicit
(
)
)
{
writeln
(
)
.
writeTabs
(
)
.
scan
(
c
)
;
}
}
SortedList
<
CtElement
>
lst
=
new
SortedList
<
CtElement
>
(
new
CtLineElementComparator
(
)
)
;
lst
.
addAll
(
ctEnum
.
getAnonymousExecutables
(
)
)
;
lst
.
addAll
(
ctEnum
.
getNestedTypes
(
)
)
;
lst
.
addAll
(
ctEnum
.
getMethods
(
)
)
;
for
(
CtElement
el
:
lst
)
{
writeln
(
)
.
writeTabs
(
)
.
scan
(
el
)
;
if
(
!
env
.
isPreserveLineNumbers
(
)
)
{
writeln
(
)
;
}
}
decTab
(
)
.
writeTabs
(
)
.
write
(
"}"
)
;
context
.
currentThis
.
pop
(
)
;
}
