public
<
T
extends
Enum
<
?
>
>
void
visitCtEnum
(
CtEnum
<
T
>
ctEnum
)
{
visitCtSimpleType
(
ctEnum
)
;
write
(
"enum "
+
ctEnum
.
getSimpleName
(
)
)
;
if
(
ctEnum
.
getSuperInterfaces
(
)
.
size
(
)
>
0
)
{
write
(
" implements "
)
;
for
(
CtTypeReference
<
?
>
ref
:
ctEnum
.
getSuperInterfaces
(
)
)
{
scan
(
ref
)
;
write
(
" , "
)
;
}
removeLastChar
(
)
;
}
write
(
" {"
)
.
incTab
(
)
.
writeln
(
)
;
List
<
CtField
<
?
>
>
l1
=
new
ArrayList
<
CtField
<
?
>
>
(
)
;
List
<
CtField
<
?
>
>
l2
=
new
ArrayList
<
CtField
<
?
>
>
(
)
;
for
(
CtField
<
?
>
ec
:
ctEnum
.
getFields
(
)
)
{
if
(
ec
.
getType
(
)
==
null
)
{
l1
.
add
(
ec
)
;
}
else
{
l2
.
add
(
ec
)
;
}
}
if
(
l1
.
size
(
)
>
0
)
{
for
(
CtField
<
?
>
ec
:
l1
)
{
writeEnumField
(
ec
)
;
write
(
", "
)
;
}
removeLastChar
(
)
;
write
(
";"
)
;
}
for
(
CtField
<
?
>
ec
:
l2
)
{
writeln
(
)
.
scan
(
ec
)
;
}
for
(
CtConstructor
<
?
>
c
:
ctEnum
.
getConstructors
(
)
)
{
if
(
!
c
.
isImplicit
(
)
)
writeln
(
)
.
scan
(
c
)
;
}
decTab
(
)
.
writeln
(
)
.
write
(
"}"
)
;
}
