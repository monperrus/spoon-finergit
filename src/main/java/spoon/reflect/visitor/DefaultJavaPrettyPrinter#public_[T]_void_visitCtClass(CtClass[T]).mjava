public
<
T
>
void
visitCtClass
(
CtClass
<
T
>
ctClass
)
{
SortedList
<
CtElement
>
lst
=
new
SortedList
<
CtElement
>
(
new
CtLineElementComparator
(
)
)
;
if
(
(
ctClass
.
getSimpleName
(
)
!=
null
)
&&
(
ctClass
.
getSimpleName
(
)
.
length
(
)
>
0
)
)
{
visitCtType
(
ctClass
)
;
write
(
"class "
+
ctClass
.
getSimpleName
(
)
)
;
writeGenericsParameter
(
ctClass
.
getFormalTypeParameters
(
)
)
;
writeExtendsClause
(
ctClass
)
;
writeImplementsClause
(
ctClass
)
;
for
(
CtConstructor
<
T
>
c
:
ctClass
.
getConstructors
(
)
)
{
if
(
!
c
.
isImplicit
(
)
)
{
lst
.
add
(
c
)
;
}
}
}
lst
.
addAll
(
ctClass
.
getAnonymousExecutables
(
)
)
;
lst
.
addAll
(
ctClass
.
getNestedTypes
(
)
)
;
lst
.
addAll
(
ctClass
.
getFields
(
)
)
;
lst
.
addAll
(
ctClass
.
getMethods
(
)
)
;
if
(
(
ctClass
.
getSimpleName
(
)
==
null
||
ctClass
.
getSimpleName
(
)
.
isEmpty
(
)
)
&&
ctClass
.
getParent
(
)
!=
null
&&
ctClass
.
getParent
(
)
instanceof
CtNewClass
)
{
context
.
currentThis
.
push
(
(
(
CtNewClass
<
?
>
)
ctClass
.
getParent
(
)
)
.
getType
(
)
)
;
}
else
{
context
.
currentThis
.
push
(
ctClass
.
getReference
(
)
)
;
}
write
(
" {"
)
.
incTab
(
)
;
for
(
CtElement
el
:
lst
)
{
writeln
(
)
.
writeTabs
(
)
.
scan
(
el
)
;
if
(
!
env
.
isPreserveLineNumbers
(
)
)
{
writeln
(
)
;
}
}
decTab
(
)
.
writeTabs
(
)
.
write
(
"}"
)
;
context
.
currentThis
.
pop
(
)
;
}
