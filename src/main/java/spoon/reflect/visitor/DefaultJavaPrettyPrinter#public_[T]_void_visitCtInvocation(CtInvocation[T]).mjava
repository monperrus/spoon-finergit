public
<
T
>
void
visitCtInvocation
(
CtInvocation
<
T
>
invocation
)
{
enterCtStatement
(
invocation
)
;
enterCtExpression
(
invocation
)
;
if
(
invocation
.
getExecutable
(
)
.
isConstructor
(
)
)
{
writeActualTypeArguments
(
invocation
.
getExecutable
(
)
)
;
CtType
<
?
>
parentType
;
try
{
parentType
=
invocation
.
getParent
(
CtType
.
class
)
;
}
catch
(
ParentNotInitializedException
e
)
{
parentType
=
null
;
}
if
(
parentType
!=
null
&&
parentType
.
getQualifiedName
(
)
!=
null
&&
parentType
.
getQualifiedName
(
)
.
equals
(
invocation
.
getExecutable
(
)
.
getDeclaringType
(
)
.
getQualifiedName
(
)
)
)
{
write
(
"this"
)
;
}
else
{
if
(
invocation
.
getTarget
(
)
!=
null
)
{
scan
(
invocation
.
getTarget
(
)
)
;
write
(
"."
)
;
}
write
(
"super"
)
;
}
}
else
{
if
(
invocation
.
getTarget
(
)
!=
null
)
{
if
(
invocation
.
getTarget
(
)
instanceof
CtTypeAccess
)
{
context
.
ignoreGenerics
=
true
;
}
context
.
enterTarget
(
)
;
scan
(
invocation
.
getTarget
(
)
)
;
context
.
exitTarget
(
)
;
context
.
ignoreGenerics
=
false
;
if
(
!
invocation
.
getTarget
(
)
.
isImplicit
(
)
)
{
write
(
"."
)
;
}
}
writeActualTypeArguments
(
invocation
)
;
if
(
env
.
isPreserveLineNumbers
(
)
)
{
adjustPosition
(
invocation
)
;
}
write
(
invocation
.
getExecutable
(
)
.
getSimpleName
(
)
)
;
}
write
(
"("
)
;
boolean
remove
=
false
;
for
(
CtExpression
<
?
>
e
:
invocation
.
getArguments
(
)
)
{
scan
(
e
)
;
write
(
", "
)
;
remove
=
true
;
}
if
(
remove
)
{
removeLastChar
(
)
;
}
write
(
")"
)
;
exitCtExpression
(
invocation
)
;
}
