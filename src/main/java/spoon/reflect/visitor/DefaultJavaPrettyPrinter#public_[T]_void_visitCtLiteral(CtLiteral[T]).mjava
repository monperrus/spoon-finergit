public
<
T
>
void
visitCtLiteral
(
CtLiteral
<
T
>
literal
)
{
enterCtExpression
(
literal
)
;
if
(
literal
.
getValue
(
)
==
null
)
{
write
(
"null"
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
Long
)
{
write
(
literal
.
getValue
(
)
+
"L"
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
Float
)
{
write
(
literal
.
getValue
(
)
+
"F"
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
Character
)
{
write
(
"'"
)
;
boolean
mayContainsSpecialCharacter
=
true
;
SourcePosition
position
=
literal
.
getPosition
(
)
;
if
(
position
!=
null
)
{
int
stringLength
=
position
.
getSourceEnd
(
)
-
position
.
getSourceStart
(
)
-
1
;
mayContainsSpecialCharacter
=
stringLength
!=
1
;
}
writeStringLiteral
(
new
String
(
new
char
[
]
{
(
Character
)
literal
.
getValue
(
)
}
)
,
mayContainsSpecialCharacter
)
;
write
(
"'"
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
String
)
{
write
(
'\"'
)
;
boolean
mayContainsSpecialCharacters
=
true
;
SourcePosition
position
=
literal
.
getPosition
(
)
;
if
(
position
!=
null
)
{
int
stringLength
=
position
.
getSourceEnd
(
)
-
position
.
getSourceStart
(
)
-
1
;
mayContainsSpecialCharacters
=
(
(
String
)
literal
.
getValue
(
)
)
.
length
(
)
!=
stringLength
;
}
writeStringLiteral
(
(
String
)
literal
.
getValue
(
)
,
mayContainsSpecialCharacters
)
;
write
(
'\"'
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
Class
)
{
write
(
(
(
Class
<
?
>
)
literal
.
getValue
(
)
)
.
getName
(
)
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
CtReference
)
{
scan
(
(
CtReference
)
literal
.
getValue
(
)
)
;
}
else
{
write
(
literal
.
getValue
(
)
.
toString
(
)
)
;
}
exitCtExpression
(
literal
)
;
}
