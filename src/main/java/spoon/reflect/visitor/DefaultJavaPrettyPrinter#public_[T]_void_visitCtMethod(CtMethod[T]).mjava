@Override
public
<
T
>
void
visitCtMethod
(
CtMethod
<
T
>
m
)
{
elementPrinterHelper
.
writeComment
(
m
)
;
elementPrinterHelper
.
visitCtNamedElement
(
m
,
sourceCompilationUnit
)
;
elementPrinterHelper
.
writeModifiers
(
m
)
;
elementPrinterHelper
.
writeFormalTypeParameters
(
m
)
;
if
(
m
.
getFormalCtTypeParameters
(
)
.
size
(
)
>
0
)
{
printer
.
writeSpace
(
)
;
}
try
(
Writable
_context
=
context
.
modify
(
)
.
ignoreGenerics
(
false
)
)
{
scan
(
m
.
getType
(
)
)
;
}
printer
.
writeSpace
(
)
;
printer
.
writeIdentifier
(
m
.
getSimpleName
(
)
)
;
elementPrinterHelper
.
writeExecutableParameters
(
m
)
;
elementPrinterHelper
.
writeThrowsClause
(
m
)
;
if
(
m
.
getBody
(
)
!=
null
)
{
printer
.
writeSpace
(
)
;
scan
(
m
.
getBody
(
)
)
;
if
(
m
.
getBody
(
)
.
getPosition
(
)
.
isValidPosition
(
)
)
{
if
(
m
.
getBody
(
)
.
getPosition
(
)
.
getCompilationUnit
(
)
==
sourceCompilationUnit
)
{
if
(
m
.
getBody
(
)
.
getStatements
(
)
.
isEmpty
(
)
||
!
(
m
.
getBody
(
)
.
getStatements
(
)
.
get
(
m
.
getBody
(
)
.
getStatements
(
)
.
size
(
)
-
1
)
instanceof
CtReturn
)
)
{
getPrinterHelper
(
)
.
putLineNumberMapping
(
m
.
getBody
(
)
.
getPosition
(
)
.
getEndLine
(
)
)
;
}
}
else
{
getPrinterHelper
(
)
.
undefineLine
(
)
;
}
}
else
{
getPrinterHelper
(
)
.
undefineLine
(
)
;
}
}
else
{
printer
.
writeSeparator
(
";"
)
;
}
}
