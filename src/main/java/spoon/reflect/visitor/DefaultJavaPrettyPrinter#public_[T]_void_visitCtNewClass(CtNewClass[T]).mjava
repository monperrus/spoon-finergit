public
<
T
>
void
visitCtNewClass
(
CtNewClass
<
T
>
newClass
)
{
enterCtStatement
(
newClass
)
;
enterCtExpression
(
newClass
)
;
if
(
newClass
.
getTarget
(
)
!=
null
)
scan
(
newClass
.
getTarget
(
)
)
.
write
(
"."
)
;
if
(
newClass
.
getAnonymousClass
(
)
!=
null
)
{
write
(
"new "
)
;
if
(
newClass
.
getAnonymousClass
(
)
.
getSuperclass
(
)
!=
null
)
{
scan
(
newClass
.
getAnonymousClass
(
)
.
getSuperclass
(
)
)
;
}
else
if
(
newClass
.
getAnonymousClass
(
)
.
getSuperInterfaces
(
)
.
size
(
)
>
0
)
{
for
(
CtTypeReference
ref
:
newClass
.
getAnonymousClass
(
)
.
getSuperInterfaces
(
)
)
{
scan
(
ref
)
;
}
}
write
(
"("
)
;
for
(
CtExpression
<
?
>
exp
:
newClass
.
getArguments
(
)
)
{
scan
(
exp
)
;
write
(
", "
)
;
}
if
(
newClass
.
getArguments
(
)
.
size
(
)
>
0
)
removeLastChar
(
)
;
write
(
")"
)
;
scan
(
newClass
.
getAnonymousClass
(
)
)
;
}
else
{
write
(
"new "
)
.
scan
(
newClass
.
getType
(
)
)
;
if
(
newClass
.
getExecutable
(
)
!=
null
&&
newClass
.
getExecutable
(
)
.
getActualTypeArguments
(
)
!=
null
)
{
writeGenericsParameter
(
newClass
.
getExecutable
(
)
.
getActualTypeArguments
(
)
)
;
}
write
(
"("
)
;
boolean
remove
=
false
;
for
(
CtCodeElement
e
:
newClass
.
getArguments
(
)
)
{
scan
(
e
)
;
write
(
" , "
)
;
remove
=
true
;
}
if
(
remove
)
removeLastChar
(
)
;
write
(
")"
)
;
}
exitCtExpression
(
newClass
)
;
}
