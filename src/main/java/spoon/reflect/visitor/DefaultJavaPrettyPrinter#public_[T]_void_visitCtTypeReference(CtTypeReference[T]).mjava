public
<
T
>
void
visitCtTypeReference
(
CtTypeReference
<
T
>
ref
)
{
if
(
ref
.
isPrimitive
(
)
)
{
writeAnnotations
(
ref
)
;
write
(
ref
.
getSimpleName
(
)
)
;
return
;
}
if
(
importsContext
.
isImported
(
ref
)
&&
ref
.
getPackage
(
)
!=
null
)
{
writeAnnotations
(
ref
)
;
write
(
ref
.
getSimpleName
(
)
)
;
}
else
{
if
(
ref
.
getDeclaringType
(
)
!=
null
)
{
if
(
!
context
.
ignoreEnclosingClass
&&
!
ref
.
isLocalType
(
)
&&
!
ref
.
getDeclaringType
(
)
.
isAnonymous
(
)
)
{
scan
(
ref
.
getDeclaringType
(
)
)
;
write
(
"."
)
;
}
writeAnnotations
(
ref
)
;
if
(
ref
.
isLocalType
(
)
)
{
write
(
ref
.
getSimpleName
(
)
.
replaceAll
(
"^[0-9]*"
,
""
)
)
;
}
else
{
write
(
ref
.
getSimpleName
(
)
)
;
}
}
else
if
(
ref
.
getPackage
(
)
!=
null
)
{
if
(
!
CtPackage
.
TOP_LEVEL_PACKAGE_NAME
.
equals
(
ref
.
getPackage
(
)
.
getSimpleName
(
)
)
)
{
scan
(
ref
.
getPackage
(
)
)
.
write
(
CtPackage
.
PACKAGE_SEPARATOR
)
;
}
writeAnnotations
(
ref
)
;
write
(
ref
.
getSimpleName
(
)
)
;
}
else
{
write
(
ref
.
getQualifiedName
(
)
)
;
}
}
if
(
!
context
.
ignoreGenerics
)
{
writeActualTypeArguments
(
ref
)
;
}
}
