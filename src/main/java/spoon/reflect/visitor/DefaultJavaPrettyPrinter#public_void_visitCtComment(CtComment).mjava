@Override
public
void
visitCtComment
(
CtComment
comment
)
{
if
(
!
env
.
isCommentsEnabled
(
)
&&
context
.
elementStack
.
size
(
)
>
1
)
{
return
;
}
switch
(
comment
.
getCommentType
(
)
)
{
case
FILE
:
printer
.
write
(
JAVADOC_START
)
.
writeln
(
)
;
break
;
case
JAVADOC
:
printer
.
write
(
JAVADOC_START
)
.
writeln
(
)
.
writeTabs
(
)
;
break
;
case
INLINE
:
printer
.
write
(
INLINE_COMMENT_START
)
;
break
;
case
BLOCK
:
printer
.
write
(
BLOCK_COMMENT_START
)
;
break
;
}
String
content
=
comment
.
getContent
(
)
;
switch
(
comment
.
getCommentType
(
)
)
{
case
INLINE
:
printer
.
write
(
content
)
;
break
;
default
:
String
[
]
lines
=
content
.
split
(
LINE_SEPARATORS_RE
)
;
for
(
int
i
=
0
;
i
<
lines
.
length
;
i
++
)
{
String
com
=
lines
[
i
]
;
if
(
comment
.
getCommentType
(
)
==
CtComment
.
CommentType
.
BLOCK
)
{
printer
.
write
(
com
)
;
if
(
lines
.
length
>
1
)
{
printer
.
writeln
(
)
.
writeTabs
(
)
;
}
}
else
{
if
(
com
.
length
(
)
>
0
)
{
printer
.
write
(
COMMENT_STAR
+
com
)
.
writeln
(
)
.
writeTabs
(
)
;
}
else
{
printer
.
write
(
" *"
+
com
)
.
writeln
(
)
.
writeTabs
(
)
;
}
}
}
if
(
comment
instanceof
CtJavaDoc
)
{
if
(
!
(
(
CtJavaDoc
)
comment
)
.
getTags
(
)
.
isEmpty
(
)
)
{
printer
.
write
(
" *"
)
.
writeln
(
)
.
writeTabs
(
)
;
}
for
(
CtJavaDocTag
docTag
:
(
(
CtJavaDoc
)
comment
)
.
getTags
(
)
)
{
scan
(
docTag
)
;
}
}
break
;
}
switch
(
comment
.
getCommentType
(
)
)
{
case
BLOCK
:
printer
.
write
(
BLOCK_COMMENT_END
)
;
break
;
case
FILE
:
printer
.
write
(
BLOCK_COMMENT_END
)
;
break
;
case
JAVADOC
:
printer
.
write
(
BLOCK_COMMENT_END
)
;
break
;
}
}
