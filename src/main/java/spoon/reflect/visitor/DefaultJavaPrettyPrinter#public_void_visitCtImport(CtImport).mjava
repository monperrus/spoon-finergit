@Override
public
void
visitCtImport
(
CtImport
ctImport
)
{
if
(
ctImport
.
getImportKind
(
)
!=
null
)
{
printer
.
writeKeyword
(
"import"
)
;
printer
.
writeSpace
(
)
;
ctImport
.
accept
(
new
CtImportVisitor
(
)
{
@Override
public
<
T
>
void
visitTypeImport
(
CtTypeReference
<
T
>
typeReference
)
{
writeImportReference
(
typeReference
)
;
}
@Override
public
<
T
>
void
visitMethodImport
(
CtExecutableReference
<
T
>
execRef
)
{
printer
.
writeKeyword
(
"static"
)
;
printer
.
writeSpace
(
)
;
if
(
execRef
.
getDeclaringType
(
)
!=
null
)
{
writeImportReference
(
execRef
.
getDeclaringType
(
)
)
;
printer
.
writeSeparator
(
"."
)
;
}
printer
.
writeIdentifier
(
execRef
.
getSimpleName
(
)
)
;
}
@Override
public
<
T
>
void
visitFieldImport
(
CtFieldReference
<
T
>
fieldReference
)
{
printer
.
writeKeyword
(
"static"
)
;
printer
.
writeSpace
(
)
;
if
(
fieldReference
.
getDeclaringType
(
)
!=
null
)
{
writeImportReference
(
fieldReference
.
getDeclaringType
(
)
)
;
printer
.
writeSeparator
(
"."
)
;
}
printer
.
writeIdentifier
(
fieldReference
.
getSimpleName
(
)
)
;
}
@Override
public
void
visitAllTypesImport
(
CtPackageReference
packageReference
)
{
visitCtPackageReference
(
packageReference
)
;
printer
.
writeSeparator
(
"."
)
;
printer
.
writeIdentifier
(
"*"
)
;
}
@Override
public
<
T
>
void
visitAllStaticMembersImport
(
CtTypeMemberWildcardImportReference
typeReference
)
{
printer
.
writeKeyword
(
"static"
)
;
printer
.
writeSpace
(
)
;
writeImportReference
(
typeReference
.
getTypeReference
(
)
)
;
printer
.
writeSeparator
(
"."
)
;
printer
.
writeIdentifier
(
"*"
)
;
}
@Override
public
<
T
>
void
visitUnresolvedImport
(
CtUnresolvedImport
ctUnresolvedImport
)
{
if
(
ctUnresolvedImport
.
isStatic
(
)
)
{
printer
.
writeKeyword
(
"static"
)
;
printer
.
writeSpace
(
)
;
}
printer
.
writeCodeSnippet
(
ctUnresolvedImport
.
getUnresolvedReference
(
)
)
;
}
}
)
;
printer
.
writeSeparator
(
";"
)
;
}
}
