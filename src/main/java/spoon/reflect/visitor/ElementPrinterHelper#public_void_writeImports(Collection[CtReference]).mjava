public
void
writeImports
(
Collection
<
CtReference
>
imports
)
{
Set
<
String
>
setImports
=
new
HashSet
<
>
(
)
;
Set
<
String
>
setStaticImports
=
new
HashSet
<
>
(
)
;
for
(
CtReference
ref
:
imports
)
{
String
importTypeStr
;
if
(
ref
instanceof
CtTypeReference
)
{
CtTypeReference
typeRef
=
(
CtTypeReference
)
ref
;
importTypeStr
=
typeRef
.
getQualifiedName
(
)
;
if
(
isJavaLangClasses
(
importTypeStr
)
==
false
)
{
setImports
.
add
(
importTypeStr
)
;
}
}
else
if
(
ref
instanceof
CtExecutableReference
)
{
CtExecutableReference
execRef
=
(
CtExecutableReference
)
ref
;
if
(
execRef
.
getDeclaringType
(
)
!=
null
)
{
setStaticImports
.
add
(
this
.
removeInnerTypeSeparator
(
execRef
.
getDeclaringType
(
)
.
getQualifiedName
(
)
)
+
"."
+
execRef
.
getSimpleName
(
)
)
;
}
}
else
if
(
ref
instanceof
CtFieldReference
)
{
CtFieldReference
fieldRef
=
(
CtFieldReference
)
ref
;
setStaticImports
.
add
(
this
.
removeInnerTypeSeparator
(
fieldRef
.
getDeclaringType
(
)
.
getQualifiedName
(
)
)
+
"."
+
fieldRef
.
getSimpleName
(
)
)
;
}
}
List
<
String
>
sortedImports
=
new
ArrayList
<
>
(
setImports
)
;
Collections
.
sort
(
sortedImports
)
;
boolean
isFirst
=
true
;
for
(
String
importLine
:
sortedImports
)
{
if
(
isFirst
)
{
printer
.
writeln
(
)
;
printer
.
writeln
(
)
;
isFirst
=
false
;
}
printer
.
writeKeyword
(
"import"
)
.
writeSpace
(
)
;
writeQualifiedName
(
importLine
)
.
writeSeparator
(
";"
)
.
writeln
(
)
;
}
if
(
setStaticImports
.
size
(
)
>
0
)
{
if
(
isFirst
)
{
printer
.
writeln
(
)
;
}
printer
.
writeln
(
)
;
List
<
String
>
sortedStaticImports
=
new
ArrayList
<
>
(
setStaticImports
)
;
Collections
.
sort
(
sortedStaticImports
)
;
for
(
String
importLine
:
sortedStaticImports
)
{
printer
.
writeKeyword
(
"import"
)
.
writeSpace
(
)
.
writeKeyword
(
"static"
)
.
writeSpace
(
)
;
writeQualifiedName
(
importLine
)
.
writeSeparator
(
";"
)
.
writeln
(
)
;
}
}
}
