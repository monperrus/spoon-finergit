@Override
protected
void
handleTargetedExpression
(
CtTargetedExpression
<
?
,
?
>
targetedExpression
,
Context
context
,
CtRole
role
)
{
if
(
context
==
null
)
{
return
;
}
CtExpression
<
?
>
target
=
targetedExpression
.
getTarget
(
)
;
if
(
target
!=
null
&&
target
.
isImplicit
(
)
)
{
if
(
target
instanceof
CtTypeAccess
)
{
if
(
targetedExpression
instanceof
CtFieldAccess
)
{
context
.
addImport
(
(
(
CtFieldAccess
<
?
>
)
targetedExpression
)
.
getVariable
(
)
)
;
}
else
if
(
targetedExpression
instanceof
CtInvocation
)
{
CtExecutableReference
<
?
>
execRef
=
(
(
CtInvocation
<
?
>
)
targetedExpression
)
.
getExecutable
(
)
;
if
(
execRef
.
isStatic
(
)
)
{
context
.
addImport
(
execRef
)
;
}
}
}
else
if
(
targetedExpression
instanceof
CtInvocation
<
?
>
)
{
CtInvocation
<
?
>
invocation
=
(
CtInvocation
<
?
>
)
targetedExpression
;
if
(
invocation
.
getExecutable
(
)
.
isStatic
(
)
)
{
context
.
addImport
(
invocation
.
getExecutable
(
)
)
;
}
}
else
if
(
targetedExpression
instanceof
CtFieldAccess
<
?
>
)
{
CtFieldAccess
<
?
>
fieldAccess
=
(
CtFieldAccess
<
?
>
)
targetedExpression
;
if
(
fieldAccess
.
getVariable
(
)
.
isStatic
(
)
)
{
context
.
addImport
(
fieldAccess
.
getVariable
(
)
)
;
}
}
else
{
throw
new
SpoonException
(
"TODO"
)
;
}
}
}
