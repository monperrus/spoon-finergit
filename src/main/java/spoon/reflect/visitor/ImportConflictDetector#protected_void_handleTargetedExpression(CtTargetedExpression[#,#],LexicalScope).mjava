@Override
protected
void
handleTargetedExpression
(
CtTargetedExpression
<
?
,
?
>
targetedExpression
,
LexicalScope
nameScope
)
{
CtExpression
<
?
>
target
=
targetedExpression
.
getTarget
(
)
;
if
(
target
==
null
)
{
return
;
}
if
(
targetedExpression
instanceof
CtFieldAccess
<
?
>
)
{
CtFieldAccess
<
?
>
fieldAccess
=
(
CtFieldAccess
<
?
>
)
targetedExpression
;
if
(
target
.
isImplicit
(
)
)
{
final
CtField
<
?
>
field
=
fieldAccess
.
getVariable
(
)
.
getFieldDeclaration
(
)
;
if
(
field
!=
null
)
{
final
String
fieldName
=
field
.
getSimpleName
(
)
;
nameScope
.
forEachElementByName
(
fieldName
,
named
->
{
if
(
named
instanceof
CtMethod
)
{
return
null
;
}
if
(
named
==
field
)
{
return
true
;
}
target
.
setImplicit
(
false
)
;
return
false
;
}
)
;
}
}
if
(
!
target
.
isImplicit
(
)
)
{
if
(
target
instanceof
CtTypeAccess
)
{
CtTypeAccess
<
?
>
typeAccess
=
(
CtTypeAccess
<
?
>
)
target
;
CtTypeReference
<
?
>
accessedTypeRef
=
typeAccess
.
getAccessedType
(
)
;
checkConflictOfTypeReference
(
nameScope
,
accessedTypeRef
)
;
}
}
}
}
