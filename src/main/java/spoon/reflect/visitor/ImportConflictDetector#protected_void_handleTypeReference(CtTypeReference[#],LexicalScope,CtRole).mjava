@Override
protected
void
handleTypeReference
(
CtTypeReference
<
?
>
ref
,
LexicalScope
nameScope
,
CtRole
role
)
{
if
(
ref
.
isImplicit
(
)
)
{
CtTargetedExpression
<
?
,
?
>
targetedExpr
=
getParentIfType
(
getParentIfType
(
ref
,
CtTypeAccess
.
class
)
,
CtTargetedExpression
.
class
)
;
if
(
targetedExpr
instanceof
CtInvocation
<
?
>
)
{
CtInvocation
<
?
>
invocation
=
(
CtInvocation
<
?
>
)
targetedExpr
;
CtExecutableReference
<
?
>
importedReference
=
invocation
.
getExecutable
(
)
;
CtExecutable
<
?
>
importedElement
=
importedReference
.
getExecutableDeclaration
(
)
;
if
(
importedElement
==
null
)
{
return
;
}
if
(
importedElement
instanceof
CtMethod
)
{
nameScope
.
forEachElementByName
(
importedReference
.
getSimpleName
(
)
,
named
->
{
if
(
named
instanceof
CtMethod
<
?
>
)
{
if
(
isSameStaticImport
(
named
,
importedElement
)
)
{
return
true
;
}
ref
.
setImplicit
(
false
)
;
ref
.
setImplicitParent
(
true
)
;
return
false
;
}
return
null
;
}
)
;
}
}
else
if
(
targetedExpr
instanceof
CtFieldAccess
<
?
>
)
{
CtFieldAccess
<
?
>
fieldAccess
=
(
CtFieldAccess
<
?
>
)
targetedExpr
;
CtFieldReference
<
?
>
importedReference
=
fieldAccess
.
getVariable
(
)
;
CtElement
importedElement
=
importedReference
.
getFieldDeclaration
(
)
;
if
(
importedElement
==
null
)
{
return
;
}
nameScope
.
forEachElementByName
(
importedReference
.
getSimpleName
(
)
,
named
->
{
if
(
named
instanceof
CtMethod
<
?
>
)
{
return
null
;
}
if
(
named
==
importedElement
)
{
return
true
;
}
ref
.
setImplicit
(
false
)
;
ref
.
setImplicitParent
(
true
)
;
return
false
;
}
)
;
}
}
if
(
!
ref
.
isImplicit
(
)
&&
ref
.
isImplicitParent
(
)
)
{
String
refQName
=
ref
.
getQualifiedName
(
)
;
nameScope
.
forEachElementByName
(
ref
.
getSimpleName
(
)
,
named
->
{
if
(
named
instanceof
CtMethod
)
{
return
null
;
}
if
(
named
instanceof
CtType
)
{
CtType
<
?
>
type
=
(
CtType
<
?
>
)
named
;
if
(
refQName
.
equals
(
type
.
getQualifiedName
(
)
)
)
{
return
true
;
}
}
ref
.
setImplicit
(
false
)
;
ref
.
setImplicitParent
(
false
)
;
return
false
;
}
)
;
}
checkConflictOfTypeReference
(
nameScope
,
ref
)
;
}
