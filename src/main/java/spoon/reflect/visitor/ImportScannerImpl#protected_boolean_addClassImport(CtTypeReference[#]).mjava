/** 
 * Adds a type to the classImports.
 */
protected
boolean
addClassImport
(
CtTypeReference
<
?
>
ref
)
{
this
.
exploredReferences
.
add
(
ref
)
;
if
(
ref
==
null
)
{
return
false
;
}
if
(
targetType
!=
null
&&
targetType
.
getSimpleName
(
)
.
equals
(
ref
.
getSimpleName
(
)
)
&&
!
targetType
.
equals
(
ref
)
)
{
return
false
;
}
if
(
classImports
.
containsKey
(
ref
.
getSimpleName
(
)
)
)
{
return
isImportedInClassImports
(
ref
)
;
}
if
(
ref
.
getPackage
(
)
==
null
||
ref
.
getPackage
(
)
.
isUnnamedPackage
(
)
)
{
return
false
;
}
if
(
targetType
!=
null
&&
targetType
.
canAccess
(
ref
)
==
false
)
{
return
false
;
}
if
(
this
.
isThereAnotherClassWithSameNameInAnotherPackage
(
ref
)
)
{
return
false
;
}
if
(
targetType
!=
null
)
{
try
{
CtElement
parent
=
ref
.
getParent
(
)
;
if
(
parent
!=
null
)
{
parent
=
parent
.
getParent
(
)
;
if
(
parent
!=
null
)
{
if
(
(
parent
instanceof
CtFieldAccess
)
||
(
parent
instanceof
CtExecutable
)
||
(
parent
instanceof
CtInvocation
)
)
{
CtTypeReference
declaringType
;
CtReference
reference
;
CtPackageReference
pack
=
targetType
.
getPackage
(
)
;
if
(
parent
instanceof
CtFieldAccess
)
{
CtFieldAccess
field
=
(
CtFieldAccess
)
parent
;
CtFieldReference
localReference
=
field
.
getVariable
(
)
;
declaringType
=
localReference
.
getDeclaringType
(
)
;
reference
=
localReference
;
}
else
if
(
parent
instanceof
CtExecutable
)
{
CtExecutable
exec
=
(
CtExecutable
)
parent
;
CtExecutableReference
localReference
=
exec
.
getReference
(
)
;
declaringType
=
localReference
.
getDeclaringType
(
)
;
reference
=
localReference
;
}
else
if
(
parent
instanceof
CtInvocation
)
{
CtInvocation
invo
=
(
CtInvocation
)
parent
;
CtExecutableReference
localReference
=
invo
.
getExecutable
(
)
;
declaringType
=
localReference
.
getDeclaringType
(
)
;
reference
=
localReference
;
}
else
{
declaringType
=
null
;
reference
=
null
;
}
if
(
reference
!=
null
&&
isImported
(
reference
)
)
{
if
(
declaringType
!=
null
)
{
if
(
declaringType
.
getPackage
(
)
!=
null
&&
!
declaringType
.
getPackage
(
)
.
isUnnamedPackage
(
)
)
{
if
(
!
"java.lang"
.
equals
(
declaringType
.
getPackage
(
)
.
getSimpleName
(
)
)
)
{
if
(
declaringType
.
getPackage
(
)
.
getSimpleName
(
)
.
equals
(
pack
.
getSimpleName
(
)
)
)
{
classImports
.
put
(
ref
.
getSimpleName
(
)
,
ref
)
;
return
true
;
}
}
}
}
return
false
;
}
}
}
}
}
catch
(
ParentNotInitializedException
e
)
{
}
CtPackageReference
pack
=
targetType
.
getPackage
(
)
;
if
(
pack
!=
null
&&
ref
.
getPackage
(
)
!=
null
&&
!
ref
.
getPackage
(
)
.
isUnnamedPackage
(
)
)
{
if
(
"java.lang"
.
equals
(
ref
.
getPackage
(
)
.
getSimpleName
(
)
)
)
{
return
false
;
}
else
{
if
(
ref
.
getPackage
(
)
.
getSimpleName
(
)
.
equals
(
pack
.
getSimpleName
(
)
)
)
{
return
false
;
}
}
}
}
classImports
.
put
(
ref
.
getSimpleName
(
)
,
ref
)
;
return
true
;
}
