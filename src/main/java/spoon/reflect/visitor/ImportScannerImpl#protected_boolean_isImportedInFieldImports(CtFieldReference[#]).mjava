protected
boolean
isImportedInFieldImports
(
CtFieldReference
<
?
>
ref
)
{
for
(
CtImport
ctImport
:
this
.
usedImport
.
keySet
(
)
)
{
switch
(
ctImport
.
getImportKind
(
)
)
{
case
FIELD
:
if
(
ctImport
.
getReference
(
)
.
equals
(
ref
)
)
{
return
this
.
setImportUsed
(
ctImport
)
;
}
break
;
case
ALL_STATIC_MEMBERS
:
String
typeFieldQualifiedName
=
ref
.
getQualifiedName
(
)
;
String
typeImportQualifiedName
=
ctImport
.
getReference
(
)
.
getSimpleName
(
)
;
typeFieldQualifiedName
=
typeFieldQualifiedName
.
substring
(
0
,
typeFieldQualifiedName
.
lastIndexOf
(
"."
)
)
;
typeImportQualifiedName
=
typeImportQualifiedName
.
substring
(
0
,
typeImportQualifiedName
.
lastIndexOf
(
"."
)
)
;
if
(
typeFieldQualifiedName
.
equals
(
typeImportQualifiedName
)
)
{
return
this
.
setImportUsed
(
ctImport
)
;
}
break
;
}
}
if
(
!
(
ref
.
isImplicit
(
)
)
&&
fieldImports
.
containsKey
(
ref
.
getSimpleName
(
)
)
)
{
CtFieldReference
<
?
>
exist
=
fieldImports
.
get
(
ref
.
getSimpleName
(
)
)
;
try
{
if
(
exist
.
getFieldDeclaration
(
)
!=
null
&&
exist
.
getFieldDeclaration
(
)
.
equals
(
ref
.
getFieldDeclaration
(
)
)
)
{
return
true
;
}
}
catch
(
SpoonClassNotFoundException
notfound
)
{
return
false
;
}
}
return
false
;
}
