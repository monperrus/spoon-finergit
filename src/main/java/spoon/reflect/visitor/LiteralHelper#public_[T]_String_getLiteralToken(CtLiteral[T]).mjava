/** 
 * @param literal to be converted literal
 * @return source code representation of the literal
 */
public
static
<
T
>
String
getLiteralToken
(
CtLiteral
<
T
>
literal
)
{
if
(
literal
.
getValue
(
)
==
null
)
{
return
"null"
;
}
else
if
(
literal
.
getValue
(
)
instanceof
Integer
)
{
return
getBasedString
(
(
Integer
)
literal
.
getValue
(
)
,
literal
.
getBase
(
)
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
Long
)
{
return
getBasedString
(
(
Long
)
literal
.
getValue
(
)
,
literal
.
getBase
(
)
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
Float
)
{
return
getBasedString
(
(
Float
)
literal
.
getValue
(
)
,
literal
.
getBase
(
)
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
Double
)
{
return
getBasedString
(
(
Double
)
literal
.
getValue
(
)
,
literal
.
getBase
(
)
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
Character
)
{
boolean
mayContainsSpecialCharacter
=
true
;
SourcePosition
position
=
literal
.
getPosition
(
)
;
if
(
position
.
isValidPosition
(
)
)
{
int
stringLength
=
position
.
getSourceEnd
(
)
-
position
.
getSourceStart
(
)
-
1
;
mayContainsSpecialCharacter
=
stringLength
!=
1
;
}
StringBuilder
sb
=
new
StringBuilder
(
10
)
;
sb
.
append
(
'\''
)
;
appendCharLiteral
(
sb
,
(
Character
)
literal
.
getValue
(
)
,
mayContainsSpecialCharacter
)
;
sb
.
append
(
'\''
)
;
return
sb
.
toString
(
)
;
}
else
if
(
literal
.
getValue
(
)
instanceof
String
)
{
boolean
mayContainsSpecialCharacters
=
true
;
SourcePosition
position
=
literal
.
getPosition
(
)
;
if
(
position
.
isValidPosition
(
)
)
{
int
stringLength
=
position
.
getSourceEnd
(
)
-
position
.
getSourceStart
(
)
-
1
;
mayContainsSpecialCharacters
=
(
(
String
)
literal
.
getValue
(
)
)
.
length
(
)
!=
stringLength
;
}
return
"\""
+
getStringLiteral
(
(
String
)
literal
.
getValue
(
)
,
mayContainsSpecialCharacters
)
+
"\""
;
}
else
if
(
literal
.
getValue
(
)
instanceof
Class
)
{
return
(
(
Class
<
?
>
)
literal
.
getValue
(
)
)
.
getName
(
)
;
}
else
{
return
literal
.
getValue
(
)
.
toString
(
)
;
}
}
