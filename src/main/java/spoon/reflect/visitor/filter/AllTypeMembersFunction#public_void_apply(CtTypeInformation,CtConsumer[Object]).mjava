@Override
public
void
apply
(
CtTypeInformation
input
,
final
CtConsumer
<
Object
>
outputConsumer
)
{
String
inputQName
=
input
.
getQualifiedName
(
)
;
final
CtQuery
q
=
(
(
CtQueryable
)
input
)
.
map
(
new
SuperInheritanceHierarchyFunction
(
distinctSet
==
null
?
new
HashSet
<
>
(
)
:
distinctSet
)
.
includingSelf
(
true
)
)
;
q
.
forEach
(
new
CtConsumer
<
CtType
<
?
>
>
(
)
{
@Override
public
void
accept
(
CtType
<
?
>
type
)
{
boolean
isInputType
=
inputQName
.
equals
(
type
.
getQualifiedName
(
)
)
;
loop
:
for
(
CtTypeMember
typeMember
:
type
.
getTypeMembers
(
)
)
{
if
(
memberClass
==
null
||
memberClass
.
isInstance
(
typeMember
)
)
{
switch
(
mode
)
{
case
ALL
:
break
;
case
SKIP_PRIVATE
:
if
(
typeMember
.
hasModifier
(
ModifierKind
.
PRIVATE
)
&&
!
isInputType
)
{
continue
loop
;
}
break
;
default
:
throw
new
SpoonException
(
"Unexpected mode "
+
mode
)
;
}
outputConsumer
.
accept
(
typeMember
)
;
}
if
(
query
.
isTerminated
(
)
)
{
q
.
terminate
(
)
;
}
}
}
}
)
;
}
