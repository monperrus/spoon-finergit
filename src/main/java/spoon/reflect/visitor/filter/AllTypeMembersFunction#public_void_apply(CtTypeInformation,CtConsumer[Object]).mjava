@Override
public
void
apply
(
CtTypeInformation
input
,
final
CtConsumer
<
Object
>
outputConsumer
)
{
final
CtQuery
q
=
(
(
CtQueryable
)
input
)
.
map
(
new
SuperInheritanceHierarchyFunction
(
distinctSet
==
null
?
new
HashSet
<
>
(
)
:
distinctSet
)
.
includingSelf
(
true
)
)
;
q
.
forEach
(
new
CtConsumer
<
CtType
<
?
>
>
(
)
{
@Override
public
void
accept
(
CtType
<
?
>
type
)
{
for
(
CtTypeMember
typeMember
:
type
.
getTypeMembers
(
)
)
{
if
(
memberClass
==
null
||
memberClass
.
isInstance
(
typeMember
)
)
{
outputConsumer
.
accept
(
typeMember
)
;
}
if
(
query
.
isTerminated
(
)
)
{
q
.
terminate
(
)
;
}
}
}
}
)
;
}
