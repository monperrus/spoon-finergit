/** 
 * Defines the matching using {@link spoon.reflect.visitor.filter.FilteringOperator}.
 */
public
boolean
matches
(
T
element
)
{
switch
(
operator
)
{
case
INTERSECTION
:
for
(
Filter
<
T
>
f
:
filters
)
{
if
(
!
f
.
matches
(
element
)
)
return
false
;
}
return
true
;
case
UNION
:
for
(
Filter
<
T
>
f
:
filters
)
{
if
(
f
.
matches
(
element
)
)
return
true
;
}
return
false
;
case
SUBSTRACTION
:
if
(
filters
.
length
==
0
)
return
false
;
if
(
!
filters
[
0
]
.
matches
(
element
)
)
return
false
;
for
(
int
i
=
1
;
i
<
filters
.
length
;
i
++
)
{
if
(
filters
[
i
]
.
matches
(
element
)
)
return
false
;
}
return
true
;
default
:
return
false
;
}
}
