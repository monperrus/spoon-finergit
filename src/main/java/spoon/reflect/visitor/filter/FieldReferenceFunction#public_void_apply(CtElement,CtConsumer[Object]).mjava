@Override
public
void
apply
(
CtElement
fieldOrScope
,
CtConsumer
<
Object
>
outputConsumer
)
{
CtElement
scope
;
CtField
<
?
>
field
=
this
.
field
;
if
(
field
==
null
)
{
if
(
fieldOrScope
instanceof
CtField
)
{
field
=
(
CtField
<
?
>
)
fieldOrScope
;
}
else
{
throw
new
SpoonException
(
"The input of FieldReferenceFunction must be a CtField but is "
+
fieldOrScope
.
getClass
(
)
.
getSimpleName
(
)
)
;
}
scope
=
field
.
getFactory
(
)
.
getModel
(
)
.
getRootPackage
(
)
;
}
else
{
scope
=
fieldOrScope
;
}
scope
.
filterChildren
(
new
DirectReferenceFilter
<
CtFieldReference
<
?
>
>
(
field
.
getReference
(
)
)
)
.
forEach
(
outputConsumer
)
;
}
