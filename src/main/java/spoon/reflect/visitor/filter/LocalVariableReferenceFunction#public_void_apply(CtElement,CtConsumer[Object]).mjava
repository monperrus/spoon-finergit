@Override
public
void
apply
(
final
CtElement
scope
,
CtConsumer
<
Object
>
outputConsumer
)
{
CtVariable
<
?
>
var
=
targetVariable
;
if
(
var
==
null
)
{
if
(
variableClass
.
isInstance
(
scope
)
)
{
var
=
(
CtVariable
<
?
>
)
scope
;
}
else
{
throw
new
SpoonException
(
"The input of "
+
getClass
(
)
.
getSimpleName
(
)
+
" must be a "
+
variableClass
.
getSimpleName
(
)
+
" but is "
+
scope
.
getClass
(
)
.
getSimpleName
(
)
)
;
}
}
final
CtVariable
<
?
>
variable
=
var
;
final
String
simpleName
=
variable
.
getSimpleName
(
)
;
final
Context
context
=
new
Context
(
)
;
CtQuery
scopeQuery
;
if
(
scope
==
variable
)
{
scopeQuery
=
createScopeQuery
(
variable
,
scope
,
context
)
;
}
else
{
final
CtElement
variableParent
=
variable
.
getParent
(
)
;
if
(
scope
.
map
(
new
ParentFunction
(
)
)
.
select
(
new
Filter
<
CtElement
>
(
)
{
@Override
public
boolean
matches
(
CtElement
element
)
{
if
(
element
instanceof
CtType
)
{
context
.
nrTypes
++
;
}
return
variableParent
==
element
;
}
}
)
.
first
(
)
==
null
)
{
throw
new
SpoonException
(
"Cannot search for references of variable in wrong scope."
)
;
}
scopeQuery
=
scope
.
map
(
new
CtScannerFunction
(
)
.
setListener
(
context
)
)
;
}
scopeQuery
.
select
(
new
Filter
<
CtElement
>
(
)
{
@Override
public
boolean
matches
(
CtElement
element
)
{
if
(
variableReferenceClass
.
isInstance
(
element
)
)
{
CtVariableReference
<
?
>
varRef
=
(
CtVariableReference
<
?
>
)
element
;
if
(
simpleName
.
equals
(
varRef
.
getSimpleName
(
)
)
)
{
if
(
context
.
hasLocalType
(
)
)
{
return
variable
==
varRef
.
getDeclaration
(
)
;
}
return
true
;
}
}
return
false
;
}
}
)
.
forEach
(
outputConsumer
)
;
}
