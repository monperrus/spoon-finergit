@Override
public
void
apply
(
final
CtLocalVariable
<
?
>
localVariable
,
CtConsumer
<
Object
>
outputConsumer
)
{
final
String
simpleName
=
localVariable
.
getSimpleName
(
)
;
class
Context
{
boolean
hasLocalType
=
false
;
}
final
Context
context
=
new
Context
(
)
;
localVariable
.
map
(
new
LocalVariableScopeFunction
(
)
)
.
select
(
new
Filter
<
CtElement
>
(
)
{
@Override
public
boolean
matches
(
CtElement
element
)
{
if
(
element
instanceof
CtType
)
{
context
.
hasLocalType
=
true
;
}
else
if
(
element
instanceof
CtLocalVariableReference
<
?
>
)
{
CtLocalVariableReference
<
?
>
localVarRef
=
(
CtLocalVariableReference
<
?
>
)
element
;
if
(
simpleName
.
equals
(
localVarRef
.
getSimpleName
(
)
)
)
{
if
(
context
.
hasLocalType
)
{
return
localVariable
==
localVarRef
.
getDeclaration
(
)
;
}
return
true
;
}
}
return
false
;
}
}
)
.
forEach
(
outputConsumer
)
;
}
