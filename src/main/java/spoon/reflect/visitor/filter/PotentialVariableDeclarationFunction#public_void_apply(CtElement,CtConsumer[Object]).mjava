@Override
public
void
apply
(
CtElement
input
,
CtConsumer
<
Object
>
outputConsumer
)
{
CtQuery
siblingsQuery
=
input
.
getFactory
(
)
.
createQuery
(
)
.
map
(
new
SiblingsFunction
(
)
.
mode
(
SiblingsFunction
.
Mode
.
PREVIOUS
)
)
;
CtElement
scopeElement
=
input
;
while
(
scopeElement
!=
null
&&
!
(
scopeElement
instanceof
CtPackage
)
&&
scopeElement
.
isParentInitialized
(
)
)
{
CtElement
parent
=
scopeElement
.
getParent
(
)
;
if
(
parent
instanceof
CtType
<
?
>
)
{
if
(
includingFields
)
{
Collection
<
CtFieldReference
<
?
>
>
allFields
=
(
(
CtType
<
?
>
)
parent
)
.
getAllFields
(
)
;
for
(
CtFieldReference
<
?
>
fieldReference
:
allFields
)
{
outputConsumer
.
accept
(
fieldReference
.
getFieldDeclaration
(
)
)
;
}
}
}
else
if
(
parent
instanceof
CtBodyHolder
||
parent
instanceof
CtStatementList
)
{
siblingsQuery
.
setInput
(
scopeElement
)
.
forEach
(
outputConsumer
)
;
if
(
parent
instanceof
CtCatch
)
{
CtCatch
ctCatch
=
(
CtCatch
)
parent
;
outputConsumer
.
accept
(
ctCatch
.
getParameter
(
)
)
;
}
else
if
(
parent
instanceof
CtExecutable
)
{
CtExecutable
<
?
>
exec
=
(
CtExecutable
<
?
>
)
parent
;
for
(
CtParameter
<
?
>
param
:
exec
.
getParameters
(
)
)
{
outputConsumer
.
accept
(
param
)
;
}
}
}
scopeElement
=
parent
;
}
}
