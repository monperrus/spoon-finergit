@Override
public
void
apply
(
CtTypeInformation
input
,
final
CtConsumer
<
Object
>
outputConsumer
)
{
final
SubInheritanceHierarchyResolver
fnc
=
new
SubInheritanceHierarchyResolver
(
(
(
CtElement
)
input
)
.
getFactory
(
)
.
getModel
(
)
.
getRootPackage
(
)
)
.
failOnClassNotFound
(
failOnClassNotFound
)
.
includingInterfaces
(
includingInterfaces
)
;
if
(
includingSelf
)
{
if
(
input
instanceof
CtTypeReference
)
{
outputConsumer
.
accept
(
(
(
CtTypeReference
<
?
>
)
input
)
.
getTypeDeclaration
(
)
)
;
}
else
{
outputConsumer
.
accept
(
(
(
CtType
<
?
>
)
input
)
)
;
}
}
fnc
.
addSuperType
(
input
)
;
fnc
.
forEachSubTypeInPackage
(
new
CtConsumer
<
CtType
>
(
)
{
@Override
public
void
accept
(
CtType
typeInfo
)
{
outputConsumer
.
accept
(
typeInfo
)
;
if
(
query
.
isTerminated
(
)
)
{
}
}
}
)
;
}
