/** 
 * calls `outputConsumer.accept(interface)` for all superInterfaces of type recursively.
 * @return false if query is terminated
 */
protected
boolean
visitSuperInterfaces
(
CtType
<
?
>
type
,
CtConsumer
<
Object
>
outputConsumer
)
{
for
(
CtTypeReference
<
?
>
ifaceRef
:
type
.
getSuperInterfaces
(
)
)
{
if
(
canVisitType
(
ifaceRef
.
getQualifiedName
(
)
)
==
false
)
{
continue
;
}
CtType
<
?
>
superType
;
try
{
superType
=
ifaceRef
.
getTypeDeclaration
(
)
;
}
catch
(
SpoonClassNotFoundException
e
)
{
if
(
failOnClassNotFound
)
{
throw
e
;
}
continue
;
}
if
(
superType
==
null
)
{
continue
;
}
outputConsumer
.
accept
(
superType
)
;
if
(
query
.
isTerminated
(
)
)
{
return
false
;
}
if
(
visitSuperInterfaces
(
superType
,
outputConsumer
)
==
false
)
{
return
false
;
}
}
return
true
;
}
