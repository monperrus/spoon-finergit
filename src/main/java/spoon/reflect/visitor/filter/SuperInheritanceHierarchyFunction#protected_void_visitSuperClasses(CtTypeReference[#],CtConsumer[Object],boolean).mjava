/** 
 * calls `outputConsumer.accept(superClass)` for all super classes of superType.
 * @param superTypeRef the reference to a class. This method is called only for classes. Never for interface
 * @param includingInterfaces if true then all superInterfaces of each type are sent to `outputConsumer` too.
 */
protected
void
visitSuperClasses
(
CtTypeReference
<
?
>
superTypeRef
,
CtConsumer
<
Object
>
outputConsumer
,
boolean
includingInterfaces
)
{
if
(
Object
.
class
.
getName
(
)
.
equals
(
superTypeRef
.
getQualifiedName
(
)
)
)
{
return
;
}
if
(
includingInterfaces
)
{
visitSuperInterfaces
(
superTypeRef
,
outputConsumer
)
;
if
(
query
.
isTerminated
(
)
)
{
return
;
}
}
CtTypeReference
<
?
>
superClassRef
=
superTypeRef
.
getSuperclass
(
)
;
if
(
superClassRef
==
null
)
{
superClassRef
=
superTypeRef
.
getFactory
(
)
.
Type
(
)
.
OBJECT
;
}
sendResultWithListener
(
superClassRef
,
true
,
outputConsumer
,
(
classRef
)
->
visitSuperClasses
(
classRef
,
outputConsumer
,
includingInterfaces
)
)
;
}
