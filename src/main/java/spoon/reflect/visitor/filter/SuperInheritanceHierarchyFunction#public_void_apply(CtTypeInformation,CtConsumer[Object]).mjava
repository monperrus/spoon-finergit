@Override
public
void
apply
(
CtTypeInformation
input
,
CtConsumer
<
Object
>
outputConsumer
)
{
CtTypeReference
<
?
>
typeRef
;
CtType
<
?
>
type
;
boolean
isClass
;
if
(
input
instanceof
CtType
)
{
type
=
(
CtType
<
?
>
)
input
;
typeRef
=
type
.
getReference
(
)
;
}
else
{
typeRef
=
(
CtTypeReference
<
?
>
)
input
;
try
{
type
=
typeRef
.
getTypeDeclaration
(
)
;
}
catch
(
SpoonClassNotFoundException
e
)
{
if
(
typeRef
.
getFactory
(
)
.
getEnvironment
(
)
.
getNoClasspath
(
)
==
false
)
{
throw
e
;
}
type
=
null
;
}
}
isClass
=
type
instanceof
CtClass
;
if
(
isClass
==
false
&&
includingInterfaces
==
false
)
{
return
;
}
ScanningMode
mode
=
enter
(
typeRef
,
isClass
)
;
if
(
mode
==
SKIP_ALL
)
{
return
;
}
if
(
includingSelf
)
{
sendResult
(
typeRef
,
outputConsumer
)
;
if
(
query
.
isTerminated
(
)
)
{
mode
=
SKIP_CHILDREN
;
}
}
if
(
mode
==
NORMAL
)
{
if
(
isClass
==
false
)
{
visitSuperInterfaces
(
typeRef
,
outputConsumer
)
;
if
(
interfacesExtendObject
)
{
sendResultWithListener
(
typeRef
.
getFactory
(
)
.
Type
(
)
.
OBJECT
,
isClass
,
outputConsumer
,
(
ref
)
->
{
}
)
;
}
}
else
{
visitSuperClasses
(
typeRef
,
outputConsumer
,
includingInterfaces
)
;
}
}
exit
(
typeRef
,
isClass
)
;
}
