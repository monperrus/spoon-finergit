@SuppressWarnings("unchecked")
private
<
T
>
T
clone
(
T
object
,
Stack
<
CtElement
>
cloningContext
)
{
if
(
object
==
null
)
{
return
null
;
}
T
result
=
null
;
try
{
if
(
!
(
object
instanceof
CtElement
)
)
{
return
object
;
}
if
(
object
instanceof
Cloneable
)
{
return
(
T
)
object
.
getClass
(
)
.
getMethod
(
"clone"
)
.
invoke
(
object
)
;
}
if
(
object
.
getClass
(
)
.
isEnum
(
)
)
{
return
object
;
}
result
=
(
T
)
object
.
getClass
(
)
.
newInstance
(
)
;
if
(
result
instanceof
CtElement
)
{
cloningContext
.
push
(
(
CtElement
)
result
)
;
}
for
(
Field
f
:
RtHelper
.
getAllFields
(
object
.
getClass
(
)
)
)
{
f
.
setAccessible
(
true
)
;
if
(
!
f
.
getName
(
)
.
equals
(
"parent"
)
)
{
Object
fieldValue
=
f
.
get
(
object
)
;
if
(
!
Modifier
.
isFinal
(
f
.
getModifiers
(
)
)
&&
!
Modifier
.
isStatic
(
f
.
getModifiers
(
)
)
)
{
if
(
fieldValue
instanceof
Collection
)
{
Collection
<
Object
>
c
;
if
(
fieldValue
==
CtElementImpl
.
emptyList
(
)
||
fieldValue
==
CtElementImpl
.
emptySet
(
)
)
{
c
=
(
Collection
<
Object
>
)
fieldValue
;
}
else
{
c
=
(
Collection
<
Object
>
)
fieldValue
.
getClass
(
)
.
getMethod
(
"clone"
)
.
invoke
(
fieldValue
)
;
c
.
clear
(
)
;
for
(
Object
o
:
(
Collection
<
Object
>
)
fieldValue
)
{
c
.
add
(
clone
(
o
,
cloningContext
)
)
;
}
}
f
.
set
(
result
,
c
)
;
}
else
if
(
fieldValue
instanceof
Map
)
{
Map
<
Object
,
Object
>
m
=
(
Map
<
Object
,
Object
>
)
fieldValue
.
getClass
(
)
.
getMethod
(
"clone"
)
.
invoke
(
fieldValue
)
;
f
.
set
(
result
,
m
)
;
for
(
Entry
<
?
,
?
>
e
:
(
(
Map
<
?
,
?
>
)
fieldValue
)
.
entrySet
(
)
)
{
m
.
put
(
e
.
getKey
(
)
,
clone
(
e
.
getValue
(
)
,
cloningContext
)
)
;
}
}
else
if
(
(
object
instanceof
CtReference
)
&&
(
fieldValue
instanceof
CtElement
)
&&
!
(
fieldValue
instanceof
CtReference
)
)
{
f
.
set
(
result
,
fieldValue
)
;
}
else
{
f
.
set
(
result
,
clone
(
f
.
get
(
object
)
,
cloningContext
)
)
;
}
}
}
}
if
(
result
instanceof
CtElement
)
{
cloningContext
.
pop
(
)
;
if
(
cloningContext
.
isEmpty
(
)
)
{
(
(
CtElement
)
result
)
.
setParent
(
null
)
;
}
else
{
(
(
CtElement
)
result
)
.
setParent
(
cloningContext
.
peek
(
)
)
;
}
}
}
catch
(
Exception
e
)
{
Launcher
.
LOGGER
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
return
result
;
}
