/** 
 * Creates the Java file associated to the given element. Splits top-level classes in different files (even if they are in the same file in the original sources).
 */
public
void
createJavaFile
(
CtSimpleType
<
?
>
element
)
{
getEnvironment
(
)
.
debugMessage
(
"printing "
+
element
.
getQualifiedName
(
)
+
" to "
+
directory
)
;
if
(
!
element
.
isTopLevel
(
)
)
{
throw
new
IllegalArgumentException
(
)
;
}
;
CompilationUnit
cu
=
null
;
if
(
element
.
getPosition
(
)
!=
null
)
{
cu
=
element
.
getPosition
(
)
.
getCompilationUnit
(
)
;
if
(
cu
==
null
)
{
throw
new
IllegalStateException
(
)
;
}
}
List
<
CtSimpleType
<
?
>
>
toBePrinted
=
new
ArrayList
<
CtSimpleType
<
?
>
>
(
)
;
toBePrinted
.
add
(
element
)
;
PrettyPrinter
printer
=
null
;
if
(
getEnvironment
(
)
.
isUsingSourceCodeFragments
(
)
)
{
try
{
printer
=
new
FragmentDrivenJavaPrettyPrinter
(
getEnvironment
(
)
,
element
.
getPosition
(
)
.
getCompilationUnit
(
)
)
;
}
catch
(
Exception
e
)
{
Launcher
.
logger
.
error
(
e
.
getMessage
(
)
,
e
)
;
printer
=
null
;
}
}
if
(
printer
==
null
)
{
printer
=
new
DefaultJavaPrettyPrinter
(
getEnvironment
(
)
)
;
printer
.
calculate
(
cu
,
toBePrinted
)
;
}
CtPackage
pack
=
element
.
getPackage
(
)
;
PrintStream
stream
=
null
;
File
packageDir
;
if
(
pack
.
getQualifiedName
(
)
.
equals
(
CtPackage
.
TOP_LEVEL_PACKAGE_NAME
)
)
{
packageDir
=
new
File
(
directory
.
getAbsolutePath
(
)
)
;
}
else
{
packageDir
=
new
File
(
directory
.
getAbsolutePath
(
)
+
File
.
separatorChar
+
pack
.
getQualifiedName
(
)
.
replace
(
'.'
,
File
.
separatorChar
)
)
;
}
if
(
!
packageDir
.
exists
(
)
)
{
if
(
!
packageDir
.
mkdirs
(
)
)
throw
new
RuntimeException
(
"Error creating output directory"
)
;
}
if
(
writePackageAnnotationFile
&&
element
.
getPackage
(
)
.
getAnnotations
(
)
.
size
(
)
>
0
)
{
File
packageAnnot
=
new
File
(
packageDir
.
getAbsolutePath
(
)
+
File
.
separatorChar
+
DefaultJavaPrettyPrinter
.
JAVA_PACKAGE_DECLARATION
)
;
if
(
!
printedFiles
.
contains
(
packageAnnot
)
)
printedFiles
.
add
(
packageAnnot
)
;
try
{
stream
=
new
PrintStream
(
packageAnnot
)
;
stream
.
println
(
printer
.
getPackageDeclaration
(
)
)
;
stream
.
close
(
)
;
}
catch
(
FileNotFoundException
e
)
{
Launcher
.
logger
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
finally
{
if
(
stream
!=
null
)
stream
.
close
(
)
;
}
}
try
{
File
file
=
new
File
(
packageDir
.
getAbsolutePath
(
)
+
File
.
separatorChar
+
element
.
getSimpleName
(
)
+
DefaultJavaPrettyPrinter
.
JAVA_FILE_EXTENSION
)
;
file
.
createNewFile
(
)
;
if
(
!
printedFiles
.
contains
(
file
)
)
{
printedFiles
.
add
(
file
)
;
}
stream
=
new
PrintStream
(
file
)
;
stream
.
print
(
printer
.
getResult
(
)
)
;
for
(
CtSimpleType
<
?
>
t
:
toBePrinted
)
{
lineNumberMappings
.
put
(
t
.
getQualifiedName
(
)
,
printer
.
getLineNumberMapping
(
)
)
;
}
stream
.
close
(
)
;
}
catch
(
FileNotFoundException
e
)
{
Launcher
.
logger
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
catch
(
IOException
e
)
{
Launcher
.
logger
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
finally
{
if
(
stream
!=
null
)
stream
.
close
(
)
;
}
}
