protected
void
generateProcessedSourceFilesUsingCUs
(
)
throws
Exception
{
factory
.
getEnvironment
(
)
.
debugMessage
(
"Generating source using compilation units..."
)
;
if
(
outputDirectory
==
null
)
throw
new
RuntimeException
(
"You should set output directory before generating source files"
)
;
if
(
outputDirectory
.
isFile
(
)
)
throw
new
RuntimeException
(
"Output must be a directory"
)
;
if
(
!
outputDirectory
.
exists
(
)
)
{
if
(
!
outputDirectory
.
mkdirs
(
)
)
throw
new
RuntimeException
(
"Error creating output directory"
)
;
}
outputDirectory
=
outputDirectory
.
getCanonicalFile
(
)
;
factory
.
getEnvironment
(
)
.
debugMessage
(
"Generating source files to: "
+
outputDirectory
)
;
List
<
File
>
printedFiles
=
new
ArrayList
<
File
>
(
)
;
for
(
spoon
.
reflect
.
cu
.
CompilationUnit
cu
:
factory
.
CompilationUnit
(
)
.
getMap
(
)
.
values
(
)
)
{
factory
.
getEnvironment
(
)
.
debugMessage
(
"Generating source for compilation unit: "
+
cu
.
getFile
(
)
)
;
CtSimpleType
<
?
>
element
=
cu
.
getMainType
(
)
;
CtPackage
pack
=
element
.
getPackage
(
)
;
File
packageDir
;
if
(
pack
.
getQualifiedName
(
)
.
equals
(
CtPackage
.
TOP_LEVEL_PACKAGE_NAME
)
)
{
packageDir
=
new
File
(
outputDirectory
.
getAbsolutePath
(
)
)
;
}
else
{
packageDir
=
new
File
(
outputDirectory
.
getAbsolutePath
(
)
+
File
.
separatorChar
+
pack
.
getQualifiedName
(
)
.
replace
(
'.'
,
File
.
separatorChar
)
)
;
}
if
(
!
packageDir
.
exists
(
)
)
{
if
(
!
packageDir
.
mkdirs
(
)
)
throw
new
RuntimeException
(
"Error creating output directory"
)
;
}
try
{
File
file
=
new
File
(
packageDir
.
getAbsolutePath
(
)
+
File
.
separatorChar
+
element
.
getSimpleName
(
)
+
DefaultJavaPrettyPrinter
.
JAVA_FILE_EXTENSION
)
;
file
.
createNewFile
(
)
;
InputStream
is
=
getCompilationUnitInputStream
(
cu
.
getFile
(
)
.
getPath
(
)
)
;
IOUtils
.
copy
(
is
,
new
FileOutputStream
(
file
)
)
;
if
(
!
printedFiles
.
contains
(
file
)
)
{
printedFiles
.
add
(
file
)
;
}
}
catch
(
Exception
e
)
{
Spoon
.
logger
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
}
}
