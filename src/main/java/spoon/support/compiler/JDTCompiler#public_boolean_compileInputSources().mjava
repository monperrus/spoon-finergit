@Override
public
boolean
compileInputSources
(
)
throws
Exception
{
factory
.
getEnvironment
(
)
.
debugMessage
(
"compiling input sources: "
+
sources
.
getAllJavaFiles
(
)
)
;
long
t
=
System
.
currentTimeMillis
(
)
;
javaCompliance
=
factory
.
getEnvironment
(
)
.
getComplianceLevel
(
)
;
destinationPath
=
getDestinationDirectory
(
)
.
getAbsolutePath
(
)
;
setClasspath
(
factory
.
getEnvironment
(
)
.
getClasspath
(
)
)
;
List
<
String
>
args
=
new
ArrayList
<
String
>
(
)
;
args
.
add
(
"-1."
+
javaCompliance
)
;
args
.
add
(
"-preserveAllLocals"
)
;
args
.
add
(
"-enableJavadoc"
)
;
args
.
add
(
"-noExit"
)
;
ClassLoader
currentClassLoader
=
Thread
.
currentThread
(
)
.
getContextClassLoader
(
)
;
String
finalClassPath
=
null
;
if
(
classpath
!=
null
)
{
finalClassPath
=
classpath
;
}
else
{
if
(
currentClassLoader
instanceof
URLClassLoader
)
{
URL
[
]
urls
=
(
(
URLClassLoader
)
currentClassLoader
)
.
getURLs
(
)
;
if
(
urls
!=
null
&&
urls
.
length
>
0
)
{
String
classpath
=
"."
;
for
(
URL
url
:
urls
)
{
classpath
=
File
.
pathSeparator
+
url
.
getFile
(
)
;
}
if
(
classpath
!=
null
)
{
finalClassPath
=
classpath
;
}
}
}
}
args
.
add
(
"-cp"
)
;
args
.
add
(
finalClassPath
)
;
Set
<
String
>
paths
=
new
HashSet
<
String
>
(
)
;
for
(
SpoonFile
file
:
sources
.
getAllJavaFiles
(
)
)
{
paths
.
add
(
file
.
getParent
(
)
.
getPath
(
)
)
;
}
args
.
addAll
(
paths
)
;
compile
(
args
.
toArray
(
new
String
[
]
)
)
;
factory
.
getEnvironment
(
)
.
debugMessage
(
"compiled in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
return
probs
.
size
(
)
==
0
;
}
