private
static
CtClass
<
?
>
createWrapper
(
CtElement
element
,
Factory
f
)
{
CtClass
<
?
>
w
=
f
.
Class
(
)
.
create
(
WRAPPER_CLASS_NAME
)
;
w
.
getPackage
(
)
.
getTypes
(
)
.
remove
(
w
)
;
CtBlock
body
=
f
.
Core
(
)
.
createBlock
(
)
;
CtTypeReference
returnType
=
f
.
Type
(
)
.
VOID_PRIMITIVE
;
if
(
element
instanceof
CtStatement
)
{
body
.
addStatement
(
(
CtStatement
)
element
)
;
}
else
if
(
element
instanceof
CtExpression
)
{
CtReturn
ret
=
f
.
Core
(
)
.
createReturn
(
)
;
ret
.
setReturnedExpression
(
(
CtExpression
)
element
)
;
body
.
addStatement
(
ret
)
;
returnType
=
f
.
Type
(
)
.
OBJECT
;
}
Set
<
ModifierKind
>
modifiers
=
EnumSet
.
noneOf
(
ModifierKind
.
class
)
;
f
.
Method
(
)
.
create
(
w
,
modifiers
,
returnType
,
WRAPPER_METHOD_NAME
,
CtElementImpl
.
emptyList
(
)
,
CtElementImpl
.
emptySet
(
)
,
body
)
;
return
w
;
}
