@SuppressWarnings("unchecked")
private
<
T
,
U
extends
CtVariable
<
T
>
>
U
getVariableDeclaration
(
final
String
name
,
final
Class
<
U
>
clazz
)
{
final
CoreFactory
coreFactory
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
;
final
TypeFactory
typeFactory
=
jdtTreeBuilder
.
getFactory
(
)
.
Type
(
)
;
final
ClassFactory
classFactory
=
jdtTreeBuilder
.
getFactory
(
)
.
Class
(
)
;
final
InterfaceFactory
interfaceFactory
=
jdtTreeBuilder
.
getFactory
(
)
.
Interface
(
)
;
final
FieldFactory
fieldFactory
=
jdtTreeBuilder
.
getFactory
(
)
.
Field
(
)
;
final
ReferenceBuilder
referenceBuilder
=
jdtTreeBuilder
.
getReferencesBuilder
(
)
;
final
Environment
environment
=
jdtTreeBuilder
.
getFactory
(
)
.
getEnvironment
(
)
;
final
boolean
lookingForFields
=
clazz
==
null
||
coreFactory
.
createField
(
)
.
getClass
(
)
.
isAssignableFrom
(
clazz
)
;
for
(
final
ASTPair
astPair
:
stack
)
{
final
ScopeRespectingVariableScanner
<
U
>
scanner
=
new
ScopeRespectingVariableScanner
(
name
,
clazz
)
;
astPair
.
element
.
accept
(
scanner
)
;
if
(
scanner
.
getResult
(
)
!=
null
)
{
return
scanner
.
getResult
(
)
;
}
if
(
lookingForFields
&&
astPair
.
node
instanceof
TypeDeclaration
)
{
final
TypeDeclaration
nodeDeclaration
=
(
TypeDeclaration
)
astPair
.
node
;
final
Deque
<
ReferenceBinding
>
referenceBindings
=
new
ArrayDeque
<
>
(
)
;
if
(
nodeDeclaration
.
superclass
!=
null
&&
nodeDeclaration
.
superclass
.
resolvedType
instanceof
ReferenceBinding
)
{
referenceBindings
.
push
(
(
ReferenceBinding
)
nodeDeclaration
.
superclass
.
resolvedType
)
;
}
if
(
nodeDeclaration
.
superInterfaces
!=
null
)
{
for
(
final
TypeReference
tr
:
nodeDeclaration
.
superInterfaces
)
{
if
(
tr
.
resolvedType
instanceof
ReferenceBinding
)
{
referenceBindings
.
push
(
(
ReferenceBinding
)
tr
.
resolvedType
)
;
}
}
}
while
(
!
referenceBindings
.
isEmpty
(
)
)
{
final
ReferenceBinding
referenceBinding
=
referenceBindings
.
pop
(
)
;
for
(
final
FieldBinding
fieldBinding
:
referenceBinding
.
fields
(
)
)
{
if
(
name
.
equals
(
new
String
(
fieldBinding
.
readableName
(
)
)
)
)
{
final
String
qualifiedNameOfParent
=
new
String
(
referenceBinding
.
readableName
(
)
)
;
final
CtType
parentOfField
=
referenceBinding
.
isClass
(
)
?
classFactory
.
create
(
qualifiedNameOfParent
)
:
interfaceFactory
.
create
(
qualifiedNameOfParent
)
;
U
field
=
(
U
)
fieldFactory
.
create
(
parentOfField
,
EnumSet
.
noneOf
(
ModifierKind
.
class
)
,
referenceBuilder
.
getTypeReference
(
fieldBinding
.
type
)
,
name
)
;
return
field
.
setExtendedModifiers
(
JDTTreeBuilderQuery
.
getModifiers
(
fieldBinding
.
modifiers
,
true
,
false
)
)
;
}
}
final
ReferenceBinding
superclass
=
referenceBinding
.
superclass
(
)
;
if
(
superclass
!=
null
)
{
referenceBindings
.
push
(
superclass
)
;
}
final
ReferenceBinding
[
]
interfaces
=
referenceBinding
.
superInterfaces
(
)
;
if
(
interfaces
!=
null
)
{
for
(
ReferenceBinding
rb
:
interfaces
)
{
referenceBindings
.
push
(
rb
)
;
}
}
}
}
}
if
(
lookingForFields
)
{
final
CtReference
potentialReferenceToField
=
referenceBuilder
.
getDeclaringReferenceFromImports
(
name
.
toCharArray
(
)
)
;
if
(
potentialReferenceToField
!=
null
&&
potentialReferenceToField
instanceof
CtTypeReference
)
{
final
CtTypeReference
typeReference
=
(
CtTypeReference
)
potentialReferenceToField
;
try
{
final
Class
classOfType
=
typeReference
.
getActualClass
(
)
;
if
(
classOfType
!=
null
)
{
final
CtType
declaringTypeOfField
=
typeReference
.
isInterface
(
)
?
interfaceFactory
.
get
(
classOfType
)
:
classFactory
.
get
(
classOfType
)
;
final
CtField
field
=
declaringTypeOfField
.
getField
(
name
)
;
if
(
field
!=
null
)
{
return
(
U
)
field
;
}
}
}
catch
(
final
SpoonClassNotFoundException
scnfe
)
{
if
(
environment
.
getNoClasspath
(
)
)
{
if
(
name
.
toUpperCase
(
)
.
equals
(
name
)
)
{
final
CtType
parentOfField
=
classFactory
.
create
(
typeReference
.
getQualifiedName
(
)
)
;
final
CtField
field
=
coreFactory
.
createField
(
)
;
field
.
setParent
(
parentOfField
)
;
field
.
setSimpleName
(
name
)
;
field
.
setType
(
typeFactory
.
nullType
(
)
)
;
return
(
U
)
field
;
}
}
}
}
}
return
null
;
}
