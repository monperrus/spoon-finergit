/** 
 * Build the CompilationUnit found in the source folder
 * @param jdtBuilder The instance of JDTBuilder to prepare the right JDT arguments
 * @param sourcesFolder The source folder
 * @param classpath The complete classpath
 * @param debugMessagePrefix Useful to help debugging
 * @return All compilationUnitDeclaration from JDT found in source folder
 */
protected
CompilationUnitDeclaration
[
]
buildUnits
(
JDTBuilder
jdtBuilder
,
SpoonFolder
sourcesFolder
,
String
[
]
classpath
,
String
debugMessagePrefix
)
{
List
<
SpoonFile
>
sourceFiles
=
Collections
.
unmodifiableList
(
sourcesFolder
.
getAllJavaFiles
(
)
)
;
if
(
sourceFiles
.
isEmpty
(
)
)
{
return
EMPTY_RESULT
;
}
JDTBatchCompiler
batchCompiler
=
createBatchCompiler
(
new
FileCompilerConfig
(
sourceFiles
)
)
;
String
[
]
args
;
if
(
jdtBuilder
==
null
)
{
ClasspathOptions
classpathOptions
=
new
ClasspathOptions
(
)
.
encoding
(
this
.
getEnvironment
(
)
.
getEncoding
(
)
.
displayName
(
)
)
.
classpath
(
classpath
)
;
ComplianceOptions
complianceOptions
=
new
ComplianceOptions
(
)
.
compliance
(
javaCompliance
)
;
if
(
factory
.
getEnvironment
(
)
.
isPreviewFeaturesEnabled
(
)
)
{
complianceOptions
.
enablePreview
(
)
;
}
AdvancedOptions
advancedOptions
=
new
AdvancedOptions
(
)
.
preserveUnusedVars
(
)
.
continueExecution
(
)
.
enableJavadoc
(
)
;
SourceOptions
sourceOptions
=
new
SourceOptions
(
)
.
sources
(
sourceFiles
)
;
args
=
new
JDTBuilderImpl
(
)
.
classpathOptions
(
classpathOptions
)
.
complianceOptions
(
complianceOptions
)
.
advancedOptions
(
advancedOptions
)
.
sources
(
sourceOptions
)
.
build
(
)
;
}
else
{
args
=
jdtBuilder
.
build
(
)
;
}
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
debugMessagePrefix
+
"build args: "
+
Arrays
.
toString
(
args
)
)
;
batchCompiler
.
configure
(
args
)
;
return
batchCompiler
.
getUnits
(
)
;
}
