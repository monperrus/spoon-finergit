protected
CompilationUnitDeclaration
[
]
buildUnits
(
JDTBuilder
jdtBuilder
,
SpoonFolder
sourcesFolder
,
String
[
]
classpath
,
String
debugMessagePrefix
,
boolean
buildOnlyOutdatedFiles
)
{
List
<
SpoonFile
>
sourceFiles
=
Collections
.
unmodifiableList
(
sourcesFolder
.
getAllJavaFiles
(
)
)
;
if
(
sourceFiles
.
isEmpty
(
)
)
{
return
EMPTY_RESULT
;
}
JDTBatchCompiler
batchCompiler
=
createBatchCompiler
(
new
FileCompilerConfig
(
sourceFiles
)
)
;
String
[
]
args
;
if
(
jdtBuilder
==
null
)
{
args
=
new
JDTBuilderImpl
(
)
.
classpathOptions
(
new
ClasspathOptions
(
)
.
encoding
(
this
.
getEnvironment
(
)
.
getEncoding
(
)
.
displayName
(
)
)
.
classpath
(
classpath
)
)
.
complianceOptions
(
new
ComplianceOptions
(
)
.
compliance
(
javaCompliance
)
)
.
advancedOptions
(
new
AdvancedOptions
(
)
.
preserveUnusedVars
(
)
.
continueExecution
(
)
.
enableJavadoc
(
)
)
.
sources
(
new
SourceOptions
(
)
.
sources
(
sourceFiles
)
)
.
build
(
)
;
}
else
{
args
=
jdtBuilder
.
build
(
)
;
}
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
debugMessagePrefix
+
"build args: "
+
Arrays
.
toString
(
args
)
)
;
batchCompiler
.
configure
(
args
)
;
if
(
buildOnlyOutdatedFiles
&&
outputDirectory
.
exists
(
)
)
{
@SuppressWarnings("unchecked")
Collection
<
File
>
outputFiles
=
FileUtils
.
listFiles
(
outputDirectory
,
new
String
[
]
{
"java"
}
,
true
)
;
keepOutdatedFiles
(
sourceFiles
,
outputFiles
)
;
}
CompilationUnitDeclaration
[
]
units
=
batchCompiler
.
getUnits
(
)
;
return
units
;
}
