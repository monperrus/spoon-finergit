protected
boolean
buildSources
(
)
{
if
(
sources
.
getAllJavaFiles
(
)
.
isEmpty
(
)
)
return
true
;
initInputClassLoader
(
)
;
JDTBatchCompiler
batchCompiler
=
createBatchCompiler
(
)
;
List
<
String
>
args
=
new
ArrayList
<
String
>
(
)
;
args
.
add
(
"-1."
+
javaCompliance
)
;
if
(
encoding
!=
null
)
{
args
.
add
(
"-encoding"
)
;
args
.
add
(
encoding
)
;
}
args
.
add
(
"-preserveAllLocals"
)
;
args
.
add
(
"-enableJavadoc"
)
;
args
.
add
(
"-noExit"
)
;
if
(
getSourceClasspath
(
)
!=
null
)
{
addClasspathToJDTArgs
(
args
)
;
}
else
{
ClassLoader
currentClassLoader
=
Thread
.
currentThread
(
)
.
getContextClassLoader
(
)
;
if
(
currentClassLoader
instanceof
URLClassLoader
)
{
URL
[
]
urls
=
(
(
URLClassLoader
)
currentClassLoader
)
.
getURLs
(
)
;
if
(
urls
!=
null
&&
urls
.
length
>
0
)
{
String
classpath
=
"."
;
for
(
URL
url
:
urls
)
{
classpath
=
File
.
pathSeparator
+
url
.
getFile
(
)
;
}
if
(
classpath
!=
null
)
{
args
.
add
(
"-cp"
)
;
args
.
add
(
classpath
)
;
}
}
}
}
args
.
addAll
(
toStringList
(
sources
.
getAllJavaFiles
(
)
)
)
;
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"build args: "
+
args
)
;
batchCompiler
.
configure
(
args
.
toArray
(
new
String
[
]
)
)
;
List
<
SpoonFile
>
filesToBuild
=
sources
.
getAllJavaFiles
(
)
;
if
(
buildOnlyOutdatedFiles
)
{
if
(
outputDirectory
.
exists
(
)
)
{
@SuppressWarnings("unchecked")
Collection
<
File
>
outputFiles
=
FileUtils
.
listFiles
(
outputDirectory
,
new
String
[
]
{
"java"
}
,
true
)
;
keepOutdatedFiles
(
filesToBuild
,
outputFiles
)
;
}
else
{
keepOutdatedFiles
(
filesToBuild
,
new
ArrayList
<
File
>
(
)
)
;
}
}
CompilationUnitDeclaration
[
]
units
=
batchCompiler
.
getUnits
(
filesToBuild
)
;
JDTTreeBuilder
builder
=
new
JDTTreeBuilder
(
factory
)
;
for
(
CompilationUnitDeclaration
unit
:
units
)
{
unit
.
traverse
(
builder
,
unit
.
scope
)
;
}
return
probs
.
size
(
)
==
0
;
}
