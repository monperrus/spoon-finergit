protected
boolean
buildTemplates
(
JDTBuilder
jdtBuilder
)
{
if
(
templates
.
getAllJavaFiles
(
)
.
isEmpty
(
)
)
{
return
true
;
}
JDTBatchCompiler
batchCompiler
=
createBatchCompiler
(
InputType
.
FILES
)
;
File
f
=
null
;
String
[
]
templateClasspath
=
new
String
[
]
;
if
(
getTemplateClasspath
(
)
!=
null
&&
getTemplateClasspath
(
)
.
length
>
0
)
{
templateClasspath
=
getTemplateClasspath
(
)
;
for
(
SpoonFolder
file
:
templates
.
getSubFolders
(
)
)
{
if
(
file
.
isArchive
(
)
)
{
f
=
createTmpJavaFile
(
file
.
getFileSystemParent
(
)
)
;
}
}
}
String
[
]
args
;
if
(
jdtBuilder
==
null
)
{
args
=
new
JDTBuilderImpl
(
)
.
classpathOptions
(
new
ClasspathOptions
(
)
.
encoding
(
this
.
encoding
)
.
classpath
(
templateClasspath
)
)
.
complianceOptions
(
new
ComplianceOptions
(
)
.
compliance
(
javaCompliance
)
)
.
advancedOptions
(
new
AdvancedOptions
(
)
.
preserveUnusedVars
(
)
.
continueExecution
(
)
.
enableJavadoc
(
)
)
.
sources
(
new
SourceOptions
(
)
.
sources
(
templates
.
getAllJavaFiles
(
)
)
)
.
build
(
)
;
}
else
{
args
=
jdtBuilder
.
build
(
)
;
}
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"template build args: "
+
Arrays
.
toString
(
args
)
)
;
batchCompiler
.
configure
(
args
)
;
CompilationUnitDeclaration
[
]
units
=
batchCompiler
.
getUnits
(
templates
.
getAllJavaFiles
(
)
)
;
if
(
f
!=
null
&&
f
.
exists
(
)
)
{
f
.
delete
(
)
;
}
JDTTreeBuilder
builder
=
new
JDTTreeBuilder
(
factory
)
;
for
(
int
i
=
0
;
i
<
units
.
length
;
i
++
)
{
CompilationUnitDeclaration
unit
=
units
[
i
]
;
unit
.
traverse
(
builder
,
unit
.
scope
)
;
if
(
getFactory
(
)
.
getEnvironment
(
)
.
isCommentsEnabled
(
)
)
{
new
JDTCommentBuilder
(
unit
,
factory
)
.
build
(
)
;
}
}
return
probs
.
size
(
)
==
0
;
}
