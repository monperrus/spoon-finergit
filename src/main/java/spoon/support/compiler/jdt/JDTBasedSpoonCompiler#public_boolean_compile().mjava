@Override
public
boolean
compile
(
)
{
initInputClassLoader
(
)
;
factory
.
getEnvironment
(
)
.
debugMessage
(
"compiling sources: "
+
factory
.
CompilationUnit
(
)
.
getMap
(
)
.
keySet
(
)
)
;
long
t
=
System
.
currentTimeMillis
(
)
;
javaCompliance
=
factory
.
getEnvironment
(
)
.
getComplianceLevel
(
)
;
JDTBatchCompiler
batchCompiler
=
createBatchCompiler
(
true
)
;
final
SourceOptions
sourcesOptions
=
new
SourceOptions
(
)
;
if
(
buildOnlyOutdatedFiles
)
{
if
(
outputDirectory
.
exists
(
)
)
{
@SuppressWarnings("unchecked")
Collection
<
File
>
outputFiles
=
FileUtils
.
listFiles
(
outputDirectory
,
new
String
[
]
{
"java"
}
,
true
)
;
int
offset
=
outputDirectory
.
getAbsolutePath
(
)
.
length
(
)
+
1
;
Collection
<
String
>
relativeOutputPaths
=
new
ArrayList
<
String
>
(
)
;
for
(
File
f
:
outputFiles
)
{
relativeOutputPaths
.
add
(
f
.
getAbsolutePath
(
)
.
substring
(
offset
)
)
;
}
for
(
SpoonFile
sf
:
sources
.
getAllJavaFiles
(
)
)
{
if
(
factory
.
CompilationUnit
(
)
.
getMap
(
)
.
containsKey
(
sf
.
getPath
(
)
)
)
{
continue
;
}
File
source
=
sf
.
toFile
(
)
;
for
(
String
out
:
relativeOutputPaths
)
{
if
(
source
.
getAbsolutePath
(
)
.
endsWith
(
out
)
)
{
if
(
source
.
lastModified
(
)
<=
new
File
(
outputDirectory
,
out
)
.
lastModified
(
)
)
{
batchCompiler
.
ignoreFile
(
new
File
(
outputDirectory
,
out
)
.
getAbsolutePath
(
)
)
;
}
}
}
}
}
sourcesOptions
.
sources
(
getBinaryOutputDirectory
(
)
.
getAbsolutePath
(
)
)
;
}
else
{
sourcesOptions
.
sources
(
this
.
sources
.
getAllJavaFiles
(
)
)
;
}
final
String
[
]
args
=
new
JDTBuilderImpl
(
)
.
classpathOptions
(
new
ClasspathOptions
(
)
.
encoding
(
this
.
encoding
)
.
classpathFromListOrClassLoader
(
getSourceClasspath
(
)
)
.
binaries
(
getBinaryOutputDirectory
(
)
)
)
.
complianceOptions
(
new
ComplianceOptions
(
)
.
compliance
(
javaCompliance
)
)
.
annotationProcessingOptions
(
new
AnnotationProcessingOptions
(
)
.
compileProcessors
(
)
)
.
advancedOptions
(
new
AdvancedOptions
(
)
.
preserveUnusedVars
(
)
.
continueExecution
(
)
.
enableJavadoc
(
)
)
.
sources
(
sourcesOptions
)
.
build
(
)
;
getFactory
(
)
.
getEnvironment
(
)
.
debugMessage
(
"compile args: "
+
Arrays
.
toString
(
args
)
)
;
System
.
setProperty
(
"jdt.compiler.useSingleThread"
,
"true"
)
;
batchCompiler
.
compile
(
args
)
;
reportProblems
(
factory
.
getEnvironment
(
)
)
;
factory
.
getEnvironment
(
)
.
debugMessage
(
"compiled in "
+
(
System
.
currentTimeMillis
(
)
-
t
)
+
" ms"
)
;
return
probs
.
size
(
)
==
0
;
}
