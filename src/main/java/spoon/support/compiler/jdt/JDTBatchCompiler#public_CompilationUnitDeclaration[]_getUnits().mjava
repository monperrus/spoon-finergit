/** 
 * Calls JDT to retrieve the list of compilation unit declarations. Depends on the actual implementation of  {@link #getCompilationUnits()}
 */
public
CompilationUnitDeclaration
[
]
getUnits
(
)
{
startTime
=
System
.
currentTimeMillis
(
)
;
INameEnvironment
environment
=
this
.
jdtCompiler
.
environment
;
if
(
environment
==
null
)
{
environment
=
getLibraryAccess
(
)
;
}
CompilerOptions
compilerOptions
=
new
CompilerOptions
(
this
.
options
)
;
compilerOptions
.
parseLiteralExpressionsAsConstants
=
false
;
IErrorHandlingPolicy
errorHandlingPolicy
;
if
(
jdtCompiler
.
getEnvironment
(
)
.
getNoClasspath
(
)
)
{
errorHandlingPolicy
=
new
IErrorHandlingPolicy
(
)
{
@Override
public
boolean
proceedOnErrors
(
)
{
return
true
;
}
@Override
public
boolean
stopOnFirstError
(
)
{
return
false
;
}
@Override
public
boolean
ignoreAllErrors
(
)
{
return
false
;
}
}
;
}
else
{
errorHandlingPolicy
=
new
IErrorHandlingPolicy
(
)
{
@Override
public
boolean
proceedOnErrors
(
)
{
return
false
;
}
@Override
public
boolean
stopOnFirstError
(
)
{
return
false
;
}
@Override
public
boolean
ignoreAllErrors
(
)
{
return
false
;
}
}
;
}
TreeBuilderCompiler
treeBuilderCompiler
=
new
TreeBuilderCompiler
(
environment
,
errorHandlingPolicy
,
compilerOptions
,
this
.
jdtCompiler
.
requestor
,
getProblemFactory
(
)
,
this
.
out
,
null
)
;
if
(
jdtCompiler
.
getEnvironment
(
)
.
getNoClasspath
(
)
)
{
treeBuilderCompiler
.
lookupEnvironment
.
mayTolerateMissingType
=
true
;
}
final
CompilationUnitDeclaration
[
]
result
=
treeBuilderCompiler
.
buildUnits
(
getCompilationUnits
(
)
)
;
for
(
int
i
=
0
;
i
<
result
.
length
;
i
++
)
{
CompilationUnitDeclaration
unit
=
result
[
i
]
;
CommentRecorderParser
parser
=
new
CommentRecorderParser
(
new
ProblemReporter
(
DefaultErrorHandlingPolicies
.
proceedWithAllProblems
(
)
,
compilerOptions
,
new
DefaultProblemFactory
(
Locale
.
getDefault
(
)
)
)
,
false
)
;
ICompilationUnit
sourceUnit
=
unit
.
compilationResult
.
compilationUnit
;
final
CompilationResult
compilationResult
=
new
CompilationResult
(
sourceUnit
,
0
,
0
,
compilerOptions
.
maxProblemsPerUnit
)
;
CompilationUnitDeclaration
tmpDeclForComment
=
parser
.
dietParse
(
sourceUnit
,
compilationResult
)
;
unit
.
comments
=
tmpDeclForComment
.
comments
;
}
return
result
;
}
