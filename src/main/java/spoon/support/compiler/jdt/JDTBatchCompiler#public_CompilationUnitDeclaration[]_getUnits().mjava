/** 
 * Calls JDT to retrieve the list of compilation unit declarations. Depends on the actual implementation of  {@link #getCompilationUnits()}
 */
public
CompilationUnitDeclaration
[
]
getUnits
(
)
{
startTime
=
System
.
currentTimeMillis
(
)
;
INameEnvironment
environment
=
this
.
jdtCompiler
.
environment
;
if
(
environment
==
null
)
{
environment
=
getLibraryAccess
(
)
;
}
CompilerOptions
compilerOptions
=
new
CompilerOptions
(
this
.
options
)
;
compilerOptions
.
parseLiteralExpressionsAsConstants
=
false
;
IErrorHandlingPolicy
errorHandlingPolicy
;
if
(
jdtCompiler
.
getEnvironment
(
)
.
getNoClasspath
(
)
)
{
errorHandlingPolicy
=
new
IErrorHandlingPolicy
(
)
{
@Override
public
boolean
proceedOnErrors
(
)
{
return
true
;
}
@Override
public
boolean
stopOnFirstError
(
)
{
return
false
;
}
@Override
public
boolean
ignoreAllErrors
(
)
{
return
false
;
}
}
;
}
else
{
errorHandlingPolicy
=
new
IErrorHandlingPolicy
(
)
{
@Override
public
boolean
proceedOnErrors
(
)
{
return
false
;
}
@Override
public
boolean
stopOnFirstError
(
)
{
return
false
;
}
@Override
public
boolean
ignoreAllErrors
(
)
{
return
false
;
}
}
;
}
IProblemFactory
problemFactory
=
getProblemFactory
(
)
;
TreeBuilderCompiler
treeBuilderCompiler
=
new
TreeBuilderCompiler
(
environment
,
errorHandlingPolicy
,
compilerOptions
,
this
.
jdtCompiler
.
requestor
,
problemFactory
,
this
.
out
,
new
CompilationProgress
(
)
{
private
String
currentElement
=
null
;
private
int
totalTask
=
-
1
;
@Override
public
void
begin
(
int
i
)
{
}
@Override
public
void
done
(
)
{
}
@Override
public
boolean
isCanceled
(
)
{
return
false
;
}
@Override
public
void
setTaskName
(
String
s
)
{
if
(
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
!=
null
)
{
String
strToFind
=
"Processing "
;
int
processingPosition
=
s
.
indexOf
(
strToFind
)
;
if
(
processingPosition
!=
-
1
)
{
currentElement
=
s
.
substring
(
processingPosition
+
strToFind
.
length
(
)
)
;
}
}
}
@Override
public
void
worked
(
int
increment
,
int
remaining
)
{
if
(
totalTask
==
-
1
)
{
totalTask
=
remaining
+
1
;
}
if
(
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
!=
null
)
{
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
.
step
(
SpoonProgress
.
Process
.
COMPILE
,
currentElement
,
totalTask
-
remaining
,
totalTask
)
;
}
}
}
)
;
if
(
jdtCompiler
.
getEnvironment
(
)
.
getNoClasspath
(
)
)
{
treeBuilderCompiler
.
lookupEnvironment
.
problemReporter
=
new
ProblemReporter
(
errorHandlingPolicy
,
compilerOptions
,
problemFactory
)
{
@Override
public
int
computeSeverity
(
int
problemID
)
{
return
256
;
}
}
;
treeBuilderCompiler
.
lookupEnvironment
.
mayTolerateMissingType
=
true
;
}
if
(
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
!=
null
)
{
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
.
start
(
SpoonProgress
.
Process
.
COMPILE
)
;
}
final
CompilationUnitDeclaration
[
]
result
=
treeBuilderCompiler
.
buildUnits
(
getCompilationUnits
(
)
)
;
if
(
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
!=
null
)
{
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
.
end
(
SpoonProgress
.
Process
.
COMPILE
)
;
}
if
(
jdtCompiler
.
getEnvironment
(
)
.
isCommentsEnabled
(
)
)
{
if
(
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
!=
null
)
{
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
.
start
(
SpoonProgress
.
Process
.
COMMENT
)
;
}
for
(
int
i
=
0
;
i
<
result
.
length
;
i
++
)
{
CompilationUnitDeclaration
unit
=
result
[
i
]
;
CommentRecorderParser
parser
=
new
CommentRecorderParser
(
new
ProblemReporter
(
DefaultErrorHandlingPolicies
.
proceedWithAllProblems
(
)
,
compilerOptions
,
new
DefaultProblemFactory
(
Locale
.
getDefault
(
)
)
)
,
false
)
;
ICompilationUnit
sourceUnit
=
unit
.
compilationResult
.
compilationUnit
;
final
CompilationResult
compilationResult
=
new
CompilationResult
(
sourceUnit
,
0
,
0
,
compilerOptions
.
maxProblemsPerUnit
)
;
CompilationUnitDeclaration
tmpDeclForComment
=
parser
.
dietParse
(
sourceUnit
,
compilationResult
)
;
unit
.
comments
=
tmpDeclForComment
.
comments
;
if
(
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
!=
null
)
{
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
.
step
(
SpoonProgress
.
Process
.
COMMENT
,
new
String
(
unit
.
getFileName
(
)
)
,
i
+
1
,
result
.
length
)
;
}
}
if
(
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
!=
null
)
{
jdtCompiler
.
getEnvironment
(
)
.
getSpoonProgress
(
)
.
end
(
SpoonProgress
.
Process
.
COMMENT
)
;
}
}
return
result
;
}
