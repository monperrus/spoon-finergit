@Override
public
CompilationUnit
[
]
getCompilationUnits
(
)
{
CompilationUnit
[
]
units
=
super
.
getCompilationUnits
(
)
;
if
(
!
ignoredFiles
.
isEmpty
(
)
)
{
List
<
CompilationUnit
>
l
=
new
ArrayList
<
CompilationUnit
>
(
)
;
for
(
CompilationUnit
unit
:
units
)
{
if
(
!
ignoredFiles
.
contains
(
new
String
(
unit
.
getFileName
(
)
)
)
)
{
l
.
add
(
unit
)
;
}
}
units
=
l
.
toArray
(
new
CompilationUnit
[
]
)
;
}
if
(
useFactory
)
{
List
<
CompilationUnit
>
unitList
=
new
ArrayList
<
CompilationUnit
>
(
)
;
for
(
int
i
=
0
;
i
<
units
.
length
;
i
++
)
{
CompilationUnit
unit
=
units
[
i
]
;
unitList
.
add
(
new
CompilationUnitWrapper
(
this
.
jdtCompiler
,
unit
)
)
;
}
for
(
int
i
=
0
;
i
<
jdtCompiler
.
getFactory
(
)
.
Type
(
)
.
getAll
(
)
.
size
(
)
;
i
++
)
{
CtType
<
?
>
ctType
=
jdtCompiler
.
getFactory
(
)
.
Type
(
)
.
getAll
(
)
.
get
(
i
)
;
if
(
ctType
.
getPosition
(
)
!=
null
)
{
continue
;
}
CtPackage
pack
=
ctType
.
getPackage
(
)
;
File
directory
=
jdtCompiler
.
getSourceOutputDirectory
(
)
;
File
packageDir
;
if
(
pack
.
getQualifiedName
(
)
.
equals
(
CtPackage
.
TOP_LEVEL_PACKAGE_NAME
)
)
{
packageDir
=
new
File
(
directory
.
getAbsolutePath
(
)
)
;
}
else
{
packageDir
=
new
File
(
directory
.
getAbsolutePath
(
)
+
File
.
separatorChar
+
pack
.
getQualifiedName
(
)
.
replace
(
'.'
,
File
.
separatorChar
)
)
;
}
if
(
!
packageDir
.
exists
(
)
)
{
if
(
!
packageDir
.
mkdirs
(
)
)
{
throw
new
RuntimeException
(
"Error creating output directory"
)
;
}
}
File
file
=
new
File
(
packageDir
.
getAbsolutePath
(
)
+
File
.
separatorChar
+
ctType
.
getSimpleName
(
)
+
DefaultJavaPrettyPrinter
.
JAVA_FILE_EXTENSION
)
;
CompilationUnit
unit
=
new
CompilationUnit
(
null
,
file
.
getAbsolutePath
(
)
,
"UTF-8"
)
;
unitList
.
add
(
new
CompilationUnitWrapper
(
this
.
jdtCompiler
,
unit
)
)
;
}
units
=
unitList
.
toArray
(
new
CompilationUnit
[
]
{
}
)
;
}
return
units
;
}
