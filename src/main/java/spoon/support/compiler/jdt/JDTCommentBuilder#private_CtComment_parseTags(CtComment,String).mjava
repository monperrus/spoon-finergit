/** 
 * Parse the content of a comment to extract the tags
 * @param comment the original comment
 * @param commentContent the content of the comment
 * @return a CtComment or a CtJavaDoc comment with a defined content
 */
private
CtComment
parseTags
(
CtComment
comment
,
String
commentContent
)
{
if
(
!
(
comment
instanceof
CtJavaDoc
)
)
{
comment
.
setContent
(
commentContent
)
;
return
comment
;
}
String
currentTagContent
=
""
;
CtJavaDocTag
.
TagType
currentTag
=
null
;
String
[
]
lines
=
commentContent
.
split
(
"\n"
)
;
for
(
String
aLine
:
lines
)
{
String
line
=
aLine
.
trim
(
)
;
if
(
line
.
startsWith
(
CtJavaDocTag
.
JAVADOC_TAG_PREFIX
)
)
{
int
endIndex
=
line
.
indexOf
(
' '
)
;
if
(
endIndex
==
-
1
)
{
endIndex
=
line
.
length
(
)
;
}
defineCommentContent
(
comment
,
currentTagContent
,
currentTag
)
;
currentTag
=
CtJavaDocTag
.
TagType
.
tagFromName
(
line
.
substring
(
1
,
endIndex
)
.
toLowerCase
(
)
)
;
if
(
endIndex
==
line
.
length
(
)
)
{
currentTagContent
=
""
;
}
else
{
currentTagContent
=
line
.
substring
(
endIndex
+
1
)
;
}
}
else
{
currentTagContent
=
"\n"
+
aLine
;
}
}
defineCommentContent
(
comment
,
currentTagContent
,
currentTag
)
;
return
comment
;
}
