/** 
 * Find the parent of a comment based on the position
 * @param comment the comment
 * @return the parent of the comment
 */
private
CtElement
findCommentParent
(
CtComment
comment
)
{
class
FindCommentParentScanner
extends
EarlyTerminatingScanner
<
Void
>
{
public
CtElement
commentParent
;
private
int
start
;
private
int
end
;
FindCommentParentScanner
(
int
start
,
int
end
)
{
this
.
start
=
start
;
this
.
end
=
end
;
setVisitCompilationUnitContent
(
true
)
;
}
private
boolean
isCommentBetweenElementPosition
(
CtElement
element
)
{
return
(
element
.
getPosition
(
)
.
isValidPosition
(
)
&&
element
.
getPosition
(
)
.
getSourceStart
(
)
<=
this
.
start
&&
element
.
getPosition
(
)
.
getSourceEnd
(
)
>=
this
.
end
)
;
}
@Override
public
void
scan
(
CtElement
element
)
{
if
(
element
==
null
)
{
return
;
}
if
(
element
.
isImplicit
(
)
&&
!
(
element
instanceof
CtBlock
)
)
{
return
;
}
CtElement
body
=
getBody
(
element
)
;
if
(
body
!=
null
&&
body
.
getPosition
(
)
.
isValidPosition
(
)
==
false
)
{
body
=
null
;
}
boolean
betweenElementPosition
=
this
.
isCommentBetweenElementPosition
(
element
)
;
boolean
bodyBetweenElementPosition
=
(
body
!=
null
)
&&
this
.
isCommentBetweenElementPosition
(
body
)
;
if
(
betweenElementPosition
||
bodyBetweenElementPosition
)
{
commentParent
=
element
;
element
.
accept
(
this
)
;
}
}
}
FindCommentParentScanner
findCommentParentScanner
=
new
FindCommentParentScanner
(
comment
.
getPosition
(
)
.
getSourceStart
(
)
,
comment
.
getPosition
(
)
.
getSourceEnd
(
)
)
;
findCommentParentScanner
.
scan
(
spoonUnit
)
;
return
findCommentParentScanner
.
commentParent
;
}
