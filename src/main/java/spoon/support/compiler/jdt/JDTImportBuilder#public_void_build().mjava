public
void
build
(
)
{
if
(
declarationUnit
.
imports
==
null
||
declarationUnit
.
imports
.
length
==
0
)
{
return
;
}
for
(
ImportReference
importRef
:
declarationUnit
.
imports
)
{
String
importName
=
importRef
.
toString
(
)
;
if
(
!
importRef
.
isStatic
(
)
)
{
if
(
importName
.
endsWith
(
"*"
)
)
{
int
lastDot
=
importName
.
lastIndexOf
(
"."
)
;
String
packageName
=
importName
.
substring
(
0
,
lastDot
)
;
CtPackage
ctPackage
=
this
.
factory
.
Package
(
)
.
get
(
packageName
)
;
if
(
ctPackage
!=
null
)
{
for
(
CtType
type
:
ctPackage
.
getTypes
(
)
)
{
this
.
imports
.
add
(
type
.
getReference
(
)
)
;
}
}
}
else
{
CtType
klass
=
this
.
getOrLoadClass
(
importName
)
;
if
(
klass
!=
null
)
{
this
.
imports
.
add
(
klass
.
getReference
(
)
)
;
}
}
}
else
{
int
lastDot
=
importName
.
lastIndexOf
(
"."
)
;
String
className
=
importName
.
substring
(
0
,
lastDot
)
;
String
methodOrFieldName
=
importName
.
substring
(
lastDot
+
1
)
;
CtType
klass
=
this
.
getOrLoadClass
(
className
)
;
if
(
klass
!=
null
)
{
if
(
methodOrFieldName
.
equals
(
"*"
)
)
{
Collection
<
CtFieldReference
<
?
>
>
fields
=
klass
.
getAllFields
(
)
;
Set
<
CtMethod
>
methods
=
klass
.
getAllMethods
(
)
;
for
(
CtFieldReference
fieldReference
:
fields
)
{
if
(
fieldReference
.
isStatic
(
)
&&
fieldReference
.
getFieldDeclaration
(
)
.
hasModifier
(
ModifierKind
.
PUBLIC
)
||
klass
.
isInterface
(
)
)
{
this
.
imports
.
add
(
fieldReference
.
clone
(
)
)
;
}
}
for
(
CtMethod
method
:
methods
)
{
if
(
method
.
hasModifier
(
ModifierKind
.
STATIC
)
&&
method
.
hasModifier
(
ModifierKind
.
PUBLIC
)
||
klass
.
isInterface
(
)
)
{
this
.
imports
.
add
(
method
.
getReference
(
)
)
;
}
}
}
else
{
List
<
CtNamedElement
>
methodOrFields
=
klass
.
getElements
(
new
NamedElementFilter
<
>
(
CtNamedElement
.
class
,
methodOrFieldName
)
)
;
if
(
methodOrFields
.
size
(
)
>
0
)
{
this
.
imports
.
add
(
methodOrFields
.
get
(
0
)
.
getReference
(
)
)
;
}
}
}
}
}
spoonUnit
.
setImports
(
this
.
imports
)
;
}
