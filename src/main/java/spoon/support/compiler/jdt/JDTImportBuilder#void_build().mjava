void
build
(
)
{
if
(
declarationUnit
.
imports
==
null
||
declarationUnit
.
imports
.
length
==
0
)
{
return
;
}
for
(
ImportReference
importRef
:
declarationUnit
.
imports
)
{
String
importName
=
importRef
.
toString
(
)
;
if
(
!
importRef
.
isStatic
(
)
)
{
if
(
importName
.
endsWith
(
"*"
)
)
{
int
lastDot
=
importName
.
lastIndexOf
(
"."
)
;
String
packageName
=
importName
.
substring
(
0
,
lastDot
)
;
CtPackage
ctPackage
=
this
.
factory
.
Package
(
)
.
get
(
packageName
)
;
if
(
ctPackage
!=
null
)
{
this
.
imports
.
add
(
factory
.
Type
(
)
.
createImport
(
ctPackage
.
getReference
(
)
)
)
;
}
}
else
{
CtType
klass
=
this
.
getOrLoadClass
(
importName
)
;
if
(
klass
!=
null
)
{
this
.
imports
.
add
(
factory
.
Type
(
)
.
createImport
(
klass
.
getReference
(
)
)
)
;
}
}
}
else
{
int
lastDot
=
importName
.
lastIndexOf
(
"."
)
;
String
className
=
importName
.
substring
(
0
,
lastDot
)
;
String
methodOrFieldName
=
importName
.
substring
(
lastDot
+
1
)
;
CtType
klass
=
this
.
getOrLoadClass
(
className
)
;
if
(
klass
!=
null
)
{
if
(
methodOrFieldName
.
equals
(
"*"
)
)
{
this
.
imports
.
add
(
factory
.
Type
(
)
.
createImport
(
factory
.
Type
(
)
.
createWildcardStaticTypeMemberReference
(
klass
.
getReference
(
)
)
)
)
;
}
else
{
List
<
CtNamedElement
>
methodOrFields
=
klass
.
getElements
(
new
NamedElementFilter
<
>
(
CtNamedElement
.
class
,
methodOrFieldName
)
)
;
if
(
methodOrFields
.
size
(
)
>
0
)
{
CtNamedElement
methodOrField
=
methodOrFields
.
get
(
0
)
;
this
.
imports
.
add
(
factory
.
Type
(
)
.
createImport
(
methodOrField
.
getReference
(
)
)
)
;
}
}
}
}
}
spoonUnit
.
setImports
(
this
.
imports
)
;
}
