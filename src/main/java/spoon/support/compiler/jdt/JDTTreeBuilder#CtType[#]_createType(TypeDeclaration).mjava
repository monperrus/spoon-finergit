CtType
<
?
>
createType
(
TypeDeclaration
typeDeclaration
)
{
CtType
<
?
>
type
=
null
;
if
(
(
typeDeclaration
.
modifiers
&
ClassFileConstants
.
AccAnnotation
)
!=
0
)
{
type
=
factory
.
Core
(
)
.
createAnnotationType
(
)
;
}
else
if
(
(
typeDeclaration
.
modifiers
&
ClassFileConstants
.
AccEnum
)
!=
0
)
{
CtEnum
<
?
>
e
=
factory
.
Core
(
)
.
createEnum
(
)
;
if
(
typeDeclaration
.
superInterfaces
!=
null
)
{
for
(
TypeReference
ref
:
typeDeclaration
.
superInterfaces
)
{
e
.
addSuperInterface
(
references
.
getTypeReference
(
ref
.
resolvedType
)
)
;
}
}
type
=
e
;
}
else
if
(
(
typeDeclaration
.
modifiers
&
ClassFileConstants
.
AccInterface
)
!=
0
)
{
CtInterface
<
?
>
interf
=
factory
.
Core
(
)
.
createInterface
(
)
;
if
(
typeDeclaration
.
superInterfaces
!=
null
)
{
for
(
TypeReference
ref
:
typeDeclaration
.
superInterfaces
)
{
interf
.
addSuperInterface
(
references
.
getTypeReference
(
ref
.
resolvedType
)
)
;
}
}
if
(
typeDeclaration
.
typeParameters
!=
null
)
{
for
(
TypeParameter
p
:
typeDeclaration
.
typeParameters
)
{
interf
.
addFormalTypeParameter
(
references
.
getBoundedTypeReference
(
p
.
binding
)
)
;
}
}
type
=
interf
;
}
else
{
CtClass
<
?
>
cl
=
factory
.
Core
(
)
.
createClass
(
)
;
if
(
typeDeclaration
.
superclass
!=
null
&&
typeDeclaration
.
superclass
.
resolvedType
!=
null
&&
typeDeclaration
.
enclosingType
!=
null
&&
!
new
String
(
typeDeclaration
.
superclass
.
resolvedType
.
qualifiedPackageName
(
)
)
.
equals
(
new
String
(
typeDeclaration
.
binding
.
qualifiedPackageName
(
)
)
)
)
{
List
<
ModifierKind
>
modifiers
=
Arrays
.
asList
(
ModifierKind
.
PUBLIC
,
ModifierKind
.
PROTECTED
)
;
final
TypeBinding
resolvedType
=
typeDeclaration
.
superclass
.
resolvedType
;
if
(
(
resolvedType
instanceof
MemberTypeBinding
||
resolvedType
instanceof
BinaryTypeBinding
)
&&
resolvedType
.
enclosingType
(
)
!=
null
&&
typeDeclaration
.
enclosingType
.
superclass
!=
null
&&
Collections
.
disjoint
(
modifiers
,
getModifiers
(
resolvedType
.
enclosingType
(
)
.
modifiers
)
)
)
{
typeDeclaration
.
superclass
.
resolvedType
=
new
SpoonReferenceBinding
(
typeDeclaration
.
superclass
.
resolvedType
.
sourceName
(
)
,
(
ReferenceBinding
)
typeDeclaration
.
enclosingType
.
superclass
.
resolvedType
)
;
}
}
if
(
typeDeclaration
.
superclass
!=
null
)
{
cl
.
setSuperclass
(
references
.
getTypeReference
(
typeDeclaration
.
superclass
.
resolvedType
)
)
;
}
if
(
typeDeclaration
.
binding
.
isAnonymousType
(
)
&&
typeDeclaration
.
superInterfaces
!=
null
)
{
final
TypeReference
superInterface
=
typeDeclaration
.
superInterfaces
[
0
]
;
if
(
superInterface
.
resolvedType
instanceof
ParameterizedTypeBinding
)
{
final
ParameterizedTypeBinding
resolvedType
=
(
ParameterizedTypeBinding
)
superInterface
.
resolvedType
;
if
(
resolvedType
.
arguments
!=
null
)
{
for
(
TypeBinding
b
:
resolvedType
.
arguments
)
{
cl
.
addFormalTypeParameter
(
references
.
getTypeReference
(
b
)
)
;
}
}
}
}
if
(
typeDeclaration
.
superInterfaces
!=
null
)
{
for
(
TypeReference
ref
:
typeDeclaration
.
superInterfaces
)
{
cl
.
addSuperInterface
(
references
.
getTypeReference
(
ref
.
resolvedType
)
)
;
}
}
if
(
typeDeclaration
.
typeParameters
!=
null
)
{
for
(
TypeParameter
p
:
typeDeclaration
.
typeParameters
)
{
cl
.
addFormalTypeParameter
(
references
.
getBoundedTypeReference
(
p
.
binding
)
)
;
}
}
type
=
cl
;
}
if
(
type
instanceof
CtClass
)
{
if
(
typeDeclaration
.
binding
.
isAnonymousType
(
)
)
{
type
.
setSimpleName
(
computeAnonymousName
(
typeDeclaration
.
binding
)
)
;
}
else
{
type
.
setSimpleName
(
new
String
(
typeDeclaration
.
name
)
)
;
}
}
else
{
type
.
setSimpleName
(
new
String
(
typeDeclaration
.
name
)
)
;
}
type
.
setModifiers
(
getModifiers
(
typeDeclaration
.
modifiers
)
)
;
return
type
;
}
