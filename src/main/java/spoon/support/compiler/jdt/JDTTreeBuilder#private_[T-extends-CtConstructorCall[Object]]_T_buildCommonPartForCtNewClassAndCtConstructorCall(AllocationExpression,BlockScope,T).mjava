private
<
T
extends
CtConstructorCall
<
Object
>
>
T
buildCommonPartForCtNewClassAndCtConstructorCall
(
AllocationExpression
allocationExpression
,
BlockScope
scope
,
T
constructorCall
)
{
context
.
enter
(
constructorCall
,
allocationExpression
)
;
if
(
allocationExpression
.
binding
!=
null
)
{
constructorCall
.
setExecutable
(
references
.
getExecutableReference
(
allocationExpression
.
binding
)
)
;
}
else
{
final
CtExecutableReference
<
Object
>
ref
=
factory
.
Core
(
)
.
createExecutableReference
(
)
;
ref
.
setSimpleName
(
CtExecutableReference
.
CONSTRUCTOR_NAME
)
;
ref
.
setType
(
references
.
getTypeReference
(
null
,
allocationExpression
.
type
)
)
;
ref
.
setDeclaringType
(
references
.
getTypeReference
(
null
,
allocationExpression
.
type
)
)
;
final
List
<
CtTypeReference
<
?
>
>
parameters
=
new
ArrayList
<
>
(
allocationExpression
.
argumentTypes
.
length
)
;
for
(
TypeBinding
b
:
allocationExpression
.
argumentTypes
)
{
parameters
.
add
(
references
.
getTypeReference
(
b
)
)
;
}
ref
.
setParameters
(
parameters
)
;
constructorCall
.
setExecutable
(
ref
)
;
}
if
(
allocationExpression
.
type
!=
null
&&
allocationExpression
.
type
.
resolvedType
!=
null
)
{
final
TypeReference
[
]
[
]
typeArguments
=
allocationExpression
.
type
.
getTypeArguments
(
)
;
if
(
typeArguments
!=
null
&&
typeArguments
.
length
>
0
)
{
context
.
isGenericTypeExplicit
=
true
;
for
(
TypeReference
[
]
typeArgument
:
typeArguments
)
{
context
.
isGenericTypeExplicit
=
typeArgument
!=
null
&&
typeArgument
.
length
>
0
;
if
(
context
.
isGenericTypeExplicit
)
{
break
;
}
}
}
constructorCall
.
getExecutable
(
)
.
setType
(
this
.
references
.
buildTypeReference
(
allocationExpression
.
type
,
scope
)
)
;
context
.
isGenericTypeExplicit
=
true
;
}
else
if
(
allocationExpression
.
expectedType
(
)
!=
null
)
{
constructorCall
.
getExecutable
(
)
.
setType
(
references
.
getTypeReference
(
allocationExpression
.
expectedType
(
)
)
)
;
}
if
(
allocationExpression
.
typeArguments
!=
null
)
{
for
(
TypeReference
typeArgument
:
allocationExpression
.
typeArguments
)
{
constructorCall
.
addActualTypeArgument
(
this
.
references
.
buildTypeReference
(
typeArgument
,
scope
)
)
;
}
}
if
(
allocationExpression
.
enclosingInstance
(
)
!=
null
)
{
context
.
target
.
push
(
constructorCall
)
;
allocationExpression
.
enclosingInstance
(
)
.
traverse
(
this
,
scope
)
;
context
.
target
.
pop
(
)
;
}
context
.
pushArgument
(
constructorCall
)
;
if
(
allocationExpression
.
arguments
!=
null
)
{
for
(
Expression
e
:
allocationExpression
.
arguments
)
{
e
.
traverse
(
this
,
scope
)
;
}
}
context
.
popArgument
(
constructorCall
)
;
return
constructorCall
;
}
