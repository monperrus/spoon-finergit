private
<
T
extends
CtConstructorCall
<
Object
>
>
T
buildCommonPartForCtNewClassAndCtConstructorCall
(
AllocationExpression
allocationExpression
,
BlockScope
scope
,
T
constructorCall
)
{
if
(
allocationExpression
.
type
!=
null
)
{
final
TypeReference
[
]
[
]
typeArguments
=
allocationExpression
.
type
.
getTypeArguments
(
)
;
if
(
typeArguments
!=
null
&&
typeArguments
.
length
>
0
)
{
context
.
isGenericTypeExplicit
=
true
;
for
(
TypeReference
[
]
typeArgument
:
typeArguments
)
{
context
.
isGenericTypeExplicit
=
typeArgument
!=
null
&&
typeArgument
.
length
>
0
;
if
(
context
.
isGenericTypeExplicit
)
{
break
;
}
}
}
constructorCall
.
setType
(
references
.
getTypeReference
(
allocationExpression
.
type
.
resolvedType
)
)
;
context
.
isGenericTypeExplicit
=
true
;
}
else
if
(
allocationExpression
.
expectedType
(
)
!=
null
)
{
constructorCall
.
setType
(
references
.
getTypeReference
(
allocationExpression
.
expectedType
(
)
)
)
;
}
constructorCall
.
setExecutable
(
references
.
getExecutableReference
(
allocationExpression
.
binding
)
)
;
if
(
constructorCall
.
getExecutable
(
)
!=
null
)
{
constructorCall
.
getExecutable
(
)
.
setType
(
(
CtTypeReference
<
Object
>
)
constructorCall
.
getExecutable
(
)
.
getDeclaringType
(
)
)
;
}
if
(
allocationExpression
.
genericTypeArguments
(
)
!=
null
)
{
constructorCall
.
setActualTypeArguments
(
references
.
getBoundedTypesReferences
(
allocationExpression
.
genericTypeArguments
(
)
)
)
;
}
context
.
enter
(
constructorCall
,
allocationExpression
)
;
if
(
allocationExpression
.
enclosingInstance
(
)
!=
null
)
{
context
.
target
.
push
(
constructorCall
)
;
allocationExpression
.
enclosingInstance
(
)
.
traverse
(
this
,
scope
)
;
context
.
target
.
pop
(
)
;
}
context
.
pushArgument
(
constructorCall
)
;
if
(
allocationExpression
.
arguments
!=
null
)
{
for
(
Expression
e
:
allocationExpression
.
arguments
)
{
e
.
traverse
(
this
,
scope
)
;
}
}
context
.
popArgument
(
constructorCall
)
;
return
constructorCall
;
}
