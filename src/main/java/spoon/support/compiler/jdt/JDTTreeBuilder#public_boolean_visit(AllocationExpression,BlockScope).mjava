@SuppressWarnings("unchecked")
@Override
public
boolean
visit
(
AllocationExpression
allocationExpression
,
BlockScope
scope
)
{
CtNewClass
<
Object
>
c
=
factory
.
Core
(
)
.
createNewClass
(
)
;
if
(
allocationExpression
.
type
!=
null
)
{
if
(
allocationExpression
.
type
.
resolvedType
instanceof
ParameterizedTypeBinding
)
{
CtTypeReference
<
Object
>
res
=
references
.
getTypeReference
(
(
(
ParameterizedTypeBinding
)
allocationExpression
.
type
.
resolvedType
)
.
genericType
(
)
)
;
ParameterizedTypeBinding
paramType
=
(
(
ParameterizedTypeBinding
)
allocationExpression
.
type
.
resolvedType
)
;
if
(
paramType
.
arguments
!=
null
&&
paramType
.
isBoundParameterizedType
(
)
)
{
for
(
TypeBinding
b
:
(
(
ParameterizedTypeBinding
)
allocationExpression
.
type
.
resolvedType
)
.
arguments
)
{
res
.
addActualTypeArgument
(
references
.
getTypeReference
(
b
)
)
;
}
}
c
.
setType
(
res
)
;
}
else
c
.
setType
(
references
.
getTypeReference
(
allocationExpression
.
type
.
resolvedType
)
)
;
}
c
.
setExecutable
(
references
.
getExecutableReference
(
allocationExpression
.
binding
)
)
;
if
(
c
.
getExecutable
(
)
==
null
)
{
logger
.
error
(
"null executable ref at "
+
context
.
createSourcePosition
(
allocationExpression
)
)
;
}
else
{
c
.
getExecutable
(
)
.
setType
(
(
CtTypeReference
<
Object
>
)
c
.
getExecutable
(
)
.
getDeclaringType
(
)
)
;
}
context
.
enter
(
c
,
allocationExpression
)
;
if
(
allocationExpression
.
enclosingInstance
(
)
!=
null
)
{
context
.
target
.
push
(
c
)
;
allocationExpression
.
enclosingInstance
(
)
.
traverse
(
this
,
scope
)
;
context
.
target
.
pop
(
)
;
}
context
.
pushArgument
(
c
)
;
if
(
allocationExpression
.
arguments
!=
null
)
{
for
(
Expression
e
:
allocationExpression
.
arguments
)
e
.
traverse
(
this
,
scope
)
;
}
context
.
popArgument
(
c
)
;
return
false
;
}
