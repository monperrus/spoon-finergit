@Override
public
boolean
visit
(
Argument
argument
,
BlockScope
scope
)
{
CtParameter
<
Object
>
p
=
factory
.
Core
(
)
.
createParameter
(
)
;
p
.
setSimpleName
(
new
String
(
argument
.
name
)
)
;
p
.
setVarArgs
(
argument
.
isVarArgs
(
)
)
;
p
.
setModifiers
(
getModifiers
(
argument
.
modifiers
)
)
;
if
(
argument
.
binding
!=
null
&&
argument
.
binding
.
type
!=
null
)
{
context
.
isLambdaParameterImplicitlyTyped
=
argument
.
type
!=
null
;
if
(
argument
.
binding
.
type
instanceof
WildcardBinding
)
{
p
.
setType
(
references
.
getTypeReference
(
(
(
(
WildcardBinding
)
argument
.
binding
.
type
)
.
bound
)
)
)
;
}
else
{
p
.
setType
(
references
.
getTypeReference
(
(
argument
.
binding
.
type
)
)
)
;
}
context
.
isLambdaParameterImplicitlyTyped
=
true
;
}
else
if
(
argument
.
type
!=
null
)
{
p
.
setType
(
references
.
getTypeReference
(
argument
.
type
.
resolvedType
)
)
;
}
final
TypeBinding
receiverType
=
argument
.
type
!=
null
?
argument
.
type
.
resolvedType
:
null
;
if
(
receiverType
!=
null
&&
argument
.
type
instanceof
QualifiedTypeReference
)
{
final
QualifiedTypeReference
qualifiedNameReference
=
(
QualifiedTypeReference
)
argument
.
type
;
final
CtTypeReference
<
Object
>
ref
=
getQualifiedTypeReference
(
qualifiedNameReference
.
tokens
,
receiverType
,
receiverType
.
enclosingType
(
)
,
new
OnAccessListener
(
)
{
@Override
public
boolean
onAccess
(
char
[
]
[
]
tokens
,
int
index
)
{
return
true
;
}
}
)
;
if
(
ref
!=
null
)
{
p
.
setType
(
ref
)
;
}
}
context
.
enter
(
p
,
argument
)
;
if
(
argument
.
initialization
!=
null
)
{
argument
.
initialization
.
traverse
(
this
,
scope
)
;
}
if
(
argument
.
annotations
!=
null
)
{
for
(
Annotation
a
:
argument
.
annotations
)
{
a
.
traverse
(
this
,
scope
)
;
substituteAnnotation
(
p
,
a
,
CtAnnotatedElementType
.
TYPE_USE
)
;
}
}
return
false
;
}
