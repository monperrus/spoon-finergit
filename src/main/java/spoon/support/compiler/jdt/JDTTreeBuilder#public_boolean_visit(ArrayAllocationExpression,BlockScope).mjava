@Override
public
boolean
visit
(
ArrayAllocationExpression
arrayAllocationExpression
,
BlockScope
scope
)
{
CtNewArray
<
Object
>
array
=
factory
.
Core
(
)
.
createNewArray
(
)
;
context
.
enter
(
array
,
arrayAllocationExpression
)
;
CtTypeReference
<
?
>
typeReference
;
if
(
arrayAllocationExpression
.
resolvedType
!=
null
)
{
typeReference
=
references
.
getTypeReference
(
arrayAllocationExpression
.
resolvedType
.
leafComponentType
(
)
,
arrayAllocationExpression
.
type
)
;
}
else
{
typeReference
=
references
.
getTypeReference
(
arrayAllocationExpression
.
type
)
;
}
final
CtArrayTypeReference
arrayType
=
factory
.
Type
(
)
.
createArrayReference
(
typeReference
,
arrayAllocationExpression
.
dimensions
.
length
)
;
arrayType
.
getArrayType
(
)
.
setAnnotations
(
this
.
references
.
buildTypeReference
(
arrayAllocationExpression
.
type
,
scope
)
.
getAnnotations
(
)
)
;
array
.
setType
(
arrayType
)
;
context
.
pushArgument
(
array
)
;
if
(
arrayAllocationExpression
.
dimensions
!=
null
)
{
for
(
Expression
e
:
arrayAllocationExpression
.
dimensions
)
{
if
(
e
!=
null
)
{
e
.
traverse
(
this
,
scope
)
;
}
}
}
context
.
popArgument
(
array
)
;
if
(
arrayAllocationExpression
.
initializer
!=
null
&&
arrayAllocationExpression
.
initializer
.
expressions
!=
null
)
{
for
(
Expression
e
:
arrayAllocationExpression
.
initializer
.
expressions
)
{
e
.
traverse
(
this
,
scope
)
;
}
}
return
false
;
}
