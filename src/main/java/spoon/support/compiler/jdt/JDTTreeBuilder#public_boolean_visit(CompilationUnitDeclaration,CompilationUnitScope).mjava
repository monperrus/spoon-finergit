@Override
public
boolean
visit
(
CompilationUnitDeclaration
compilationUnitDeclaration
,
CompilationUnitScope
scope
)
{
context
.
compilationunitdeclaration
=
scope
.
referenceContext
;
context
.
compilationUnitSpoon
=
getOrCreateCompilationUnit
(
context
.
compilationunitdeclaration
,
getFactory
(
)
)
;
ModuleBinding
enclosingModule
=
scope
.
fPackage
.
enclosingModule
;
CtModule
module
;
if
(
!
enclosingModule
.
isUnnamed
(
)
&&
enclosingModule
.
shortReadableName
(
)
!=
null
&&
enclosingModule
.
shortReadableName
(
)
.
length
>
0
)
{
module
=
getFactory
(
)
.
Module
(
)
.
getOrCreate
(
String
.
valueOf
(
enclosingModule
.
shortReadableName
(
)
)
)
;
}
else
{
module
=
getFactory
(
)
.
Module
(
)
.
getUnnamedModule
(
)
;
}
context
.
compilationUnitSpoon
.
setDeclaredPackage
(
getFactory
(
)
.
Package
(
)
.
getOrCreate
(
CharOperation
.
toString
(
scope
.
currentPackageName
)
,
module
)
)
;
CtPackageDeclaration
packageDeclaration
=
context
.
compilationUnitSpoon
.
getPackageDeclaration
(
)
;
if
(
packageDeclaration
!=
null
)
{
ImportReference
packageRef
=
compilationUnitDeclaration
.
currentPackage
;
if
(
packageRef
!=
null
)
{
char
[
]
content
=
compilationUnitDeclaration
.
compilationResult
.
compilationUnit
.
getContents
(
)
;
int
declStart
=
packageRef
.
declarationSourceStart
;
int
firstComment
=
PositionBuilder
.
findNextNonWhitespace
(
false
,
content
,
packageRef
.
sourceStart
(
)
,
0
)
;
if
(
firstComment
<
packageRef
.
sourceStart
(
)
&&
content
[
firstComment
]
==
'/'
&&
content
[
firstComment
+
1
]
==
'*'
)
{
int
commentEnd
=
PositionBuilder
.
getEndOfComment
(
content
,
packageRef
.
sourceStart
(
)
,
firstComment
)
;
declStart
=
PositionBuilder
.
findNextNonWhitespace
(
false
,
content
,
packageRef
.
sourceStart
(
)
,
commentEnd
+
1
)
;
}
else
{
declStart
=
firstComment
;
}
packageDeclaration
.
setPosition
(
factory
.
Core
(
)
.
createCompoundSourcePosition
(
context
.
compilationUnitSpoon
,
packageRef
.
sourceStart
(
)
,
packageRef
.
sourceEnd
(
)
,
declStart
,
packageRef
.
declarationEnd
,
context
.
compilationUnitSpoon
.
getLineSeparatorPositions
(
)
)
)
;
}
}
return
true
;
}
