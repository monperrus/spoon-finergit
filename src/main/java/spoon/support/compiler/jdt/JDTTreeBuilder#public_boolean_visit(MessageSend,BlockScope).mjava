@Override
public
boolean
visit
(
MessageSend
messageSend
,
BlockScope
scope
)
{
if
(
messageSend
.
actualReceiverType
==
null
||
!
messageSend
.
actualReceiverType
.
isAnnotationType
(
)
||
messageSend
.
binding
instanceof
MethodBinding
)
{
CtInvocation
<
Object
>
inv
=
factory
.
Core
(
)
.
createInvocation
(
)
;
if
(
messageSend
.
binding
!=
null
)
{
inv
.
setExecutable
(
references
.
getExecutableReference
(
messageSend
.
binding
)
)
;
if
(
messageSend
.
binding
instanceof
ProblemMethodBinding
)
{
if
(
inv
.
getExecutable
(
)
!=
null
&&
inv
.
getExecutable
(
)
.
getDeclaringType
(
)
!=
null
)
{
final
CtTypeAccess
ta
=
factory
.
Core
(
)
.
createTypeAccess
(
)
;
ta
.
setType
(
inv
.
getExecutable
(
)
.
getDeclaringType
(
)
)
;
inv
.
setTarget
(
ta
)
;
}
if
(
messageSend
.
expectedType
(
)
!=
null
)
{
inv
.
getExecutable
(
)
.
setType
(
references
.
getTypeReference
(
messageSend
.
expectedType
(
)
)
)
;
}
}
}
else
{
CtExecutableReference
<
Object
>
ref
=
factory
.
Core
(
)
.
createExecutableReference
(
)
;
ref
.
setSimpleName
(
new
String
(
messageSend
.
selector
)
)
;
ref
.
setType
(
references
.
getTypeReference
(
messageSend
.
expectedType
(
)
)
)
;
if
(
messageSend
.
receiver
.
resolvedType
==
null
)
{
if
(
messageSend
.
receiver
instanceof
SingleNameReference
||
messageSend
.
receiver
instanceof
QualifiedNameReference
)
{
final
CtTypeReference
<
Object
>
typeReference
=
factory
.
Core
(
)
.
createTypeReference
(
)
;
typeReference
.
setSimpleName
(
messageSend
.
receiver
.
toString
(
)
)
;
ref
.
setDeclaringType
(
typeReference
)
;
}
}
else
{
ref
.
setDeclaringType
(
references
.
getTypeReference
(
messageSend
.
receiver
.
resolvedType
)
)
;
}
if
(
messageSend
.
arguments
!=
null
)
{
final
List
<
CtTypeReference
<
?
>
>
parameters
=
new
ArrayList
<
CtTypeReference
<
?
>
>
(
)
;
for
(
Expression
argument
:
messageSend
.
arguments
)
{
parameters
.
add
(
references
.
getTypeReference
(
argument
.
resolvedType
)
)
;
}
ref
.
setParameters
(
parameters
)
;
}
inv
.
setExecutable
(
ref
)
;
}
context
.
enter
(
inv
,
messageSend
)
;
if
(
!
(
messageSend
.
receiver
.
getClass
(
)
.
equals
(
ThisReference
.
class
)
)
)
{
messageSend
.
receiver
.
traverse
(
this
,
scope
)
;
}
context
.
pushArgument
(
inv
)
;
if
(
messageSend
.
arguments
!=
null
)
{
for
(
Expression
e
:
messageSend
.
arguments
)
{
e
.
traverse
(
this
,
scope
)
;
}
}
if
(
messageSend
.
typeArguments
!=
null
)
{
for
(
TypeReference
typeBinding
:
messageSend
.
typeArguments
)
{
inv
.
getExecutable
(
)
.
addActualTypeArgument
(
references
.
getTypeReference
(
typeBinding
.
resolvedType
)
)
;
}
}
context
.
popArgument
(
inv
)
;
return
false
;
}
else
{
CtAnnotationFieldAccess
<
Object
>
acc
=
factory
.
Core
(
)
.
createAnnotationFieldAccess
(
)
;
acc
.
setVariable
(
references
.
getVariableReference
(
messageSend
.
binding
)
)
;
acc
.
setType
(
references
.
getTypeReference
(
messageSend
.
resolvedType
)
)
;
context
.
enter
(
acc
,
messageSend
)
;
context
.
target
.
push
(
acc
)
;
messageSend
.
receiver
.
traverse
(
this
,
scope
)
;
context
.
target
.
pop
(
)
;
return
false
;
}
}
