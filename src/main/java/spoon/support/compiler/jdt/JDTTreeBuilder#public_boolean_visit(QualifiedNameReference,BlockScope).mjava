@Override
public
boolean
visit
(
QualifiedNameReference
qualifiedNameReference
,
BlockScope
scope
)
{
long
[
]
positions
=
qualifiedNameReference
.
sourcePositions
;
if
(
qualifiedNameReference
.
binding
instanceof
FieldBinding
)
{
CtFieldAccess
<
Object
>
fa
;
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
(
qualifiedNameReference
.
otherBindings
==
null
||
qualifiedNameReference
.
otherBindings
.
length
==
0
)
&&
context
.
assigned
)
{
fa
=
factory
.
Core
(
)
.
createFieldWrite
(
)
;
}
else
{
fa
=
factory
.
Core
(
)
.
createFieldRead
(
)
;
}
CtFieldReference
<
Object
>
ref
=
references
.
getVariableReference
(
qualifiedNameReference
.
fieldBinding
(
)
)
;
if
(
ref
.
isStatic
(
)
)
{
ref
.
setDeclaringType
(
references
.
getTypeReference
(
qualifiedNameReference
.
actualReceiverType
)
)
;
fa
.
setTarget
(
factory
.
Code
(
)
.
createTypeAccess
(
ref
.
getDeclaringType
(
)
)
)
;
}
fa
.
setVariable
(
ref
)
;
if
(
qualifiedNameReference
.
binding
!=
null
&&
!
(
(
FieldBinding
)
qualifiedNameReference
.
binding
)
.
declaringClass
.
isAnonymousType
(
)
&&
qualifiedNameReference
.
tokens
.
length
-
1
==
(
(
FieldBinding
)
qualifiedNameReference
.
binding
)
.
declaringClass
.
compoundName
.
length
)
{
final
ReferenceBinding
declaringClass
=
(
(
FieldBinding
)
qualifiedNameReference
.
binding
)
.
declaringClass
;
final
CtTypeReference
<
Object
>
typeReference
=
references
.
getTypeReference
(
declaringClass
)
;
fa
.
setTarget
(
factory
.
Code
(
)
.
createCodeSnippetExpression
(
typeReference
.
toString
(
)
)
)
;
}
if
(
qualifiedNameReference
.
otherBindings
!=
null
)
{
int
i
=
0
;
int
sourceStart
=
(
int
)
(
positions
[
0
]
>>>
32
)
;
for
(
FieldBinding
b
:
qualifiedNameReference
.
otherBindings
)
{
CtFieldAccess
<
Object
>
other
;
if
(
qualifiedNameReference
.
otherBindings
.
length
==
i
+
1
&&
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
)
{
other
=
factory
.
Core
(
)
.
createFieldWrite
(
)
;
}
else
{
other
=
factory
.
Core
(
)
.
createFieldRead
(
)
;
}
other
.
setVariable
(
references
.
getVariableReference
(
b
)
)
;
other
.
setTarget
(
fa
)
;
if
(
b
!=
null
)
{
other
.
setType
(
references
.
getTypeReference
(
b
.
type
)
)
;
}
else
{
CtTypeReference
<
Object
>
ref2
=
factory
.
Core
(
)
.
createTypeReference
(
)
;
ref2
.
setSimpleName
(
new
String
(
qualifiedNameReference
.
tokens
[
i
+
1
]
)
)
;
other
.
getVariable
(
)
.
setSimpleName
(
ref2
.
getSimpleName
(
)
)
;
other
.
setType
(
ref2
)
;
}
CompilationUnit
cu
=
factory
.
CompilationUnit
(
)
.
create
(
new
String
(
context
.
compilationunitdeclaration
.
getFileName
(
)
)
)
;
int
sourceEnd
=
(
int
)
(
positions
[
i
]
)
;
final
int
[
]
lineSeparatorPositions
=
context
.
compilationunitdeclaration
.
compilationResult
.
lineSeparatorPositions
;
fa
.
setPosition
(
factory
.
Core
(
)
.
createSourcePosition
(
cu
,
sourceStart
,
sourceStart
,
sourceEnd
,
lineSeparatorPositions
)
)
;
fa
=
other
;
i
++
;
}
}
context
.
enter
(
fa
,
qualifiedNameReference
)
;
return
true
;
}
else
if
(
qualifiedNameReference
.
binding
instanceof
VariableBinding
)
{
CtVariableAccess
<
Object
>
va
;
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
(
qualifiedNameReference
.
otherBindings
==
null
||
qualifiedNameReference
.
otherBindings
.
length
==
0
&&
context
.
assigned
)
)
{
va
=
factory
.
Core
(
)
.
createVariableWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createVariableRead
(
)
;
}
va
.
setVariable
(
references
.
getVariableReference
(
(
VariableBinding
)
qualifiedNameReference
.
binding
)
)
;
va
.
setType
(
va
.
getVariable
(
)
.
getType
(
)
)
;
if
(
qualifiedNameReference
.
otherBindings
!=
null
)
{
int
i
=
0
;
int
sourceStart
=
(
int
)
(
positions
[
0
]
>>>
32
)
;
for
(
FieldBinding
b
:
qualifiedNameReference
.
otherBindings
)
{
CtFieldAccess
<
Object
>
other
;
if
(
qualifiedNameReference
.
otherBindings
.
length
==
i
+
1
&&
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
)
{
other
=
factory
.
Core
(
)
.
createFieldWrite
(
)
;
}
else
{
other
=
factory
.
Core
(
)
.
createFieldRead
(
)
;
}
other
.
setVariable
(
references
.
getVariableReference
(
b
)
)
;
other
.
setTarget
(
va
)
;
if
(
b
!=
null
)
{
other
.
setType
(
references
.
getTypeReference
(
b
.
type
)
)
;
}
else
{
CtTypeReference
<
Object
>
ref
=
factory
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setSimpleName
(
new
String
(
qualifiedNameReference
.
tokens
[
qualifiedNameReference
.
tokens
.
length
-
1
]
)
)
;
other
.
setType
(
ref
)
;
}
CompilationUnit
cu
=
factory
.
CompilationUnit
(
)
.
create
(
new
String
(
context
.
compilationunitdeclaration
.
getFileName
(
)
)
)
;
int
sourceEnd
=
(
int
)
(
positions
[
i
]
)
;
final
int
[
]
lineSeparatorPositions
=
context
.
compilationunitdeclaration
.
compilationResult
.
lineSeparatorPositions
;
va
.
setPosition
(
factory
.
Core
(
)
.
createSourcePosition
(
cu
,
sourceStart
,
sourceStart
,
sourceEnd
,
lineSeparatorPositions
)
)
;
va
=
other
;
i
++
;
}
}
context
.
enter
(
va
,
qualifiedNameReference
)
;
return
false
;
}
else
if
(
qualifiedNameReference
.
binding
instanceof
TypeBinding
)
{
CtTypeAccess
<
Object
>
ta
=
factory
.
Code
(
)
.
createTypeAccess
(
references
.
getTypeReference
(
(
TypeBinding
)
qualifiedNameReference
.
binding
)
)
;
context
.
enter
(
ta
,
qualifiedNameReference
)
;
return
false
;
}
else
if
(
qualifiedNameReference
.
binding
instanceof
ProblemBinding
)
{
CtVariableAccess
<
Object
>
va
;
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtInvocation
)
{
final
CtTypeReference
<
Object
>
typeReference
=
factory
.
Core
(
)
.
createTypeReference
(
)
;
typeReference
.
setSimpleName
(
qualifiedNameReference
.
toString
(
)
)
;
final
CtTypeAccess
<
Object
>
ta
=
factory
.
Code
(
)
.
createTypeAccess
(
typeReference
)
;
context
.
enter
(
ta
,
qualifiedNameReference
)
;
return
false
;
}
else
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
context
.
assigned
)
{
va
=
factory
.
Core
(
)
.
createFieldWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createFieldRead
(
)
;
}
va
.
setVariable
(
references
.
getVariableReference
(
(
ProblemBinding
)
qualifiedNameReference
.
binding
)
)
;
if
(
va
.
getVariable
(
)
instanceof
CtFieldReference
)
{
final
char
[
]
[
]
declaringClass
=
CharOperation
.
subarray
(
qualifiedNameReference
.
tokens
,
0
,
qualifiedNameReference
.
tokens
.
length
-
1
)
;
final
MissingTypeBinding
declaringType
=
context
.
compilationunitdeclaration
.
scope
.
environment
.
createMissingType
(
null
,
declaringClass
)
;
(
(
CtFieldReference
)
va
.
getVariable
(
)
)
.
setDeclaringType
(
references
.
getTypeReference
(
declaringType
)
)
;
(
(
CtFieldReference
)
va
.
getVariable
(
)
)
.
setStatic
(
true
)
;
}
va
.
getVariable
(
)
.
setSimpleName
(
createTypeName
(
CharOperation
.
subarray
(
qualifiedNameReference
.
tokens
,
qualifiedNameReference
.
tokens
.
length
-
1
,
qualifiedNameReference
.
tokens
.
length
)
)
)
;
context
.
enter
(
va
,
qualifiedNameReference
)
;
return
false
;
}
else
{
CtVariableAccess
<
Object
>
va
=
null
;
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
context
.
assigned
)
{
va
=
factory
.
Core
(
)
.
createVariableWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createVariableRead
(
)
;
}
CtVariableReference
<
Object
>
varRef
=
new
CtUnboundVariableReferenceImpl
<
Object
>
(
)
;
varRef
.
setSimpleName
(
qualifiedNameReference
.
toString
(
)
)
;
va
.
setVariable
(
varRef
)
;
context
.
enter
(
va
,
qualifiedNameReference
)
;
return
false
;
}
}
