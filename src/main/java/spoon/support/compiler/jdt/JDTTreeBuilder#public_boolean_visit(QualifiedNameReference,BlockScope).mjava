@Override
public
boolean
visit
(
QualifiedNameReference
qualifiedNameReference
,
BlockScope
scope
)
{
long
[
]
positions
=
qualifiedNameReference
.
sourcePositions
;
if
(
qualifiedNameReference
.
binding
instanceof
FieldBinding
)
{
CtFieldAccess
<
Object
>
fa
=
factory
.
Core
(
)
.
createFieldAccess
(
)
;
CtFieldReference
ref
=
references
.
getVariableReference
(
qualifiedNameReference
.
fieldBinding
(
)
)
;
ref
.
setDeclaringType
(
(
CtTypeReference
)
references
.
getTypeReference
(
qualifiedNameReference
.
actualReceiverType
)
)
;
fa
.
setVariable
(
ref
)
;
if
(
qualifiedNameReference
.
otherBindings
!=
null
)
{
int
i
=
0
;
int
sourceStart
=
(
int
)
(
positions
[
0
]
>>>
32
)
;
for
(
FieldBinding
b
:
qualifiedNameReference
.
otherBindings
)
{
if
(
b
!=
null
)
{
CtFieldAccess
<
Object
>
other
=
factory
.
Core
(
)
.
createFieldAccess
(
)
;
other
.
setVariable
(
references
.
getVariableReference
(
b
)
)
;
other
.
setTarget
(
fa
)
;
fa
.
setParent
(
other
)
;
CompilationUnit
cu
=
factory
.
CompilationUnit
(
)
.
create
(
new
String
(
context
.
compilationunitdeclaration
.
getFileName
(
)
)
)
;
int
sourceEnd
=
(
int
)
(
positions
[
i
]
)
;
fa
.
setPosition
(
factory
.
Core
(
)
.
createSourcePosition
(
cu
,
sourceStart
,
sourceEnd
,
context
.
compilationunitdeclaration
.
compilationResult
.
lineSeparatorPositions
)
)
;
fa
=
other
;
i
++
;
}
}
}
context
.
enter
(
fa
,
qualifiedNameReference
)
;
return
true
;
}
else
if
(
qualifiedNameReference
.
binding
instanceof
VariableBinding
)
{
CtVariableAccess
<
Object
>
va
=
factory
.
Core
(
)
.
createVariableAccess
(
)
;
va
.
setVariable
(
references
.
getVariableReference
(
(
VariableBinding
)
qualifiedNameReference
.
binding
)
)
;
va
.
setType
(
va
.
getVariable
(
)
.
getType
(
)
)
;
if
(
qualifiedNameReference
.
otherBindings
!=
null
)
{
int
i
=
0
;
int
sourceStart
=
(
int
)
(
positions
[
0
]
>>>
32
)
;
for
(
FieldBinding
b
:
qualifiedNameReference
.
otherBindings
)
{
CtFieldAccess
<
Object
>
fa
=
factory
.
Core
(
)
.
createFieldAccess
(
)
;
fa
.
setTarget
(
va
)
;
CtVariableReference
<
Object
>
varRef
=
references
.
getVariableReference
(
b
)
;
if
(
varRef
!=
null
)
{
fa
.
setVariable
(
varRef
)
;
}
if
(
b
!=
null
)
fa
.
setType
(
references
.
getTypeReference
(
b
.
type
)
)
;
else
{
CtTypeReference
<
Object
>
ref
=
factory
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setSimpleName
(
new
String
(
qualifiedNameReference
.
tokens
[
qualifiedNameReference
.
tokens
.
length
-
1
]
)
)
;
fa
.
setType
(
ref
)
;
}
va
.
setParent
(
fa
)
;
CompilationUnit
cu
=
factory
.
CompilationUnit
(
)
.
create
(
new
String
(
context
.
compilationunitdeclaration
.
getFileName
(
)
)
)
;
int
sourceEnd
=
(
int
)
(
positions
[
i
]
)
;
va
.
setPosition
(
factory
.
Core
(
)
.
createSourcePosition
(
cu
,
sourceStart
,
sourceEnd
,
context
.
compilationunitdeclaration
.
compilationResult
.
lineSeparatorPositions
)
)
;
va
=
fa
;
i
++
;
}
}
context
.
enter
(
va
,
qualifiedNameReference
)
;
return
false
;
}
else
{
CtVariableAccess
<
Object
>
va
=
factory
.
Core
(
)
.
createVariableAccess
(
)
;
CtVariableReference
<
Object
>
varRef
=
new
CtUnboundVariableReferenceImpl
(
)
;
varRef
.
setSimpleName
(
qualifiedNameReference
.
toString
(
)
)
;
va
.
setVariable
(
varRef
)
;
context
.
enter
(
va
,
qualifiedNameReference
)
;
return
false
;
}
}
