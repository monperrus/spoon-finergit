@Override
public
boolean
visit
(
QualifiedTypeReference
qualifiedTypeReference
,
BlockScope
scope
)
{
if
(
skipTypeInAnnotation
)
{
return
true
;
}
if
(
context
.
stack
.
peekFirst
(
)
.
node
instanceof
UnionTypeReference
)
{
CtTypeReference
<
Throwable
>
reference
=
references
.
getTypeReference
(
qualifiedTypeReference
.
resolvedType
)
;
if
(
reference
==
null
)
{
reference
=
getFactory
(
)
.
createReference
(
qualifiedTypeReference
.
toString
(
)
)
;
}
context
.
enter
(
reference
,
qualifiedTypeReference
)
;
return
true
;
}
else
if
(
context
.
stack
.
peekFirst
(
)
.
element
instanceof
CtCatch
)
{
context
.
enter
(
helper
.
createCatchVariable
(
qualifiedTypeReference
)
,
qualifiedTypeReference
)
;
return
true
;
}
context
.
enter
(
factory
.
Code
(
)
.
createTypeAccessWithoutCloningReference
(
references
.
buildTypeReference
(
qualifiedTypeReference
,
scope
)
)
,
qualifiedTypeReference
)
;
return
true
;
}
