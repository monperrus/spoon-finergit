@Override
public
boolean
visit
(
SingleNameReference
singleNameReference
,
BlockScope
scope
)
{
CtVariableAccess
<
Object
>
va
=
null
;
if
(
singleNameReference
.
binding
instanceof
FieldBinding
)
{
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
context
.
assigned
)
{
va
=
factory
.
Core
(
)
.
createFieldWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createFieldRead
(
)
;
}
va
.
setVariable
(
references
.
getVariableReference
(
singleNameReference
.
fieldBinding
(
)
)
)
;
}
else
if
(
singleNameReference
.
binding
instanceof
VariableBinding
)
{
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
context
.
assigned
)
{
va
=
factory
.
Core
(
)
.
createVariableWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createVariableRead
(
)
;
}
va
.
setVariable
(
references
.
getVariableReference
(
(
VariableBinding
)
singleNameReference
.
binding
)
)
;
}
else
if
(
singleNameReference
.
binding
instanceof
TypeBinding
)
{
CtTypeAccess
<
Object
>
ta
=
factory
.
Code
(
)
.
createTypeAccess
(
references
.
getTypeReference
(
(
TypeBinding
)
singleNameReference
.
binding
)
)
;
context
.
enter
(
ta
,
singleNameReference
)
;
}
else
if
(
singleNameReference
.
binding
instanceof
ProblemBinding
)
{
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtInvocation
)
{
CtTypeReference
<
Object
>
typeReference
=
factory
.
Core
(
)
.
createTypeReference
(
)
;
typeReference
.
setSimpleName
(
new
String
(
singleNameReference
.
binding
.
readableName
(
)
)
)
;
final
CtReference
declaring
=
references
.
getDeclaringReferenceFromImports
(
singleNameReference
.
token
)
;
if
(
declaring
instanceof
CtPackageReference
)
{
typeReference
.
setPackage
(
(
CtPackageReference
)
declaring
)
;
}
else
if
(
declaring
instanceof
CtTypeReference
)
{
typeReference
=
(
CtTypeReference
<
Object
>
)
declaring
;
}
final
CtTypeAccess
<
Object
>
ta
=
factory
.
Code
(
)
.
createTypeAccess
(
typeReference
)
;
context
.
enter
(
ta
,
singleNameReference
)
;
return
true
;
}
else
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
context
.
assigned
)
{
va
=
factory
.
Core
(
)
.
createFieldWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createFieldRead
(
)
;
}
va
.
setVariable
(
references
.
getVariableReference
(
(
ProblemBinding
)
singleNameReference
.
binding
)
)
;
}
else
if
(
singleNameReference
.
binding
==
null
)
{
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
context
.
assigned
)
{
va
=
factory
.
Core
(
)
.
createVariableWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createVariableRead
(
)
;
}
CtLocalVariableReference
ref
=
factory
.
Core
(
)
.
createLocalVariableReference
(
)
;
ref
.
setSimpleName
(
new
String
(
singleNameReference
.
token
)
)
;
ref
.
setDeclaration
(
(
CtLocalVariable
)
getLocalVariableDeclaration
(
ref
.
getSimpleName
(
)
)
)
;
va
.
setVariable
(
ref
)
;
}
if
(
va
!=
null
)
{
context
.
enter
(
va
,
singleNameReference
)
;
}
return
true
;
}
