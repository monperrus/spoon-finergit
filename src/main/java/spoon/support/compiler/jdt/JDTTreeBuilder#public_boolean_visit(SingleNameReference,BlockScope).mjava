@Override
public
boolean
visit
(
SingleNameReference
singleNameReference
,
BlockScope
scope
)
{
if
(
singleNameReference
.
binding
instanceof
FieldBinding
)
{
context
.
enter
(
helper
.
createFieldAccess
(
singleNameReference
)
,
singleNameReference
)
;
}
else
if
(
singleNameReference
.
binding
instanceof
VariableBinding
)
{
context
.
enter
(
helper
.
createVariableAccess
(
singleNameReference
)
,
singleNameReference
)
;
}
else
if
(
singleNameReference
.
binding
instanceof
TypeBinding
)
{
context
.
enter
(
factory
.
Code
(
)
.
createTypeAccessWithoutCloningReference
(
references
.
getTypeReference
(
(
TypeBinding
)
singleNameReference
.
binding
)
)
,
singleNameReference
)
;
}
else
if
(
singleNameReference
.
binding
instanceof
ProblemBinding
)
{
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtInvocation
&&
Character
.
isUpperCase
(
CharOperation
.
charToString
(
singleNameReference
.
token
)
.
charAt
(
0
)
)
)
{
context
.
enter
(
helper
.
createTypeAccessNoClasspath
(
singleNameReference
)
,
singleNameReference
)
;
}
else
{
context
.
enter
(
helper
.
createFieldAccessNoClasspath
(
singleNameReference
)
,
singleNameReference
)
;
}
}
else
if
(
singleNameReference
.
binding
==
null
)
{
CtExpression
access
=
helper
.
createVariableAccessNoClasspath
(
singleNameReference
)
;
if
(
access
==
null
)
{
access
=
helper
.
createTypeAccessNoClasspath
(
singleNameReference
)
;
}
context
.
enter
(
access
,
singleNameReference
)
;
}
return
true
;
}
