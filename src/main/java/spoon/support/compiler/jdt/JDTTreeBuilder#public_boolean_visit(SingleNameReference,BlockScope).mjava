@Override
public
boolean
visit
(
SingleNameReference
singleNameReference
,
BlockScope
scope
)
{
CtVariableAccess
<
Object
>
va
=
null
;
if
(
singleNameReference
.
binding
instanceof
FieldBinding
)
{
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
context
.
assigned
)
{
va
=
factory
.
Core
(
)
.
createFieldWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createFieldRead
(
)
;
}
va
.
setVariable
(
references
.
getVariableReference
(
singleNameReference
.
fieldBinding
(
)
)
)
;
}
else
if
(
singleNameReference
.
binding
instanceof
VariableBinding
)
{
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
context
.
assigned
)
{
va
=
factory
.
Core
(
)
.
createVariableWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createVariableRead
(
)
;
}
va
.
setVariable
(
references
.
getVariableReference
(
(
VariableBinding
)
singleNameReference
.
binding
)
)
;
}
else
if
(
singleNameReference
.
binding
instanceof
TypeBinding
)
{
CtTypeAccess
<
Object
>
ta
=
factory
.
Core
(
)
.
createTypeAccess
(
)
;
ta
.
setType
(
references
.
getTypeReference
(
(
TypeBinding
)
singleNameReference
.
binding
)
)
;
context
.
enter
(
ta
,
singleNameReference
)
;
}
else
if
(
singleNameReference
.
binding
instanceof
ProblemBinding
)
{
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtInvocation
)
{
final
CtTypeAccess
<
Object
>
ta
=
factory
.
Core
(
)
.
createTypeAccess
(
)
;
final
CtTypeReference
<
Object
>
typeReference
=
factory
.
Core
(
)
.
createTypeReference
(
)
;
typeReference
.
setSimpleName
(
new
String
(
singleNameReference
.
binding
.
readableName
(
)
)
)
;
if
(
context
.
compilationunitdeclaration
!=
null
&&
context
.
compilationunitdeclaration
.
imports
!=
null
)
{
for
(
ImportReference
anImport
:
context
.
compilationunitdeclaration
.
imports
)
{
if
(
CharOperation
.
equals
(
anImport
.
getImportName
(
)
[
anImport
.
getImportName
(
)
.
length
-
1
]
,
singleNameReference
.
token
)
)
{
char
[
]
[
]
packageName
=
CharOperation
.
subarray
(
anImport
.
getImportName
(
)
,
0
,
anImport
.
getImportName
(
)
.
length
-
1
)
;
CtPackageReference
packageRef
=
factory
.
Core
(
)
.
createPackageReference
(
)
;
packageRef
.
setSimpleName
(
CharOperation
.
toString
(
packageName
)
)
;
typeReference
.
setPackage
(
packageRef
)
;
break
;
}
}
}
ta
.
setType
(
typeReference
)
;
context
.
enter
(
ta
,
singleNameReference
)
;
return
true
;
}
else
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
context
.
assigned
)
{
va
=
factory
.
Core
(
)
.
createFieldWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createFieldRead
(
)
;
}
va
.
setVariable
(
references
.
getVariableReference
(
(
ProblemBinding
)
singleNameReference
.
binding
)
)
;
}
else
if
(
singleNameReference
.
binding
==
null
)
{
if
(
context
.
stack
.
peek
(
)
.
element
instanceof
CtAssignment
&&
context
.
assigned
)
{
va
=
factory
.
Core
(
)
.
createVariableWrite
(
)
;
}
else
{
va
=
factory
.
Core
(
)
.
createVariableRead
(
)
;
}
CtLocalVariableReference
ref
=
factory
.
Core
(
)
.
createLocalVariableReference
(
)
;
ref
.
setSimpleName
(
new
String
(
singleNameReference
.
token
)
)
;
ref
.
setDeclaration
(
(
CtLocalVariable
)
getLocalVariableDeclaration
(
ref
.
getSimpleName
(
)
)
)
;
va
.
setVariable
(
ref
)
;
}
if
(
va
!=
null
)
{
context
.
enter
(
va
,
singleNameReference
)
;
}
return
true
;
}
