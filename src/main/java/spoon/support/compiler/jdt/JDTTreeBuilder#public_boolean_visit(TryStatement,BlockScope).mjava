@Override
public
boolean
visit
(
TryStatement
tryStatement
,
BlockScope
scope
)
{
CtTry
t
=
factory
.
Core
(
)
.
createTry
(
)
;
context
.
enter
(
t
,
tryStatement
)
;
for
(
LocalDeclaration
localDeclaration
:
tryStatement
.
resources
)
{
localDeclaration
.
traverse
(
this
,
scope
)
;
}
tryStatement
.
tryBlock
.
traverse
(
this
,
scope
)
;
if
(
tryStatement
.
catchArguments
!=
null
)
{
for
(
int
i
=
0
;
i
<
tryStatement
.
catchArguments
.
length
;
i
++
)
{
Argument
jdtCatch
=
tryStatement
.
catchArguments
[
i
]
;
if
(
jdtCatch
.
type
instanceof
SingleTypeReference
)
{
CtTypeReference
<
Throwable
>
r
=
references
.
getTypeReference
(
jdtCatch
.
type
.
resolvedType
)
;
CtCatch
c
=
createCtCatch
(
jdtCatch
,
r
)
;
tryStatement
.
catchBlocks
[
i
]
.
traverse
(
this
,
scope
)
;
context
.
exit
(
jdtCatch
)
;
}
if
(
jdtCatch
.
type
instanceof
UnionTypeReference
)
{
UnionTypeReference
utr
=
(
UnionTypeReference
)
jdtCatch
.
type
;
for
(
TypeReference
type
:
utr
.
typeReferences
)
{
CtTypeReference
<
Throwable
>
r
=
references
.
getTypeReference
(
type
.
resolvedType
)
;
CtCatch
c
=
createCtCatch
(
jdtCatch
,
r
)
;
tryStatement
.
catchBlocks
[
i
]
.
traverse
(
this
,
scope
)
;
context
.
exit
(
jdtCatch
)
;
}
}
}
}
if
(
tryStatement
.
finallyBlock
!=
null
)
{
context
.
finallyzer
.
push
(
t
)
;
tryStatement
.
finallyBlock
.
traverse
(
this
,
scope
)
;
context
.
finallyzer
.
pop
(
)
;
}
return
false
;
}
