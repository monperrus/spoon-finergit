@Override
public
boolean
visit
(
TypeDeclaration
typeDeclaration
,
CompilationUnitScope
scope
)
{
if
(
new
String
(
typeDeclaration
.
name
)
.
equals
(
"package-info"
)
)
{
CtPackage
pack
=
factory
.
Package
(
)
.
getOrCreate
(
new
String
(
typeDeclaration
.
binding
.
fPackage
.
readableName
(
)
)
)
;
context
.
compilationunitdeclaration
=
scope
.
referenceContext
;
context
.
enter
(
pack
,
typeDeclaration
)
;
if
(
typeDeclaration
.
annotations
!=
null
)
for
(
Annotation
a
:
typeDeclaration
.
annotations
)
{
a
.
traverse
(
this
,
(
BlockScope
)
null
)
;
}
return
true
;
}
else
{
CtSimpleType
<
?
>
type
=
createType
(
typeDeclaration
)
;
type
.
setDocComment
(
getJavaDoc
(
typeDeclaration
.
javadoc
,
scope
.
referenceContext
)
)
;
CtPackage
pack
=
null
;
if
(
typeDeclaration
.
binding
.
fPackage
.
shortReadableName
(
)
!=
null
&&
typeDeclaration
.
binding
.
fPackage
.
shortReadableName
(
)
.
length
>
0
)
{
pack
=
factory
.
Package
(
)
.
getOrCreate
(
new
String
(
typeDeclaration
.
binding
.
fPackage
.
shortReadableName
(
)
)
)
;
}
else
{
pack
=
factory
.
Package
(
)
.
getOrCreate
(
CtPackage
.
TOP_LEVEL_PACKAGE_NAME
)
;
}
context
.
enter
(
pack
,
typeDeclaration
)
;
context
.
compilationunitdeclaration
=
scope
.
referenceContext
;
context
.
enter
(
type
,
typeDeclaration
)
;
if
(
typeDeclaration
.
annotations
!=
null
)
for
(
Annotation
a
:
typeDeclaration
.
annotations
)
{
a
.
traverse
(
this
,
(
BlockScope
)
null
)
;
}
if
(
typeDeclaration
.
memberTypes
!=
null
)
{
int
length
=
typeDeclaration
.
memberTypes
.
length
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
typeDeclaration
.
memberTypes
[
i
]
.
traverse
(
this
,
typeDeclaration
.
scope
)
;
}
if
(
typeDeclaration
.
fields
!=
null
)
{
int
length
=
typeDeclaration
.
fields
.
length
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
{
FieldDeclaration
field
;
if
(
(
field
=
typeDeclaration
.
fields
[
i
]
)
.
isStatic
(
)
)
{
field
.
traverse
(
this
,
typeDeclaration
.
staticInitializerScope
)
;
}
else
{
field
.
traverse
(
this
,
typeDeclaration
.
initializerScope
)
;
}
}
}
if
(
typeDeclaration
.
methods
!=
null
)
{
int
length
=
typeDeclaration
.
methods
.
length
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
typeDeclaration
.
methods
[
i
]
.
traverse
(
this
,
typeDeclaration
.
scope
)
;
}
return
false
;
}
}
