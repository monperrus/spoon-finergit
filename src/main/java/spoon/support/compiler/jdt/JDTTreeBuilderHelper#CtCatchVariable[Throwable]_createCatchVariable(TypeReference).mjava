/** 
 * Creates a catch variable from a type reference.
 * @param typeReference Correspond to the exception type declared in the catch.
 * @return a catch variable.
 */
CtCatchVariable
<
Throwable
>
createCatchVariable
(
TypeReference
typeReference
)
{
final
Argument
jdtCatch
=
(
Argument
)
jdtTreeBuilder
.
getContextBuilder
(
)
.
stack
.
peekFirst
(
)
.
node
;
final
Set
<
ModifierKind
>
modifiers
=
getModifiers
(
jdtCatch
.
modifiers
)
;
if
(
typeReference
instanceof
UnionTypeReference
)
{
return
jdtTreeBuilder
.
getFactory
(
)
.
Code
(
)
.
createCatchVariable
(
null
,
CharOperation
.
charToString
(
jdtCatch
.
name
)
,
modifiers
.
toArray
(
new
ModifierKind
[
]
)
)
;
}
else
{
return
jdtTreeBuilder
.
getFactory
(
)
.
Code
(
)
.
createCatchVariable
(
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getTypeReference
(
typeReference
.
resolvedType
)
,
CharOperation
.
charToString
(
jdtCatch
.
name
)
,
modifiers
.
toArray
(
new
ModifierKind
[
]
)
)
;
}
}
