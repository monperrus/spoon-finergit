/** 
 * Creates a class, an enum, an interface or a annotation type.
 * @return a type.
 */
CtType
<
?
>
createType
(
TypeDeclaration
typeDeclaration
)
{
CtType
<
?
>
type
;
if
(
(
typeDeclaration
.
modifiers
&
ClassFileConstants
.
AccAnnotation
)
!=
0
)
{
type
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createAnnotationType
(
)
;
}
else
if
(
(
typeDeclaration
.
modifiers
&
ClassFileConstants
.
AccEnum
)
!=
0
)
{
type
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createEnum
(
)
;
}
else
if
(
(
typeDeclaration
.
modifiers
&
ClassFileConstants
.
AccInterface
)
!=
0
)
{
type
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createInterface
(
)
;
}
else
{
type
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createClass
(
)
;
}
type
.
setExtendedModifiers
(
getModifiers
(
typeDeclaration
.
modifiers
,
false
,
false
)
)
;
jdtTreeBuilder
.
getContextBuilder
(
)
.
enter
(
type
,
typeDeclaration
)
;
if
(
typeDeclaration
.
superInterfaces
!=
null
)
{
for
(
TypeReference
ref
:
typeDeclaration
.
superInterfaces
)
{
final
CtTypeReference
superInterface
=
jdtTreeBuilder
.
references
.
buildTypeReference
(
ref
,
null
)
;
type
.
addSuperInterface
(
superInterface
)
;
}
}
if
(
type
instanceof
CtClass
)
{
if
(
typeDeclaration
.
superclass
!=
null
)
{
(
(
CtClass
)
type
)
.
setSuperclass
(
jdtTreeBuilder
.
references
.
buildTypeReference
(
typeDeclaration
.
superclass
,
typeDeclaration
.
scope
)
)
;
}
if
(
typeDeclaration
.
binding
!=
null
&&
(
typeDeclaration
.
binding
.
isAnonymousType
(
)
||
(
typeDeclaration
.
binding
instanceof
LocalTypeBinding
&&
typeDeclaration
.
binding
.
enclosingMethod
(
)
!=
null
)
)
)
{
type
.
setSimpleName
(
computeAnonymousName
(
typeDeclaration
.
binding
.
constantPoolName
(
)
)
)
;
}
else
{
type
.
setSimpleName
(
new
String
(
typeDeclaration
.
name
)
)
;
}
}
else
{
type
.
setSimpleName
(
new
String
(
typeDeclaration
.
name
)
)
;
}
return
type
;
}
