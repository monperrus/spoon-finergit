/** 
 * Creates an executable reference expression.
 * @param referenceExpression Used to get the executable reference.
 * @return an executable reference expression.
 */
<
T
,
E
extends
CtExpression
<
?
>
>
CtExecutableReferenceExpression
<
T
,
E
>
createExecutableReferenceExpression
(
ReferenceExpression
referenceExpression
)
{
CtExecutableReferenceExpression
<
T
,
E
>
executableRef
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createExecutableReferenceExpression
(
)
;
CtExecutableReference
<
T
>
executableReference
=
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getExecutableReference
(
referenceExpression
.
binding
)
;
if
(
executableReference
==
null
)
{
executableReference
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createExecutableReference
(
)
;
executableReference
.
setSimpleName
(
CharOperation
.
charToString
(
referenceExpression
.
selector
)
)
;
executableReference
.
setDeclaringType
(
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getTypeReference
(
referenceExpression
.
lhs
.
resolvedType
)
)
;
}
final
CtTypeReference
<
T
>
returnType
=
executableReference
.
getType
(
)
;
executableReference
.
setType
(
returnType
==
null
?
null
:
returnType
.
clone
(
)
)
;
executableRef
.
setExecutable
(
executableReference
)
;
return
executableRef
;
}
