/** 
 * Creates a field access from its single name.
 * @param singleNameReference Used to build a variable reference and a target which will be contained in the field access.
 * @return a field access.
 */
<
T
>
CtFieldAccess
<
T
>
createFieldAccess
(
SingleNameReference
singleNameReference
)
{
CtFieldAccess
<
T
>
va
;
if
(
isLhsAssignment
(
jdtTreeBuilder
.
getContextBuilder
(
)
,
singleNameReference
)
)
{
va
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createFieldWrite
(
)
;
}
else
{
va
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createFieldRead
(
)
;
}
va
.
setVariable
(
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getVariableReference
(
singleNameReference
.
fieldBinding
(
)
.
original
(
)
)
)
;
if
(
va
.
getVariable
(
)
!=
null
)
{
final
CtFieldReference
<
T
>
ref
=
va
.
getVariable
(
)
;
if
(
ref
.
isStatic
(
)
&&
!
ref
.
getDeclaringType
(
)
.
isAnonymous
(
)
)
{
va
.
setTarget
(
jdtTreeBuilder
.
getFactory
(
)
.
Code
(
)
.
createTypeAccess
(
ref
.
getDeclaringType
(
)
)
)
;
}
else
if
(
!
ref
.
isStatic
(
)
)
{
va
.
setTarget
(
jdtTreeBuilder
.
getFactory
(
)
.
Code
(
)
.
createThisAccess
(
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getTypeReference
(
singleNameReference
.
actualReceiverType
)
,
true
)
)
;
}
}
return
va
;
}
