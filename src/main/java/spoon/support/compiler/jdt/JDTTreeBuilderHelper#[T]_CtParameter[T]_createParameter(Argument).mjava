/** 
 * Creates a parameter. If the argument have a type == null, we get the type from its binding. A type == null is possible when this type is implicit like in a lambda where you don't need to specify the type of parameters.
 * @param argument Used to get the name of the parameter, the modifiers, know if it is a var args parameter.
 * @return a parameter.
 */
<
T
>
CtParameter
<
T
>
createParameter
(
Argument
argument
)
{
CtParameter
<
T
>
p
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createParameter
(
)
;
p
.
setSimpleName
(
CharOperation
.
charToString
(
argument
.
name
)
)
;
p
.
setVarArgs
(
argument
.
isVarArgs
(
)
)
;
p
.
setExtendedModifiers
(
getModifiers
(
argument
.
modifiers
,
false
,
false
)
)
;
if
(
argument
.
binding
!=
null
&&
argument
.
binding
.
type
!=
null
&&
argument
.
type
==
null
)
{
p
.
setType
(
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getTypeReference
(
argument
.
binding
.
type
)
)
;
p
.
getType
(
)
.
setImplicit
(
argument
.
type
==
null
)
;
if
(
p
.
getType
(
)
instanceof
CtArrayTypeReference
)
{
(
(
CtArrayTypeReference
)
p
.
getType
(
)
)
.
getComponentType
(
)
.
setImplicit
(
argument
.
type
==
null
)
;
}
}
return
p
;
}
