/** 
 * Creates a type access from its qualified name.
 * @param qualifiedNameReference Used to get the declaring class of this type. This qualified type should have a type as target.
 * @return a type access.
 */
<
T
>
CtTypeAccess
<
T
>
createTypeAccessNoClasspath
(
QualifiedNameReference
qualifiedNameReference
)
{
CtTypeReference
<
T
>
typeReference
;
if
(
qualifiedNameReference
.
binding
instanceof
ProblemBinding
)
{
typeReference
=
jdtTreeBuilder
.
getFactory
(
)
.
Type
(
)
.
createReference
(
CharOperation
.
toString
(
qualifiedNameReference
.
tokens
)
)
;
}
else
if
(
qualifiedNameReference
.
binding
instanceof
FieldBinding
)
{
final
ReferenceBinding
declaringClass
=
(
(
FieldBinding
)
qualifiedNameReference
.
binding
)
.
declaringClass
;
typeReference
=
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getTypeReference
(
declaringClass
)
;
}
else
{
char
[
]
[
]
packageName
=
CharOperation
.
subarray
(
qualifiedNameReference
.
tokens
,
0
,
qualifiedNameReference
.
tokens
.
length
-
1
)
;
char
[
]
[
]
className
=
CharOperation
.
subarray
(
qualifiedNameReference
.
tokens
,
qualifiedNameReference
.
tokens
.
length
-
1
,
qualifiedNameReference
.
tokens
.
length
)
;
if
(
packageName
.
length
>
0
)
{
final
PackageBinding
aPackage
=
jdtTreeBuilder
.
getContextBuilder
(
)
.
compilationunitdeclaration
.
scope
.
environment
.
createPackage
(
packageName
)
;
final
MissingTypeBinding
declaringType
=
jdtTreeBuilder
.
getContextBuilder
(
)
.
compilationunitdeclaration
.
scope
.
environment
.
createMissingType
(
aPackage
,
className
)
;
typeReference
=
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getTypeReference
(
declaringType
)
;
}
else
{
typeReference
=
jdtTreeBuilder
.
getFactory
(
)
.
Type
(
)
.
createReference
(
qualifiedNameReference
.
toString
(
)
)
;
}
}
final
CtTypeAccess
<
T
>
typeAccess
=
jdtTreeBuilder
.
getFactory
(
)
.
Code
(
)
.
createTypeAccess
(
typeReference
)
;
long
[
]
positions
=
qualifiedNameReference
.
sourcePositions
;
int
sourceStart
=
qualifiedNameReference
.
sourceStart
(
)
;
int
sourceEnd
=
(
int
)
(
positions
[
qualifiedNameReference
.
indexOfFirstFieldBinding
-
1
]
>>>
32
)
-
2
;
typeAccess
.
setPosition
(
jdtTreeBuilder
.
getPositionBuilder
(
)
.
buildPosition
(
sourceStart
,
sourceEnd
)
)
;
return
typeAccess
;
}
