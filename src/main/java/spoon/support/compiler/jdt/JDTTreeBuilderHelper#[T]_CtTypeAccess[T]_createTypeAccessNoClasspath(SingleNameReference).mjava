/** 
 * Creates a type access from its single name.
 * @param singleNameReference Used to get the simple name of the type.
 * @return a type access.
 */
<
T
>
CtTypeAccess
<
T
>
createTypeAccessNoClasspath
(
SingleNameReference
singleNameReference
)
{
final
CtTypeReference
<
T
>
typeReference
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeReference
(
)
;
if
(
singleNameReference
.
binding
==
null
)
{
typeReference
.
setSimpleName
(
CharOperation
.
charToString
(
singleNameReference
.
token
)
)
;
}
else
{
typeReference
.
setSimpleName
(
CharOperation
.
charToString
(
singleNameReference
.
binding
.
readableName
(
)
)
)
;
}
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
setPackageOrDeclaringType
(
typeReference
,
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getDeclaringReferenceFromImports
(
singleNameReference
.
token
)
)
;
return
jdtTreeBuilder
.
getFactory
(
)
.
Code
(
)
.
createTypeAccess
(
typeReference
)
;
}
