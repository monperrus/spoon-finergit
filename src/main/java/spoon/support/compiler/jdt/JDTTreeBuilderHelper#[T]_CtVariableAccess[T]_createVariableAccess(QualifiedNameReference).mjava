/** 
 * Creates a variable or a field access from its qualified name.
 * @param qualifiedNameReference Used to build the variable access. See all sub methods of this class to understand its usage.
 * @return a variable access.
 */
<
T
>
CtVariableAccess
<
T
>
createVariableAccess
(
QualifiedNameReference
qualifiedNameReference
)
{
long
[
]
positions
=
qualifiedNameReference
.
sourcePositions
;
int
sourceStart
=
qualifiedNameReference
.
sourceStart
(
)
;
int
sourceEnd
=
qualifiedNameReference
.
sourceEnd
(
)
;
if
(
qualifiedNameReference
.
indexOfFirstFieldBinding
<
positions
.
length
)
{
sourceEnd
=
(
int
)
(
positions
[
qualifiedNameReference
.
indexOfFirstFieldBinding
]
>>>
32
)
-
2
;
}
CtVariableAccess
<
T
>
va
;
CtVariableReference
<
T
>
ref
;
boolean
fromAssignment
=
isLhsAssignment
(
jdtTreeBuilder
.
getContextBuilder
(
)
,
qualifiedNameReference
)
;
boolean
isOtherBinding
=
qualifiedNameReference
.
otherBindings
==
null
||
qualifiedNameReference
.
otherBindings
.
length
==
0
;
if
(
qualifiedNameReference
.
binding
instanceof
FieldBinding
)
{
ref
=
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getVariableReference
(
qualifiedNameReference
.
fieldBinding
(
)
)
;
ref
.
setPosition
(
jdtTreeBuilder
.
getPositionBuilder
(
)
.
buildPosition
(
getVariableReferenceSourceStart
(
sourceStart
,
sourceEnd
)
,
sourceEnd
)
)
;
va
=
createFieldAccess
(
ref
,
createTargetFieldAccess
(
qualifiedNameReference
,
(
CtFieldReference
<
Object
>
)
ref
)
,
isOtherBinding
&&
fromAssignment
)
;
}
else
{
ref
=
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getVariableReference
(
(
VariableBinding
)
qualifiedNameReference
.
binding
)
;
ref
.
setPosition
(
jdtTreeBuilder
.
getPositionBuilder
(
)
.
buildPosition
(
getVariableReferenceSourceStart
(
sourceStart
,
sourceEnd
)
,
sourceEnd
)
)
;
va
=
createVariableAccess
(
ref
,
isOtherBinding
&&
fromAssignment
)
;
}
if
(
qualifiedNameReference
.
otherBindings
!=
null
)
{
int
i
=
0
;
va
.
setPosition
(
jdtTreeBuilder
.
getPositionBuilder
(
)
.
buildPosition
(
sourceStart
,
sourceEnd
)
)
;
sourceStart
=
(
int
)
(
positions
[
qualifiedNameReference
.
indexOfFirstFieldBinding
-
1
]
>>>
32
)
;
for
(
FieldBinding
b
:
qualifiedNameReference
.
otherBindings
)
{
isOtherBinding
=
qualifiedNameReference
.
otherBindings
.
length
==
i
+
1
;
CtFieldAccess
<
T
>
other
=
createFieldAccess
(
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getVariableReference
(
b
,
qualifiedNameReference
.
tokens
[
i
+
1
]
)
,
va
,
isOtherBinding
&&
fromAssignment
)
;
if
(
i
+
qualifiedNameReference
.
indexOfFirstFieldBinding
>=
qualifiedNameReference
.
otherBindings
.
length
)
{
sourceEnd
=
qualifiedNameReference
.
sourceEnd
(
)
;
}
else
{
sourceEnd
=
(
int
)
(
positions
[
qualifiedNameReference
.
indexOfFirstFieldBinding
+
i
+
1
]
>>>
32
)
-
2
;
}
other
.
setPosition
(
jdtTreeBuilder
.
getPositionBuilder
(
)
.
buildPosition
(
sourceStart
,
sourceEnd
)
)
;
va
=
other
;
i
++
;
}
}
else
if
(
!
(
qualifiedNameReference
.
binding
instanceof
FieldBinding
)
&&
qualifiedNameReference
.
tokens
.
length
>
1
)
{
sourceStart
=
(
int
)
(
positions
[
0
]
>>>
32
)
;
for
(
int
i
=
1
;
i
<
qualifiedNameReference
.
tokens
.
length
;
i
++
)
{
isOtherBinding
=
qualifiedNameReference
.
tokens
.
length
==
i
+
1
;
CtFieldAccess
<
T
>
other
=
createFieldAccess
(
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getVariableReference
(
null
,
qualifiedNameReference
.
tokens
[
i
]
)
,
va
,
isOtherBinding
&&
fromAssignment
)
;
sourceEnd
=
(
int
)
(
positions
[
i
]
)
;
va
.
setPosition
(
jdtTreeBuilder
.
getPositionBuilder
(
)
.
buildPosition
(
sourceStart
,
sourceEnd
)
)
;
va
=
other
;
}
}
va
.
setPosition
(
jdtTreeBuilder
.
getPositionBuilder
(
)
.
buildPosition
(
qualifiedNameReference
.
sourceStart
(
)
,
qualifiedNameReference
.
sourceEnd
(
)
)
)
;
return
va
;
}
