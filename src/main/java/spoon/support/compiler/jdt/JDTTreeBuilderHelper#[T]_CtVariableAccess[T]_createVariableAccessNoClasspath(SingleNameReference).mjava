/** 
 * In this case, we are in no classpath so we don't know if the access is a variable, a field or a type. By default, we assume that when we don't have any information, we create a variable access.
 * @param singleNameReference Used to set the name of the variable reference contained in the variable access.
 * @return a variable access.
 */
<
T
>
CtVariableAccess
<
T
>
createVariableAccessNoClasspath
(
SingleNameReference
singleNameReference
)
{
CtVariableAccess
<
T
>
va
;
if
(
isLhsAssignment
(
jdtTreeBuilder
.
getContextBuilder
(
)
,
singleNameReference
)
)
{
va
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createVariableWrite
(
)
;
}
else
{
va
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createVariableRead
(
)
;
}
final
String
name
=
CharOperation
.
charToString
(
singleNameReference
.
token
)
;
CtVariableReference
<
T
>
ref
;
if
(
jdtTreeBuilder
.
getContextBuilder
(
)
.
isBuildLambda
)
{
ref
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createParameterReference
(
)
;
(
(
CtParameterReference
)
ref
)
.
setDeclaringExecutable
(
jdtTreeBuilder
.
getReferencesBuilder
(
)
.
getLambdaExecutableReference
(
singleNameReference
)
)
;
}
else
{
ref
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createLocalVariableReference
(
)
;
(
(
CtLocalVariableReference
<
T
>
)
ref
)
.
setDeclaration
(
jdtTreeBuilder
.
getContextBuilder
(
)
.
getLocalVariableDeclaration
(
name
)
)
;
}
ref
.
setSimpleName
(
name
)
;
va
.
setVariable
(
ref
)
;
return
va
;
}
