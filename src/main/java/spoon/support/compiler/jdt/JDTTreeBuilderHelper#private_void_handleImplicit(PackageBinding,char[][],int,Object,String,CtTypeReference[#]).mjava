private
static
void
handleImplicit
(
PackageBinding
packageBinding
,
char
[
]
[
]
tokens
,
int
countOfOtherBindings
,
Object
qualifiedNameReference
,
String
simpleName
,
CtTypeReference
<
?
>
typeRef
)
{
char
[
]
[
]
packageNames
=
null
;
if
(
packageBinding
!=
null
)
{
packageNames
=
packageBinding
.
compoundName
;
}
CtTypeReference
<
?
>
originTypeRef
=
typeRef
;
while
(
typeRef
instanceof
CtArrayTypeReference
<
?
>
)
{
typeRef
=
(
(
CtArrayTypeReference
<
?
>
)
typeRef
)
.
getComponentType
(
)
;
}
int
off
=
tokens
.
length
-
1
;
off
=
off
-
countOfOtherBindings
;
if
(
off
>
0
)
{
if
(
simpleName
!=
null
)
{
if
(
!
simpleName
.
equals
(
new
String
(
tokens
[
off
]
)
)
)
{
throw
new
SpoonException
(
"Unexpected field reference simple name: \""
+
new
String
(
tokens
[
off
]
)
+
"\" expected: \""
+
simpleName
+
"\""
)
;
}
off
--
;
}
while
(
off
>=
0
)
{
String
token
=
new
String
(
tokens
[
off
]
)
;
if
(
!
typeRef
.
getSimpleName
(
)
.
equals
(
token
)
)
{
return
;
}
CtTypeReference
<
?
>
declTypeRef
=
typeRef
.
getDeclaringType
(
)
;
if
(
declTypeRef
!=
null
)
{
typeRef
=
declTypeRef
;
off
--
;
continue
;
}
CtPackageReference
packageRef
=
typeRef
.
getPackage
(
)
;
if
(
packageRef
!=
null
)
{
if
(
packageNames
!=
null
&&
packageNames
.
length
==
off
)
{
return
;
}
if
(
off
==
0
)
{
packageRef
.
setImplicit
(
true
)
;
return
;
}
if
(
packageBinding
==
null
||
(
packageBinding
.
tagBits
&
TagBits
.
HasMissingType
)
!=
0
)
{
return
;
}
throw
new
SpoonException
(
"Unexpected QualifiedNameReference tokens "
+
qualifiedNameReference
+
" for typeRef: "
+
originTypeRef
)
;
}
}
typeRef
.
setImplicit
(
true
)
;
}
}
