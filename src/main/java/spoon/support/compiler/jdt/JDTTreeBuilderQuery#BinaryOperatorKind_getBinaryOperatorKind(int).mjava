/** 
 * Converts the binary operator from JDT to Spoon.
 * @param operator Identifier of the binary operator.
 * @return enum value of {@link BinaryOperatorKind}.
 */
static
BinaryOperatorKind
getBinaryOperatorKind
(
int
operator
)
{
switch
(
operator
)
{
case
OperatorIds
.
EQUAL_EQUAL
:
return
BinaryOperatorKind
.
EQ
;
case
OperatorIds
.
LESS_EQUAL
:
return
BinaryOperatorKind
.
LE
;
case
OperatorIds
.
GREATER_EQUAL
:
return
BinaryOperatorKind
.
GE
;
case
OperatorIds
.
NOT_EQUAL
:
return
BinaryOperatorKind
.
NE
;
case
OperatorIds
.
LEFT_SHIFT
:
return
BinaryOperatorKind
.
SL
;
case
OperatorIds
.
RIGHT_SHIFT
:
return
BinaryOperatorKind
.
SR
;
case
OperatorIds
.
UNSIGNED_RIGHT_SHIFT
:
return
BinaryOperatorKind
.
USR
;
case
OperatorIds
.
OR_OR
:
return
BinaryOperatorKind
.
OR
;
case
OperatorIds
.
AND_AND
:
return
BinaryOperatorKind
.
AND
;
case
OperatorIds
.
PLUS
:
return
BinaryOperatorKind
.
PLUS
;
case
OperatorIds
.
MINUS
:
return
BinaryOperatorKind
.
MINUS
;
case
OperatorIds
.
NOT
:
return
BinaryOperatorKind
.
NE
;
case
OperatorIds
.
REMAINDER
:
return
BinaryOperatorKind
.
MOD
;
case
OperatorIds
.
XOR
:
return
BinaryOperatorKind
.
BITXOR
;
case
OperatorIds
.
AND
:
return
BinaryOperatorKind
.
BITAND
;
case
OperatorIds
.
MULTIPLY
:
return
BinaryOperatorKind
.
MUL
;
case
OperatorIds
.
OR
:
return
BinaryOperatorKind
.
BITOR
;
case
OperatorIds
.
DIVIDE
:
return
BinaryOperatorKind
.
DIV
;
case
OperatorIds
.
GREATER
:
return
BinaryOperatorKind
.
GT
;
case
OperatorIds
.
LESS
:
return
BinaryOperatorKind
.
LT
;
case
OperatorIds
.
QUESTIONCOLON
:
throw
new
RuntimeException
(
"Unknown operator"
)
;
case
OperatorIds
.
EQUAL
:
return
BinaryOperatorKind
.
EQ
;
}
return
null
;
}
