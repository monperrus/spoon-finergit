/** 
 * Converts the modifier from JDT to Spoon.
 * @param modifier Identifier of the modifier.
 * @param implicit True if the modifier is not explicit in the source code (e.g. a missing 'public' in an interface)
 * @return Set of enum value of {@link CtExtendedModifier}.
 */
static
Set
<
CtExtendedModifier
>
getModifiers
(
int
modifier
,
boolean
implicit
)
{
Set
<
CtExtendedModifier
>
modifiers
=
new
HashSet
<
>
(
)
;
if
(
(
modifier
&
ClassFileConstants
.
AccPublic
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
PUBLIC
,
implicit
)
)
;
}
if
(
(
modifier
&
ClassFileConstants
.
AccPrivate
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
PRIVATE
,
implicit
)
)
;
}
if
(
(
modifier
&
ClassFileConstants
.
AccProtected
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
PROTECTED
,
implicit
)
)
;
}
if
(
(
modifier
&
ClassFileConstants
.
AccStatic
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
STATIC
,
implicit
)
)
;
}
if
(
(
modifier
&
ClassFileConstants
.
AccFinal
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
FINAL
,
implicit
)
)
;
}
if
(
(
modifier
&
ClassFileConstants
.
AccSynchronized
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
SYNCHRONIZED
,
implicit
)
)
;
}
if
(
(
modifier
&
ClassFileConstants
.
AccVolatile
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
VOLATILE
,
implicit
)
)
;
}
if
(
(
modifier
&
ClassFileConstants
.
AccTransient
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
TRANSIENT
,
implicit
)
)
;
}
if
(
(
modifier
&
ClassFileConstants
.
AccAbstract
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
ABSTRACT
,
implicit
)
)
;
}
if
(
(
modifier
&
ClassFileConstants
.
AccStrictfp
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
STRICTFP
,
implicit
)
)
;
}
if
(
(
modifier
&
ClassFileConstants
.
AccNative
)
!=
0
)
{
modifiers
.
add
(
new
CtExtendedModifier
(
ModifierKind
.
NATIVE
,
implicit
)
)
;
}
return
modifiers
;
}
