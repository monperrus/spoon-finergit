@Override
public
<
T
>
void
visitCtInvocation
(
CtInvocation
<
T
>
invocation
)
{
if
(
childJDT
instanceof
TypeReference
&&
child
instanceof
CtTypeAccess
)
{
invocation
.
getExecutable
(
)
.
addActualTypeArgument
(
(
(
CtTypeAccess
)
child
)
.
getAccessedType
(
)
)
;
return
;
}
else
if
(
child
instanceof
CtExpression
)
{
if
(
hasChildEqualsToReceiver
(
invocation
)
||
hasChildEqualsToQualification
(
invocation
)
)
{
if
(
child
instanceof
CtThisAccess
)
{
final
CtTypeReference
<
?
>
declaringType
=
invocation
.
getExecutable
(
)
.
getDeclaringType
(
)
;
if
(
declaringType
!=
null
&&
invocation
.
getExecutable
(
)
.
isStatic
(
)
&&
child
.
isImplicit
(
)
)
{
invocation
.
setTarget
(
jdtTreeBuilder
.
getFactory
(
)
.
Code
(
)
.
createTypeAccess
(
declaringType
,
true
)
)
;
}
else
{
invocation
.
setTarget
(
(
CtThisAccess
<
?
>
)
child
)
;
}
}
else
{
invocation
.
setTarget
(
(
CtExpression
<
?
>
)
child
)
;
}
}
else
{
invocation
.
addArgument
(
(
CtExpression
<
?
>
)
child
)
;
}
return
;
}
super
.
visitCtInvocation
(
invocation
)
;
}
