@Override
public
<
T
>
void
visitCtNewArray
(
CtNewArray
<
T
>
newArray
)
{
if
(
childJDT
instanceof
TypeReference
&&
child
instanceof
CtTypeAccess
)
{
final
ArrayAllocationExpression
arrayAlloc
=
(
ArrayAllocationExpression
)
jdtTreeBuilder
.
getContextBuilder
(
)
.
stack
.
peek
(
)
.
node
;
newArray
.
setType
(
(
CtArrayTypeReference
)
jdtTreeBuilder
.
getFactory
(
)
.
Type
(
)
.
createArrayReference
(
(
(
CtTypeAccess
)
child
)
.
getAccessedType
(
)
,
arrayAlloc
.
dimensions
.
length
)
)
;
}
else
if
(
child
instanceof
CtExpression
)
{
if
(
isContainedInDimensionExpression
(
)
)
{
newArray
.
addDimensionExpression
(
(
CtExpression
<
Integer
>
)
child
)
;
}
else
if
(
child
instanceof
CtNewArray
&&
childJDT
instanceof
ArrayInitializer
&&
jdtTreeBuilder
.
getContextBuilder
(
)
.
stack
.
peek
(
)
.
node
instanceof
ArrayAllocationExpression
)
{
newArray
.
setElements
(
(
(
CtNewArray
)
child
)
.
getElements
(
)
)
;
}
else
{
newArray
.
addElement
(
(
CtExpression
)
child
)
;
}
}
}
