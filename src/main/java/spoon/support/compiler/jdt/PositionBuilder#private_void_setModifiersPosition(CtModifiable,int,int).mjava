private
void
setModifiersPosition
(
CtModifiable
e
,
int
start
,
int
end
)
{
CoreFactory
cf
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
;
CompilationUnit
cu
=
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
compilationUnitSpoon
;
char
[
]
contents
=
jdtTreeBuilder
.
getContextBuilder
(
)
.
getCompilationUnitContents
(
)
;
Set
<
CtExtendedModifier
>
modifiers
=
e
.
getExtendedModifiers
(
)
;
Map
<
String
,
CtExtendedModifier
>
explicitModifiersByName
=
new
HashMap
<
>
(
)
;
for
(
CtExtendedModifier
modifier
:
modifiers
)
{
if
(
modifier
.
isImplicit
(
)
)
{
modifier
.
setPosition
(
cf
.
createPartialSourcePosition
(
cu
)
)
;
continue
;
}
if
(
explicitModifiersByName
.
put
(
modifier
.
getKind
(
)
.
toString
(
)
,
modifier
)
!=
null
)
{
throw
new
SpoonException
(
"The modifier "
+
modifier
.
getKind
(
)
.
toString
(
)
+
" found twice"
)
;
}
}
end
++
;
while
(
start
<
end
&&
explicitModifiersByName
.
size
(
)
>
0
)
{
int
o1
=
findNextNonWhitespace
(
contents
,
end
-
1
,
start
)
;
if
(
o1
==
-
1
)
{
break
;
}
int
o2
=
findNextWhitespace
(
contents
,
end
-
1
,
o1
)
;
if
(
o2
==
-
1
)
{
o2
=
end
;
}
String
modifierName
=
String
.
valueOf
(
contents
,
o1
,
o2
-
o1
)
;
CtExtendedModifier
modifier
=
explicitModifiersByName
.
remove
(
modifierName
)
;
if
(
modifier
!=
null
)
{
modifier
.
setPosition
(
cf
.
createSourcePosition
(
cu
,
o1
,
o2
-
1
,
jdtTreeBuilder
.
getContextBuilder
(
)
.
getCompilationUnitLineSeparatorPositions
(
)
)
)
;
}
start
=
o2
;
}
}
