<
T
>
CtExecutableReference
<
T
>
getExecutableReference
(
MessageSend
messageSend
)
{
if
(
messageSend
.
binding
!=
null
)
{
return
getExecutableReference
(
messageSend
.
binding
)
;
}
CtExecutableReference
<
T
>
ref
=
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createExecutableReference
(
)
;
ref
.
setSimpleName
(
CharOperation
.
charToString
(
messageSend
.
selector
)
)
;
ref
.
setType
(
this
.
getTypeReference
(
messageSend
.
expectedType
(
)
,
true
)
)
;
if
(
messageSend
.
receiver
.
resolvedType
==
null
)
{
ref
.
setStatic
(
true
)
;
if
(
messageSend
.
receiver
instanceof
SingleNameReference
)
{
ref
.
setDeclaringType
(
jdtTreeBuilder
.
getHelper
(
)
.
createTypeAccessNoClasspath
(
(
SingleNameReference
)
messageSend
.
receiver
)
.
getAccessedType
(
)
)
;
}
else
if
(
messageSend
.
receiver
instanceof
QualifiedNameReference
)
{
ref
.
setDeclaringType
(
jdtTreeBuilder
.
getHelper
(
)
.
createTypeAccessNoClasspath
(
(
QualifiedNameReference
)
messageSend
.
receiver
)
.
getAccessedType
(
)
)
;
}
}
else
{
ref
.
setDeclaringType
(
getTypeReference
(
messageSend
.
receiver
.
resolvedType
)
)
;
}
if
(
messageSend
.
arguments
!=
null
)
{
final
List
<
CtTypeReference
<
?
>
>
parameters
=
new
ArrayList
<
>
(
)
;
for
(
Expression
expression
:
messageSend
.
arguments
)
{
parameters
.
add
(
getTypeReference
(
expression
.
resolvedType
,
true
)
)
;
}
ref
.
setParameters
(
parameters
)
;
}
return
ref
;
}
