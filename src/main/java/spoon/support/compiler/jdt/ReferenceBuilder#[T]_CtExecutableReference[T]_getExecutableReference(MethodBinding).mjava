@SuppressWarnings("unchecked")
<
T
>
CtExecutableReference
<
T
>
getExecutableReference
(
MethodBinding
exec
)
{
if
(
exec
==
null
)
{
return
null
;
}
final
CtExecutableReference
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createExecutableReference
(
)
;
if
(
exec
.
isConstructor
(
)
)
{
ref
.
setSimpleName
(
CtExecutableReference
.
CONSTRUCTOR_NAME
)
;
ref
.
setType
(
getTypeReference
(
exec
.
declaringClass
)
)
;
}
else
{
ref
.
setSimpleName
(
new
String
(
exec
.
selector
)
)
;
ref
.
setType
(
getTypeReference
(
exec
.
returnType
)
)
;
}
if
(
exec
instanceof
ProblemMethodBinding
)
{
if
(
exec
.
declaringClass
!=
null
&&
Arrays
.
asList
(
exec
.
declaringClass
.
methods
(
)
)
.
contains
(
exec
)
)
{
ref
.
setDeclaringType
(
getTypeReference
(
exec
.
declaringClass
)
)
;
}
else
{
final
CtReference
declaringType
=
getDeclaringReferenceFromImports
(
exec
.
constantPoolName
(
)
)
;
if
(
declaringType
instanceof
CtTypeReference
)
{
ref
.
setDeclaringType
(
(
CtTypeReference
<
?
>
)
declaringType
)
;
}
}
if
(
exec
.
isConstructor
(
)
)
{
ref
.
setDeclaringType
(
getTypeReference
(
exec
.
declaringClass
)
)
;
}
ref
.
setStatic
(
true
)
;
}
else
{
ref
.
setDeclaringType
(
getTypeReference
(
exec
.
declaringClass
)
)
;
ref
.
setStatic
(
exec
.
isStatic
(
)
)
;
}
if
(
exec
.
declaringClass
instanceof
ParameterizedTypeBinding
)
{
ref
.
setDeclaringType
(
getTypeReference
(
exec
.
declaringClass
.
actualType
(
)
)
)
;
}
if
(
exec
.
original
(
)
!=
null
)
{
final
List
<
CtTypeReference
<
?
>
>
parameters
=
new
ArrayList
<
>
(
exec
.
original
(
)
.
parameters
.
length
)
;
for
(
TypeBinding
b
:
exec
.
original
(
)
.
parameters
)
{
parameters
.
add
(
getTypeReference
(
b
)
)
;
}
ref
.
setParameters
(
parameters
)
;
}
else
if
(
exec
.
parameters
!=
null
)
{
final
List
<
CtTypeReference
<
?
>
>
parameters
=
new
ArrayList
<
>
(
)
;
for
(
TypeBinding
b
:
exec
.
parameters
)
{
parameters
.
add
(
getTypeReference
(
b
)
)
;
}
ref
.
setParameters
(
parameters
)
;
}
return
ref
;
}
