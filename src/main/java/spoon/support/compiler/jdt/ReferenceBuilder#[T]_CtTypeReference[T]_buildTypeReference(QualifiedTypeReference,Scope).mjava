/** 
 * Builds a qualified type reference from a  {@link TypeReference}.
 * @param type Qualified type from JDT.
 * @param scope Scope of the parent element.
 * @return
 */
<
T
>
CtTypeReference
<
T
>
buildTypeReference
(
QualifiedTypeReference
type
,
Scope
scope
)
{
CtTypeReference
<
T
>
accessedType
=
buildTypeReference
(
(
TypeReference
)
type
,
scope
)
;
final
TypeBinding
receiverType
=
type
!=
null
?
type
.
resolvedType
:
null
;
if
(
receiverType
!=
null
)
{
final
CtTypeReference
<
T
>
ref
=
getQualifiedTypeReference
(
type
.
tokens
,
receiverType
,
receiverType
.
enclosingType
(
)
,
new
JDTTreeBuilder
.
OnAccessListener
(
)
{
@Override
public
boolean
onAccess
(
char
[
]
[
]
tokens
,
int
index
)
{
return
true
;
}
}
)
;
if
(
ref
!=
null
)
{
accessedType
=
ref
;
}
}
return
accessedType
;
}
