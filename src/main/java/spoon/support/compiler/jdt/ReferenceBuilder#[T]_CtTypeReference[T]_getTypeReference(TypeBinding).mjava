@SuppressWarnings("unchecked")
<
T
>
CtTypeReference
<
T
>
getTypeReference
(
TypeBinding
binding
)
{
if
(
binding
==
null
)
{
return
null
;
}
CtTypeReference
<
?
>
ref
=
null
;
if
(
binding
instanceof
RawTypeBinding
)
{
ref
=
getTypeReference
(
(
(
ParameterizedTypeBinding
)
binding
)
.
genericType
(
)
)
;
}
else
if
(
binding
instanceof
ParameterizedTypeBinding
)
{
if
(
binding
.
actualType
(
)
!=
null
&&
binding
.
actualType
(
)
instanceof
LocalTypeBinding
)
{
ref
=
getTypeReference
(
binding
.
actualType
(
)
)
;
}
else
{
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setImplicit
(
isImplicit
||
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isLambdaParameterImplicitlyTyped
)
;
if
(
binding
.
isAnonymousType
(
)
)
{
ref
.
setSimpleName
(
""
)
;
}
else
{
ref
.
setSimpleName
(
String
.
valueOf
(
binding
.
sourceName
(
)
)
)
;
if
(
binding
.
enclosingType
(
)
!=
null
)
{
ref
.
setDeclaringType
(
getTypeReference
(
binding
.
enclosingType
(
)
)
)
;
}
else
{
ref
.
setPackage
(
getPackageReference
(
binding
.
getPackage
(
)
)
)
;
}
}
}
if
(
(
(
ParameterizedTypeBinding
)
binding
)
.
arguments
!=
null
)
{
for
(
TypeBinding
b
:
(
(
ParameterizedTypeBinding
)
binding
)
.
arguments
)
{
if
(
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isGenericTypeExplicit
)
{
isImplicit
=
true
;
}
if
(
bindingCache
.
containsKey
(
b
)
)
{
ref
.
addActualTypeArgument
(
getCtCircularTypeReference
(
b
)
)
;
}
else
{
ref
.
addActualTypeArgument
(
getTypeReference
(
b
)
)
;
}
isImplicit
=
false
;
}
}
}
else
if
(
binding
instanceof
MissingTypeBinding
)
{
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setSimpleName
(
new
String
(
binding
.
sourceName
(
)
)
)
;
ref
.
setPackage
(
getPackageReference
(
binding
.
getPackage
(
)
)
)
;
if
(
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
ignoreComputeImports
)
{
final
CtReference
declaring
=
this
.
getDeclaringReferenceFromImports
(
binding
.
sourceName
(
)
)
;
if
(
declaring
instanceof
CtPackageReference
)
{
ref
.
setPackage
(
(
CtPackageReference
)
declaring
)
;
}
else
if
(
declaring
instanceof
CtTypeReference
)
{
ref
.
setDeclaringType
(
(
CtTypeReference
)
declaring
)
;
}
}
}
else
if
(
binding
instanceof
BinaryTypeBinding
)
{
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setImplicit
(
isImplicit
||
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isLambdaParameterImplicitlyTyped
)
;
if
(
binding
.
enclosingType
(
)
!=
null
)
{
ref
.
setDeclaringType
(
getTypeReference
(
binding
.
enclosingType
(
)
)
)
;
}
else
{
ref
.
setPackage
(
getPackageReference
(
binding
.
getPackage
(
)
)
)
;
}
ref
.
setSimpleName
(
new
String
(
binding
.
sourceName
(
)
)
)
;
}
else
if
(
binding
instanceof
TypeVariableBinding
)
{
boolean
oldBounds
=
bounds
;
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeParameterReference
(
)
;
ref
.
setImplicit
(
isImplicit
||
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isLambdaParameterImplicitlyTyped
)
;
if
(
binding
instanceof
CaptureBinding
)
{
ref
.
setSimpleName
(
"?"
)
;
bounds
=
true
;
}
else
{
ref
.
setSimpleName
(
new
String
(
binding
.
sourceName
(
)
)
)
;
}
TypeVariableBinding
b
=
(
TypeVariableBinding
)
binding
;
if
(
bounds
)
{
if
(
b
instanceof
CaptureBinding
&&
(
(
CaptureBinding
)
b
)
.
wildcard
!=
null
)
{
bounds
=
oldBounds
;
return
getTypeReference
(
(
(
CaptureBinding
)
b
)
.
wildcard
)
;
}
else
if
(
b
.
superclass
!=
null
&&
b
.
firstBound
==
b
.
superclass
)
{
bounds
=
false
;
bindingCache
.
put
(
binding
,
ref
)
;
(
(
CtTypeParameterReference
)
ref
)
.
setBoundingType
(
getTypeReference
(
b
.
superclass
)
)
;
bounds
=
oldBounds
;
}
}
if
(
bounds
&&
b
.
superInterfaces
!=
null
&&
b
.
superInterfaces
!=
Binding
.
NO_SUPERINTERFACES
)
{
bounds
=
false
;
bindingCache
.
put
(
binding
,
ref
)
;
Set
<
CtTypeReference
<
?
>
>
bounds
=
new
TreeSet
<
>
(
)
;
if
(
(
(
CtTypeParameterReference
)
ref
)
.
getBoundingType
(
)
!=
null
)
{
bounds
.
add
(
(
(
CtTypeParameterReference
)
ref
)
.
getBoundingType
(
)
)
;
}
for
(
ReferenceBinding
superInterface
:
b
.
superInterfaces
)
{
bounds
.
add
(
getTypeReference
(
superInterface
)
)
;
}
(
(
CtTypeParameterReference
)
ref
)
.
setBoundingType
(
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Type
(
)
.
createIntersectionTypeReferenceWithBounds
(
bounds
)
)
;
}
if
(
binding
instanceof
CaptureBinding
)
{
bounds
=
false
;
}
}
else
if
(
binding
instanceof
BaseTypeBinding
)
{
String
name
=
new
String
(
binding
.
sourceName
(
)
)
;
if
(
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isLambdaParameterImplicitlyTyped
)
{
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setImplicit
(
true
)
;
ref
.
setSimpleName
(
name
)
;
}
else
{
ref
=
basestypes
.
get
(
name
)
;
if
(
ref
==
null
)
{
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setSimpleName
(
name
)
;
basestypes
.
put
(
name
,
ref
)
;
}
else
{
ref
=
ref
==
null
?
ref
:
ref
.
clone
(
)
;
}
}
}
else
if
(
binding
instanceof
WildcardBinding
)
{
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeParameterReference
(
)
;
ref
.
setImplicit
(
isImplicit
||
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isLambdaParameterImplicitlyTyped
)
;
ref
.
setSimpleName
(
"?"
)
;
if
(
(
(
WildcardBinding
)
binding
)
.
boundKind
==
Wildcard
.
SUPER
&&
ref
instanceof
CtTypeParameterReference
)
{
(
(
CtTypeParameterReference
)
ref
)
.
setUpper
(
false
)
;
}
if
(
(
(
WildcardBinding
)
binding
)
.
bound
!=
null
&&
ref
instanceof
CtTypeParameterReference
)
{
if
(
bindingCache
.
containsKey
(
(
(
WildcardBinding
)
binding
)
.
bound
)
)
{
final
CtCircularTypeReference
circularRef
=
getCtCircularTypeReference
(
(
(
WildcardBinding
)
binding
)
.
bound
)
;
(
(
CtTypeParameterReference
)
ref
)
.
setBoundingType
(
circularRef
)
;
}
else
{
(
(
CtTypeParameterReference
)
ref
)
.
setBoundingType
(
getTypeReference
(
(
(
WildcardBinding
)
binding
)
.
bound
)
)
;
}
}
}
else
if
(
binding
instanceof
LocalTypeBinding
)
{
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setImplicit
(
isImplicit
||
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isLambdaParameterImplicitlyTyped
)
;
if
(
binding
.
isAnonymousType
(
)
)
{
ref
.
setSimpleName
(
JDTTreeBuilderHelper
.
computeAnonymousName
(
(
SourceTypeBinding
)
binding
)
)
;
ref
.
setDeclaringType
(
getTypeReference
(
(
binding
.
enclosingType
(
)
)
)
)
;
}
else
{
ref
.
setSimpleName
(
new
String
(
binding
.
sourceName
(
)
)
)
;
if
(
(
(
LocalTypeBinding
)
binding
)
.
enclosingMethod
==
null
&&
binding
.
enclosingType
(
)
!=
null
&&
binding
.
enclosingType
(
)
instanceof
LocalTypeBinding
)
{
ref
.
setDeclaringType
(
getTypeReference
(
binding
.
enclosingType
(
)
)
)
;
}
else
if
(
binding
.
enclosingMethod
(
)
!=
null
)
{
ref
.
setSimpleName
(
JDTTreeBuilderHelper
.
computeAnonymousName
(
(
SourceTypeBinding
)
binding
)
)
;
ref
.
setDeclaringType
(
getTypeReference
(
binding
.
enclosingType
(
)
)
)
;
}
}
}
else
if
(
binding
instanceof
SourceTypeBinding
)
{
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setImplicit
(
isImplicit
||
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isLambdaParameterImplicitlyTyped
)
;
if
(
binding
.
isAnonymousType
(
)
)
{
ref
.
setSimpleName
(
JDTTreeBuilderHelper
.
computeAnonymousName
(
(
SourceTypeBinding
)
binding
)
)
;
ref
.
setDeclaringType
(
getTypeReference
(
(
binding
.
enclosingType
(
)
)
)
)
;
}
else
{
ref
.
setSimpleName
(
new
String
(
binding
.
sourceName
(
)
)
)
;
if
(
binding
.
enclosingType
(
)
!=
null
)
{
ref
.
setDeclaringType
(
getTypeReference
(
binding
.
enclosingType
(
)
)
)
;
}
else
{
ref
.
setPackage
(
getPackageReference
(
binding
.
getPackage
(
)
)
)
;
}
}
}
else
if
(
binding
instanceof
ArrayBinding
)
{
CtArrayTypeReference
<
Object
>
arrayref
;
arrayref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createArrayTypeReference
(
)
;
arrayref
.
setImplicit
(
isImplicit
||
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isLambdaParameterImplicitlyTyped
)
;
ref
=
arrayref
;
for
(
int
i
=
1
;
i
<
binding
.
dimensions
(
)
;
i
++
)
{
CtArrayTypeReference
<
Object
>
tmp
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createArrayTypeReference
(
)
;
arrayref
.
setComponentType
(
tmp
)
;
arrayref
=
tmp
;
}
arrayref
.
setComponentType
(
getTypeReference
(
binding
.
leafComponentType
(
)
)
)
;
}
else
if
(
binding
instanceof
ProblemReferenceBinding
||
binding
instanceof
PolyTypeBinding
)
{
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setImplicit
(
isImplicit
||
!
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isLambdaParameterImplicitlyTyped
)
;
ref
.
setSimpleName
(
new
String
(
binding
.
readableName
(
)
)
)
;
final
CtReference
declaring
=
this
.
getDeclaringReferenceFromImports
(
binding
.
sourceName
(
)
)
;
this
.
jdtTreeBuilder
.
setPackageOrDeclaringType
(
ref
,
declaring
)
;
}
else
if
(
binding
instanceof
JDTTreeBuilder
.
SpoonReferenceBinding
)
{
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Core
(
)
.
createTypeReference
(
)
;
ref
.
setSimpleName
(
new
String
(
binding
.
sourceName
(
)
)
)
;
ref
.
setDeclaringType
(
getTypeReference
(
binding
.
enclosingType
(
)
)
)
;
}
else
if
(
binding
instanceof
IntersectionTypeBinding18
)
{
Set
<
CtTypeReference
<
?
>
>
bounds
=
new
TreeSet
<
>
(
)
;
for
(
ReferenceBinding
superInterface
:
binding
.
getIntersectingTypes
(
)
)
{
bounds
.
add
(
getTypeReference
(
superInterface
)
)
;
}
ref
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Type
(
)
.
createIntersectionTypeReferenceWithBounds
(
bounds
)
;
}
else
{
throw
new
RuntimeException
(
"Unknown TypeBinding: "
+
binding
.
getClass
(
)
+
" "
+
binding
)
;
}
bindingCache
.
remove
(
binding
)
;
return
(
CtTypeReference
<
T
>
)
ref
;
}
