/** 
 * JDT doesn't return a correct AST with the resolved type of the reference. This method try to build a correct Spoon AST from the name of the JDT reference, thanks to the parsing of the string, the name parameterized from the JDT reference and java convention. Returns a complete Spoon AST when the name is correct, otherwise a spoon type reference with a name that correspond to the name of the JDT type reference.
 */
<
T
>
CtTypeReference
<
T
>
getTypeReference
(
TypeReference
ref
)
{
if
(
ref
==
null
)
{
return
null
;
}
CtTypeReference
<
T
>
res
=
null
;
CtTypeReference
inner
=
null
;
final
String
[
]
namesParameterized
=
CharOperation
.
charArrayToStringArray
(
ref
.
getParameterizedTypeName
(
)
)
;
String
nameParameterized
=
CharOperation
.
toString
(
ref
.
getParameterizedTypeName
(
)
)
;
String
typeName
=
CharOperation
.
toString
(
ref
.
getTypeName
(
)
)
;
int
index
=
namesParameterized
.
length
-
1
;
for
(
;
index
>=
0
;
index
--
)
{
CtTypeReference
main
=
getTypeReference
(
namesParameterized
[
index
]
)
;
if
(
main
==
null
)
{
break
;
}
if
(
res
==
null
)
{
res
=
(
CtTypeReference
<
T
>
)
main
;
}
else
{
inner
.
setDeclaringType
(
(
CtTypeReference
<
?
>
)
main
)
;
}
inner
=
main
;
}
if
(
res
==
null
)
{
return
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Type
(
)
.
createReference
(
nameParameterized
)
;
}
if
(
inner
.
getPackage
(
)
==
null
)
{
PackageFactory
packageFactory
=
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Package
(
)
;
CtPackageReference
packageReference
=
index
>=
0
?
packageFactory
.
getOrCreate
(
concatSubArray
(
namesParameterized
,
index
)
)
.
getReference
(
)
:
packageFactory
.
topLevel
(
)
;
inner
.
setPackage
(
packageReference
)
;
}
if
(
!
res
.
toStringDebug
(
)
.
replace
(
", ?"
,
",?"
)
.
endsWith
(
nameParameterized
)
)
{
return
this
.
jdtTreeBuilder
.
getFactory
(
)
.
Type
(
)
.
createReference
(
typeName
)
;
}
return
res
;
}
