private
<
T
>
CtTypeReference
<
T
>
buildTypeReferenceInternal
(
CtTypeReference
<
T
>
typeReference
,
TypeReference
type
,
Scope
scope
,
boolean
isTypeCast
)
{
if
(
type
==
null
)
{
return
null
;
}
CtTypeReference
<
?
>
currentReference
=
typeReference
;
for
(
int
position
=
type
.
getTypeName
(
)
.
length
-
1
;
position
>=
0
;
position
--
)
{
if
(
currentReference
==
null
)
{
break
;
}
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isBuildTypeCast
=
isTypeCast
;
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
enter
(
currentReference
,
type
)
;
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
isBuildTypeCast
=
false
;
if
(
type
.
annotations
!=
null
&&
type
.
annotations
.
length
-
1
<=
position
&&
type
.
annotations
[
position
]
!=
null
&&
type
.
annotations
[
position
]
.
length
>
0
)
{
for
(
Annotation
annotation
:
type
.
annotations
[
position
]
)
{
if
(
scope
instanceof
ClassScope
)
{
annotation
.
traverse
(
this
.
jdtTreeBuilder
,
(
ClassScope
)
scope
)
;
}
else
if
(
scope
instanceof
BlockScope
)
{
annotation
.
traverse
(
this
.
jdtTreeBuilder
,
(
BlockScope
)
scope
)
;
}
else
{
annotation
.
traverse
(
this
.
jdtTreeBuilder
,
(
BlockScope
)
null
)
;
}
}
}
if
(
type
.
getTypeArguments
(
)
!=
null
&&
type
.
getTypeArguments
(
)
.
length
-
1
<=
position
&&
type
.
getTypeArguments
(
)
[
position
]
!=
null
&&
type
.
getTypeArguments
(
)
[
position
]
.
length
>
0
)
{
CtTypeReference
<
?
>
componentReference
=
getTypeReferenceOfArrayComponent
(
currentReference
)
;
componentReference
.
getActualTypeArguments
(
)
.
clear
(
)
;
for
(
TypeReference
typeArgument
:
type
.
getTypeArguments
(
)
[
position
]
)
{
if
(
typeArgument
instanceof
Wildcard
||
typeArgument
.
resolvedType
instanceof
WildcardBinding
||
typeArgument
.
resolvedType
instanceof
TypeVariableBinding
)
{
componentReference
.
addActualTypeArgument
(
buildTypeParameterReference
(
typeArgument
,
scope
)
)
;
}
else
{
componentReference
.
addActualTypeArgument
(
buildTypeReference
(
typeArgument
,
scope
)
)
;
}
}
}
else
if
(
(
type
instanceof
ParameterizedSingleTypeReference
||
type
instanceof
ParameterizedQualifiedTypeReference
)
&&
!
isTypeArgumentExplicit
(
type
.
getTypeArguments
(
)
)
)
{
for
(
CtTypeReference
<
?
>
actualTypeArgument
:
currentReference
.
getActualTypeArguments
(
)
)
{
actualTypeArgument
.
setImplicit
(
true
)
;
if
(
actualTypeArgument
instanceof
CtArrayTypeReference
)
{
(
(
CtArrayTypeReference
)
actualTypeArgument
)
.
getComponentType
(
)
.
setImplicit
(
true
)
;
}
}
}
if
(
type
instanceof
Wildcard
&&
typeReference
instanceof
CtWildcardReference
)
{
(
(
CtWildcardReference
)
typeReference
)
.
setBoundingType
(
buildTypeReference
(
(
(
Wildcard
)
type
)
.
bound
,
scope
)
)
;
}
this
.
jdtTreeBuilder
.
getContextBuilder
(
)
.
exit
(
type
)
;
currentReference
=
currentReference
.
getDeclaringType
(
)
;
}
if
(
type
instanceof
SingleTypeReference
)
{
typeReference
.
setSimplyQualified
(
true
)
;
}
else
if
(
type
instanceof
QualifiedTypeReference
)
{
jdtTreeBuilder
.
getHelper
(
)
.
handleImplicit
(
(
QualifiedTypeReference
)
type
,
typeReference
)
;
}
return
typeReference
;
}
