private
JPopupMenu
getMenu
(
)
{
if
(
menu
==
null
)
{
menu
=
new
JPopupMenu
(
)
;
JMenuItem
item
=
new
JMenuItem
(
"Save"
)
;
item
.
addActionListener
(
new
ActionListener
(
)
{
public
void
actionPerformed
(
ActionEvent
e
)
{
JFileChooser
chooser
=
new
JFileChooser
(
)
;
chooser
.
setFileSelectionMode
(
JFileChooser
.
FILES_ONLY
)
;
boolean
cont
=
chooser
.
showSaveDialog
(
this
)
==
JFileChooser
.
APPROVE_OPTION
;
if
(
cont
)
{
SerializationModelStreamer
ser
=
new
SerializationModelStreamer
(
)
;
try
{
ser
.
save
(
factory
,
new
FileOutputStream
(
chooser
.
getSelectedFile
(
)
)
)
;
}
catch
(
IOException
e1
)
{
e1
.
printStackTrace
(
)
;
}
}
}
}
)
;
menu
.
add
(
item
)
;
menu
.
addSeparator
(
)
;
item
=
new
JMenuItem
(
"Reflect"
)
;
item
.
addActionListener
(
new
ActionListener
(
)
{
public
void
actionPerformed
(
ActionEvent
e
)
{
DefaultMutableTreeNode
node
=
(
DefaultMutableTreeNode
)
jTree
.
getLastSelectedPathComponent
(
)
;
if
(
node
==
null
)
{
node
=
root
;
}
new
SpoonObjectFieldsTable
(
node
.
getUserObject
(
)
)
;
}
}
)
;
menu
.
add
(
item
)
;
menu
.
addSeparator
(
)
;
item
=
new
JMenuItem
(
"Search"
)
;
item
.
addActionListener
(
new
ActionListener
(
)
{
public
void
actionPerformed
(
ActionEvent
e
)
{
search
(
)
;
}
}
)
;
menu
.
add
(
item
)
;
item
=
new
JMenuItem
(
"Search next"
)
;
item
.
addActionListener
(
new
ActionListener
(
)
{
public
void
actionPerformed
(
ActionEvent
e
)
{
next
(
)
;
}
}
)
;
menu
.
add
(
item
)
;
}
return
menu
;
}
