/** 
 * Converts an object <code>o</code> into an object or a  {@link CtReference}of type <code>type</code>.
 * @param < T > the actual type of the object
 * @param type the type to convert the object into
 * @param o the object to be converted
 * @return a primitive object of type T, or a reference
 */
@SuppressWarnings({"unchecked","rawtypes"})
public
<
T
>
T
convert
(
Class
<
T
>
type
,
Object
o
)
{
if
(
o
==
null
)
return
null
;
if
(
type
==
boolean
.
class
)
return
(
T
)
new
Boolean
(
o
.
toString
(
)
)
;
if
(
type
==
byte
.
class
)
return
(
T
)
new
Byte
(
o
.
toString
(
)
)
;
if
(
type
==
char
.
class
)
return
(
T
)
new
Character
(
o
.
toString
(
)
.
charAt
(
0
)
)
;
if
(
type
==
double
.
class
)
return
(
T
)
new
Double
(
o
.
toString
(
)
)
;
if
(
type
==
float
.
class
)
return
(
T
)
new
Float
(
o
.
toString
(
)
)
;
if
(
type
==
int
.
class
)
return
(
T
)
new
Integer
(
o
.
toString
(
)
)
;
if
(
type
==
long
.
class
)
return
(
T
)
new
Long
(
o
.
toString
(
)
)
;
if
(
CtTypeReference
.
class
.
isAssignableFrom
(
type
)
)
{
return
(
T
)
factory
.
Type
(
)
.
createReference
(
o
.
toString
(
)
)
;
}
if
(
CtExecutableReference
.
class
.
isAssignableFrom
(
type
)
)
{
return
(
T
)
factory
.
Executable
(
)
.
createReference
(
o
.
toString
(
)
)
;
}
if
(
CtFieldReference
.
class
.
isAssignableFrom
(
type
)
)
{
return
(
T
)
factory
.
Field
(
)
.
createReference
(
o
.
toString
(
)
)
;
}
if
(
CtPackageReference
.
class
.
isAssignableFrom
(
type
)
)
{
return
(
T
)
factory
.
Package
(
)
.
createReference
(
o
.
toString
(
)
)
;
}
if
(
type
.
isEnum
(
)
)
{
return
(
T
)
java
.
lang
.
Enum
.
valueOf
(
(
Class
<
Enum
>
)
type
,
o
.
toString
(
)
)
;
}
return
(
T
)
o
.
toString
(
)
;
}
