@SuppressWarnings("unchecked")
@Override
@DerivedProperty
public
CtTypeReference
<
T
>
getType
(
)
{
if
(
types
.
isEmpty
(
)
)
{
return
null
;
}
else
if
(
types
.
size
(
)
==
1
)
{
return
(
CtTypeReference
<
T
>
)
types
.
get
(
0
)
;
}
List
<
CtTypeReference
<
?
>
>
superTypesOfFirst
=
types
.
get
(
0
)
.
map
(
new
SuperInheritanceHierarchyFunction
(
)
.
includingInterfaces
(
false
)
.
includingSelf
(
true
)
.
returnTypeReferences
(
true
)
)
.
list
(
)
;
int
commonSuperTypeIdx
=
0
;
int
throwableIdx
=
superTypesOfFirst
.
size
(
)
-
2
;
for
(
int
i
=
1
;
i
<
types
.
size
(
)
&&
commonSuperTypeIdx
!=
throwableIdx
;
i
++
)
{
CtTypeReference
<
?
>
nextException
=
types
.
get
(
i
)
;
while
(
commonSuperTypeIdx
<
throwableIdx
)
{
if
(
nextException
.
isSubtypeOf
(
superTypesOfFirst
.
get
(
commonSuperTypeIdx
)
)
)
{
break
;
}
commonSuperTypeIdx
++
;
}
}
return
(
CtTypeReference
<
T
>
)
superTypesOfFirst
.
get
(
commonSuperTypeIdx
)
;
}
