/** 
 * Parses the content string to split in two: the description and the Javadoc tags
 */
@Override
public
<
E
extends
CtComment
>
E
setContent
(
String
content
)
{
tags
.
clear
(
)
;
if
(
content
==
null
)
{
content
=
""
;
}
String
longDescription
=
""
;
String
currentTagContent
=
""
;
CtJavaDocTag
.
TagType
currentTag
=
null
;
String
[
]
lines
=
cleanComment
(
content
)
.
split
(
"\n"
)
;
boolean
tagStarted
=
false
;
for
(
String
aLine
:
lines
)
{
String
line
=
aLine
.
trim
(
)
;
if
(
line
.
startsWith
(
CtJavaDocTag
.
JAVADOC_TAG_PREFIX
)
)
{
tagStarted
=
true
;
int
endIndex
=
line
.
indexOf
(
' '
)
;
if
(
endIndex
==
-
1
)
{
endIndex
=
line
.
length
(
)
;
}
defineCommentContent
(
currentTagContent
,
currentTag
)
;
currentTag
=
CtJavaDocTag
.
TagType
.
tagFromName
(
line
.
substring
(
1
,
endIndex
)
.
toLowerCase
(
)
)
;
if
(
endIndex
==
line
.
length
(
)
)
{
currentTagContent
=
""
;
}
else
{
currentTagContent
=
line
.
substring
(
endIndex
+
1
)
;
}
}
else
{
if
(
tagStarted
==
false
)
{
longDescription
=
CtComment
.
LINE_SEPARATOR
+
aLine
;
}
else
{
currentTagContent
=
CtComment
.
LINE_SEPARATOR
+
aLine
;
}
}
}
defineCommentContent
(
currentTagContent
,
currentTag
)
;
String
contentWithTags
=
longDescription
.
trim
(
)
;
getFactory
(
)
.
getEnvironment
(
)
.
getModelChangeListener
(
)
.
onObjectUpdate
(
this
,
CtRole
.
COMMENT_CONTENT
,
contentWithTags
,
this
.
content
)
;
this
.
content
=
contentWithTags
;
return
(
E
)
this
;
}
