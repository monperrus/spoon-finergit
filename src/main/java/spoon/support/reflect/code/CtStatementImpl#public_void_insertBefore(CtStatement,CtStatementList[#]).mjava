public
static
void
insertBefore
(
CtStatement
target
,
CtStatementList
<
?
>
statements
)
{
CtElement
e
=
target
.
getParent
(
)
;
if
(
e
instanceof
CtExecutable
)
{
throw
new
RuntimeException
(
"cannot insert in this context (use insertEnd?)"
)
;
}
int
i
=
0
;
CtBlock
<
?
>
parentBlock
;
if
(
e
instanceof
CtIf
)
{
boolean
inThen
=
true
;
CtStatement
stat
=
(
(
CtIf
)
e
)
.
getThenStatement
(
)
;
if
(
stat
!=
target
)
{
stat
=
(
(
CtIf
)
e
)
.
getElseStatement
(
)
;
inThen
=
false
;
}
if
(
stat
!=
target
)
{
throw
new
IllegalArgumentException
(
"should not happen"
)
;
}
if
(
stat
instanceof
CtBlock
)
{
parentBlock
=
(
CtBlock
<
?
>
)
stat
;
}
else
{
CtBlock
<
?
>
block
=
target
.
getFactory
(
)
.
Core
(
)
.
createBlock
(
)
;
block
.
getStatements
(
)
.
add
(
stat
)
;
stat
.
setParent
(
block
)
;
if
(
inThen
)
(
(
CtIf
)
e
)
.
setThenStatement
(
block
)
;
else
(
(
CtIf
)
e
)
.
setElseStatement
(
block
)
;
block
.
setParent
(
e
)
;
parentBlock
=
block
;
}
}
else
if
(
e
instanceof
CtLoop
)
{
CtStatement
stat
=
(
(
CtLoop
)
e
)
.
getBody
(
)
;
if
(
stat
instanceof
CtBlock
)
{
parentBlock
=
(
CtBlock
<
?
>
)
stat
;
}
else
{
CtBlock
<
?
>
block
=
target
.
getFactory
(
)
.
Core
(
)
.
createBlock
(
)
;
block
.
getStatements
(
)
.
add
(
stat
)
;
stat
.
setParent
(
block
)
;
(
(
CtLoop
)
e
)
.
setBody
(
block
)
;
block
.
setParent
(
e
)
;
parentBlock
=
block
;
}
}
else
if
(
e
instanceof
CtCase
)
{
for
(
CtStatement
s
:
(
(
CtCase
<
?
>
)
e
)
.
getStatements
(
)
)
{
if
(
s
==
target
)
{
break
;
}
i
++
;
}
for
(
int
j
=
statements
.
getStatements
(
)
.
size
(
)
-
1
;
j
>=
0
;
j
--
)
{
CtStatement
s
=
statements
.
getStatements
(
)
.
get
(
j
)
;
(
(
CtCase
<
?
>
)
e
)
.
getStatements
(
)
.
add
(
i
,
s
)
;
}
return
;
}
else
{
parentBlock
=
(
CtBlock
<
?
>
)
e
;
}
for
(
CtStatement
s
:
parentBlock
.
getStatements
(
)
)
{
if
(
s
==
target
)
{
break
;
}
i
++
;
}
for
(
int
j
=
statements
.
getStatements
(
)
.
size
(
)
-
1
;
j
>=
0
;
j
--
)
{
CtStatement
s
=
statements
.
getStatements
(
)
.
get
(
j
)
;
parentBlock
.
getStatements
(
)
.
add
(
i
,
s
)
;
s
.
setParent
(
parentBlock
)
;
}
}
