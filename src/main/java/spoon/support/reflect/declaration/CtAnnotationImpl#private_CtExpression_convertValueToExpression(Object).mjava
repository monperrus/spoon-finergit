private
CtExpression
convertValueToExpression
(
Object
value
)
{
CtExpression
res
;
if
(
value
.
getClass
(
)
.
isArray
(
)
)
{
res
=
getFactory
(
)
.
Core
(
)
.
createNewArray
(
)
;
Object
[
]
values
=
(
Object
[
]
)
value
;
res
.
setType
(
getFactory
(
)
.
Type
(
)
.
createArrayReference
(
getFactory
(
)
.
Type
(
)
.
createReference
(
values
[
0
]
.
getClass
(
)
)
)
)
;
for
(
Object
o
:
values
)
{
(
(
CtNewArray
)
res
)
.
addElement
(
convertValueToExpression
(
o
)
)
;
}
}
else
if
(
value
instanceof
Collection
)
{
res
=
getFactory
(
)
.
Core
(
)
.
createNewArray
(
)
;
Collection
values
=
(
Collection
)
value
;
res
.
setType
(
getFactory
(
)
.
Type
(
)
.
createArrayReference
(
getFactory
(
)
.
Type
(
)
.
createReference
(
values
.
toArray
(
)
[
0
]
.
getClass
(
)
)
)
)
;
for
(
Object
o
:
values
)
{
(
(
CtNewArray
)
res
)
.
addElement
(
convertValueToExpression
(
o
)
)
;
}
}
else
if
(
value
instanceof
Class
)
{
res
=
getFactory
(
)
.
Code
(
)
.
createClassAccess
(
getFactory
(
)
.
Type
(
)
.
createReference
(
(
Class
)
value
)
)
;
}
else
if
(
value
instanceof
Field
)
{
CtFieldReference
<
Object
>
variable
=
getFactory
(
)
.
Field
(
)
.
createReference
(
(
Field
)
value
)
;
variable
.
setStatic
(
true
)
;
CtTypeAccess
target
=
getFactory
(
)
.
Code
(
)
.
createTypeAccess
(
getFactory
(
)
.
Type
(
)
.
createReference
(
(
(
Field
)
value
)
.
getDeclaringClass
(
)
)
)
;
CtFieldRead
fieldRead
=
getFactory
(
)
.
Core
(
)
.
createFieldRead
(
)
;
fieldRead
.
setVariable
(
variable
)
;
fieldRead
.
setTarget
(
target
)
;
fieldRead
.
setType
(
target
.
getAccessedType
(
)
)
;
res
=
fieldRead
;
}
else
if
(
isPrimitive
(
value
.
getClass
(
)
)
||
value
instanceof
String
)
{
res
=
getFactory
(
)
.
Code
(
)
.
createLiteral
(
value
)
;
}
else
{
throw
new
SpoonException
(
"Please, submit a valid value."
)
;
}
return
res
;
}
