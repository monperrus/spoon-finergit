@SuppressWarnings("unchecked")
private
Object
convertValue
(
Object
value
)
{
if
(
value
instanceof
CtFieldReference
)
{
Class
<
?
>
c
=
null
;
try
{
c
=
(
(
CtFieldReference
<
?
>
)
value
)
.
getDeclaringType
(
)
.
getActualClass
(
)
;
}
catch
(
Exception
e
)
{
return
(
(
CtLiteral
<
?
>
)
(
(
CtFieldReference
<
?
>
)
value
)
.
getDeclaration
(
)
.
getDefaultExpression
(
)
.
partiallyEvaluate
(
)
)
.
getValue
(
)
;
}
if
(
(
(
CtFieldReference
<
?
>
)
value
)
.
getSimpleName
(
)
.
equals
(
"class"
)
)
{
return
c
;
}
CtField
<
?
>
field
=
(
(
CtFieldReference
<
?
>
)
value
)
.
getDeclaration
(
)
;
if
(
Enum
.
class
.
isAssignableFrom
(
c
)
)
{
return
Enum
.
valueOf
(
(
Class
<
?
Enum
>
)
c
,
(
(
CtFieldReference
<
?
>
)
value
)
.
getSimpleName
(
)
)
;
}
if
(
field
!=
null
)
{
return
convertValue
(
field
.
getDefaultExpression
(
)
)
;
}
else
{
try
{
return
(
(
Field
)
(
(
CtFieldReference
<
?
>
)
value
)
.
getActualField
(
)
)
.
get
(
null
)
;
}
catch
(
Exception
e
)
{
Launcher
.
logger
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
return
null
;
}
}
else
if
(
value
instanceof
CtFieldAccess
)
{
return
convertValue
(
(
(
CtFieldAccess
<
?
>
)
value
)
.
getVariable
(
)
)
;
}
else
if
(
value
instanceof
CtNewArray
)
{
CtNewArray
<
?
>
arrayExpression
=
(
CtNewArray
<
?
>
)
value
;
Class
<
?
>
componentType
=
arrayExpression
.
getType
(
)
.
getActualClass
(
)
.
getComponentType
(
)
;
List
<
CtExpression
<
?
>
>
elements
=
arrayExpression
.
getElements
(
)
;
Object
array
=
Array
.
newInstance
(
componentType
,
elements
.
size
(
)
)
;
for
(
int
i
=
0
;
i
<
elements
.
size
(
)
;
i
++
)
{
Array
.
set
(
array
,
i
,
this
.
convertValue
(
elements
.
get
(
i
)
)
)
;
}
return
array
;
}
else
if
(
value
instanceof
CtAnnotation
)
{
return
(
(
CtAnnotation
<
?
>
)
value
)
.
getActualAnnotation
(
)
;
}
else
if
(
value
instanceof
CtLiteral
)
{
return
(
(
CtLiteral
<
?
>
)
value
)
.
getValue
(
)
;
}
else
if
(
value
instanceof
CtCodeElement
)
{
PartialEvaluator
eval
=
getFactory
(
)
.
Eval
(
)
.
createPartialEvaluator
(
)
;
Object
ret
=
eval
.
evaluate
(
null
,
(
CtCodeElement
)
value
)
;
return
this
.
convertValue
(
ret
)
;
}
else
if
(
value
instanceof
CtTypeReference
)
{
return
(
(
CtTypeReference
<
?
>
)
value
)
.
getActualClass
(
)
;
}
return
value
;
}
