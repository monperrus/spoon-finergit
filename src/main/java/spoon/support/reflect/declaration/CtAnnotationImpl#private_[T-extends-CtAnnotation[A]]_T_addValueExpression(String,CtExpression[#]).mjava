private
<
T
extends
CtAnnotation
<
A
>
>
T
addValueExpression
(
String
elementName
,
CtExpression
<
?
>
expression
)
{
if
(
elementValues
.
containsKey
(
elementName
)
)
{
final
CtExpression
ctExpression
=
(
CtExpression
)
elementValues
.
get
(
elementName
)
;
if
(
ctExpression
instanceof
CtNewArray
)
{
if
(
expression
instanceof
CtNewArray
)
{
List
<
CtExpression
<
?
>
>
elements
=
(
(
CtNewArray
)
expression
)
.
getElements
(
)
;
for
(
CtExpression
expInArray
:
elements
)
{
(
(
CtNewArray
)
ctExpression
)
.
addElement
(
expInArray
)
;
}
}
else
{
(
(
CtNewArray
)
ctExpression
)
.
addElement
(
expression
)
;
}
}
else
{
CtNewArray
<
Object
>
newArray
=
getFactory
(
)
.
Core
(
)
.
createNewArray
(
)
;
newArray
.
setType
(
ctExpression
.
getType
(
)
)
;
newArray
.
setParent
(
this
)
;
newArray
.
addElement
(
ctExpression
)
;
newArray
.
addElement
(
expression
)
;
elementValues
.
put
(
elementName
,
newArray
)
;
}
}
else
{
expression
.
setParent
(
this
)
;
getFactory
(
)
.
getEnvironment
(
)
.
getModelChangeListener
(
)
.
onMapAdd
(
this
,
VALUE
,
this
.
elementValues
,
elementName
,
expression
)
;
elementValues
.
put
(
elementName
,
expression
)
;
}
return
(
T
)
this
;
}
