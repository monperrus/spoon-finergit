public
Object
getElementValue
(
String
key
)
{
Object
ret
=
null
;
ret
=
elementValues
.
get
(
key
)
;
if
(
ret
==
null
)
ret
=
getDefaultValue
(
key
)
;
if
(
ret
==
null
)
ret
=
getReflectValue
(
key
)
;
Class
<
?
>
type
=
getElementType
(
key
)
;
if
(
type
.
isArray
(
)
)
{
if
(
!
(
ret
instanceof
Collection
)
)
{
List
<
Object
>
lst
=
new
ArrayList
<
Object
>
(
)
;
if
(
ret
.
getClass
(
)
.
isArray
(
)
)
{
Object
[
]
temp
=
(
Object
[
]
)
ret
;
lst
.
addAll
(
Arrays
.
asList
(
temp
)
)
;
}
else
{
lst
.
add
(
ret
)
;
}
ret
=
lst
;
}
Collection
<
?
>
col
=
(
Collection
<
?
>
)
ret
;
Object
[
]
array
=
(
Object
[
]
)
Array
.
newInstance
(
type
.
getComponentType
(
)
,
col
.
size
(
)
)
;
int
i
=
0
;
for
(
Object
obj
:
col
)
{
array
[
i
++
]
=
convertValue
(
obj
)
;
}
ret
=
array
;
}
else
{
ret
=
convertValue
(
ret
)
;
}
if
(
type
.
isPrimitive
(
)
)
{
if
(
type
==
boolean
.
class
&&
ret
.
getClass
(
)
!=
boolean
.
class
)
{
ret
=
Boolean
.
parseBoolean
(
ret
.
toString
(
)
)
;
}
else
if
(
type
==
byte
.
class
&&
ret
.
getClass
(
)
!=
byte
.
class
)
{
ret
=
Byte
.
parseByte
(
ret
.
toString
(
)
)
;
}
else
if
(
type
==
char
.
class
&&
ret
.
getClass
(
)
!=
char
.
class
)
{
ret
=
ret
.
toString
(
)
.
charAt
(
0
)
;
}
else
if
(
type
==
double
.
class
&&
ret
.
getClass
(
)
!=
double
.
class
)
{
ret
=
Double
.
parseDouble
(
ret
.
toString
(
)
)
;
}
else
if
(
type
==
float
.
class
&&
ret
.
getClass
(
)
!=
float
.
class
)
{
ret
=
Float
.
parseFloat
(
ret
.
toString
(
)
)
;
}
else
if
(
type
==
int
.
class
&&
ret
.
getClass
(
)
!=
int
.
class
)
{
ret
=
Integer
.
parseInt
(
ret
.
toString
(
)
)
;
}
else
if
(
type
==
long
.
class
&&
ret
.
getClass
(
)
!=
long
.
class
)
{
ret
=
Long
.
parseLong
(
ret
.
toString
(
)
)
;
}
}
return
ret
;
}
