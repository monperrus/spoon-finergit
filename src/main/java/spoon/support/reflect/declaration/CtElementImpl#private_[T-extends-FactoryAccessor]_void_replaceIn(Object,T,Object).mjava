private
<
T
extends
FactoryAccessor
>
void
replaceIn
(
Object
toReplace
,
T
replacement
,
Object
parent
)
throws
IllegalArgumentException
,
IllegalAccessException
{
for
(
Field
f
:
RtHelper
.
getAllFields
(
parent
.
getClass
(
)
)
)
{
f
.
setAccessible
(
true
)
;
Object
tmp
=
f
.
get
(
parent
)
;
if
(
tmp
!=
null
)
{
if
(
tmp
instanceof
List
)
{
@SuppressWarnings("unchecked")
List
<
T
>
lst
=
(
List
<
T
>
)
tmp
;
for
(
int
i
=
0
;
i
<
lst
.
size
(
)
;
i
++
)
{
if
(
lst
.
get
(
i
)
!=
null
&&
compare
(
lst
.
get
(
i
)
,
toReplace
)
)
{
lst
.
remove
(
i
)
;
if
(
replacement
!=
null
)
{
lst
.
add
(
i
,
getReplacement
(
replacement
,
parent
)
)
;
}
}
}
}
else
if
(
tmp
instanceof
Collection
)
{
@SuppressWarnings("unchecked")
Collection
<
T
>
collect
=
(
Collection
<
T
>
)
tmp
;
Object
[
]
array
=
collect
.
toArray
(
)
;
for
(
Object
obj
:
array
)
{
if
(
compare
(
obj
,
toReplace
)
)
{
collect
.
remove
(
obj
)
;
collect
.
add
(
getReplacement
(
replacement
,
parent
)
)
;
}
}
}
else
if
(
compare
(
tmp
,
toReplace
)
)
{
f
.
set
(
parent
,
getReplacement
(
replacement
,
parent
)
)
;
}
}
}
}
