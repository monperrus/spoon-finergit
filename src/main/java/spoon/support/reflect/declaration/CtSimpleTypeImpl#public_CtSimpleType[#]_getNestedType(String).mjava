public
CtSimpleType
<
?
>
getNestedType
(
final
String
name
)
{
class
NestedTypeScanner
extends
CtScanner
{
CtSimpleType
<
?
>
type
;
public
void
checkType
(
CtSimpleType
<
?
>
type
)
{
if
(
type
.
getSimpleName
(
)
.
equals
(
name
)
&&
this
.
equals
(
type
.
getDeclaringType
(
)
)
)
{
this
.
type
=
type
;
}
}
public
<
U
>
void
visitCtClass
(
spoon
.
reflect
.
declaration
.
CtClass
<
U
>
ctClass
)
{
super
.
visitCtClass
(
ctClass
)
;
checkType
(
ctClass
)
;
}
public
<
U
>
void
visitCtInterface
(
spoon
.
reflect
.
declaration
.
CtInterface
<
U
>
intrface
)
{
super
.
visitCtInterface
(
intrface
)
;
checkType
(
intrface
)
;
}
public
<
U
extends
java
.
lang
.
Enum
<
?
>
>
void
visitCtEnum
(
spoon
.
reflect
.
declaration
.
CtEnum
<
U
>
ctEnum
)
{
super
.
visitCtEnum
(
ctEnum
)
;
checkType
(
ctEnum
)
;
}
public
<
A
extends
Annotation
>
void
visitCtAnnotationType
(
CtAnnotationType
<
A
>
annotationType
)
{
super
.
visitCtAnnotationType
(
annotationType
)
;
checkType
(
annotationType
)
;
}
CtSimpleType
<
?
>
getType
(
)
{
return
type
;
}
}
NestedTypeScanner
scanner
=
new
NestedTypeScanner
(
)
;
scanner
.
scan
(
this
)
;
return
scanner
.
getType
(
)
;
}
