@Override
public
Set
<
CtMethod
<
?
>
>
getAllMethods
(
)
{
final
Set
<
CtMethod
<
?
>
>
l
=
new
HashSet
<
>
(
)
;
final
ClassTypingContext
ctc
=
new
ClassTypingContext
(
this
)
;
map
(
new
AllTypeMembersFunction
(
CtMethod
.
class
)
)
.
forEach
(
new
CtConsumer
<
CtMethod
<
?
>
>
(
)
{
@Override
public
void
accept
(
CtMethod
<
?
>
currentMethod
)
{
for
(
CtMethod
<
?
>
alreadyVisitedMethod
:
l
)
{
if
(
ctc
.
isSameSignature
(
currentMethod
,
alreadyVisitedMethod
)
)
{
return
;
}
}
l
.
add
(
currentMethod
)
;
}
}
)
;
return
Collections
.
unmodifiableSet
(
l
)
;
}
