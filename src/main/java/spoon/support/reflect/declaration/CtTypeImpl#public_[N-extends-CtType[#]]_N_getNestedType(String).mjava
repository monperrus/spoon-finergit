@Override
@SuppressWarnings("unchecked")
public
<
N
extends
CtType
<
?
>
>
N
getNestedType
(
final
String
name
)
{
class
NestedTypeScanner
extends
EarlyTerminatingScanner
<
CtType
<
?
>
>
{
private
boolean
checkType
(
CtType
<
?
>
type
)
{
if
(
type
.
getSimpleName
(
)
.
equals
(
name
)
&&
this
.
equals
(
type
.
getDeclaringType
(
)
)
)
{
setResult
(
type
)
;
terminate
(
)
;
return
true
;
}
return
false
;
}
@Override
public
<
U
>
void
visitCtClass
(
spoon
.
reflect
.
declaration
.
CtClass
<
U
>
ctClass
)
{
if
(
!
checkType
(
ctClass
)
)
{
scan
(
ctClass
.
getNestedTypes
(
)
)
;
scan
(
ctClass
.
getConstructors
(
)
)
;
scan
(
ctClass
.
getMethods
(
)
)
;
}
}
@Override
public
<
U
>
void
visitCtInterface
(
spoon
.
reflect
.
declaration
.
CtInterface
<
U
>
intrface
)
{
if
(
!
checkType
(
intrface
)
)
{
scan
(
intrface
.
getNestedTypes
(
)
)
;
scan
(
intrface
.
getMethods
(
)
)
;
}
}
@Override
public
<
U
extends
java
.
lang
.
Enum
<
?
>
>
void
visitCtEnum
(
spoon
.
reflect
.
declaration
.
CtEnum
<
U
>
ctEnum
)
{
if
(
!
checkType
(
ctEnum
)
)
{
scan
(
ctEnum
.
getNestedTypes
(
)
)
;
scan
(
ctEnum
.
getConstructors
(
)
)
;
scan
(
ctEnum
.
getMethods
(
)
)
;
}
}
@Override
public
<
A
extends
Annotation
>
void
visitCtAnnotationType
(
CtAnnotationType
<
A
>
annotationType
)
{
if
(
!
checkType
(
annotationType
)
)
{
scan
(
annotationType
.
getNestedTypes
(
)
)
;
}
}
}
NestedTypeScanner
scanner
=
new
NestedTypeScanner
(
)
;
scanner
.
scan
(
this
)
;
return
(
N
)
scanner
.
getResult
(
)
;
}
