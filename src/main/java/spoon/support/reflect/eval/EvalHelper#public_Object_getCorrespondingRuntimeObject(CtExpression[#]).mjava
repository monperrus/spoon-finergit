/** 
 * Returns the runtime object corresponding to the expression eg CtLiteral(3) -&gt; 3
 */
public
static
Object
getCorrespondingRuntimeObject
(
CtExpression
<
?
>
value
)
{
if
(
value
instanceof
CtNewArray
)
{
return
toArray
(
(
CtNewArray
)
value
)
;
}
else
if
(
value
instanceof
CtAnnotation
)
{
return
(
(
CtAnnotation
<
?
>
)
value
)
.
getActualAnnotation
(
)
;
}
else
if
(
value
instanceof
CtLiteral
)
{
return
(
(
CtLiteral
<
?
>
)
value
)
.
getValue
(
)
;
}
else
if
(
value
instanceof
CtFieldRead
)
{
CtFieldReference
<
?
>
fieldRef
=
(
(
CtFieldRead
<
?
>
)
value
)
.
getVariable
(
)
;
Class
<
?
>
c
=
fieldRef
.
getDeclaringType
(
)
.
getActualClass
(
)
;
CtField
<
?
>
field
=
fieldRef
.
getFieldDeclaration
(
)
;
if
(
Enum
.
class
.
isAssignableFrom
(
c
)
)
{
return
Enum
.
valueOf
(
(
Class
<
?
Enum
>
)
c
,
fieldRef
.
getSimpleName
(
)
)
;
}
if
(
field
.
getDefaultExpression
(
)
instanceof
CtLiteral
)
{
return
(
(
CtLiteral
)
field
.
getDefaultExpression
(
)
)
.
getValue
(
)
;
}
}
throw
new
SpoonException
(
"not possible to transform to expression \""
+
value
+
"\" ("
+
value
.
getClass
(
)
.
getName
(
)
+
")"
)
;
}
