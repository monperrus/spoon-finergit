@SuppressWarnings("unchecked")
public
<
T
>
void
visitCtBinaryOperator
(
CtBinaryOperator
<
T
>
operator
)
{
CtExpression
<
?
>
left
=
evaluate
(
operator
,
operator
.
getLeftHandOperand
(
)
)
;
CtExpression
<
?
>
right
=
evaluate
(
operator
,
operator
.
getRightHandOperand
(
)
)
;
if
(
(
left
instanceof
CtLiteral
)
&&
(
right
instanceof
CtLiteral
)
)
{
Object
leftObject
=
(
(
CtLiteral
<
?
>
)
left
)
.
getValue
(
)
;
Object
rightObject
=
(
(
CtLiteral
<
?
>
)
right
)
.
getValue
(
)
;
CtLiteral
<
Object
>
res
=
operator
.
getFactory
(
)
.
Core
(
)
.
createLiteral
(
)
;
switch
(
operator
.
getKind
(
)
)
{
case
AND
:
res
.
setValue
(
(
Boolean
)
leftObject
&&
(
Boolean
)
rightObject
)
;
break
;
case
OR
:
res
.
setValue
(
(
Boolean
)
leftObject
||
(
Boolean
)
rightObject
)
;
break
;
case
EQ
:
if
(
leftObject
==
null
)
{
res
.
setValue
(
leftObject
==
rightObject
)
;
}
else
{
res
.
setValue
(
leftObject
.
equals
(
rightObject
)
)
;
}
break
;
case
NE
:
if
(
leftObject
==
null
)
{
res
.
setValue
(
leftObject
!=
rightObject
)
;
}
else
{
res
.
setValue
(
!
leftObject
.
equals
(
rightObject
)
)
;
}
break
;
case
GE
:
res
.
setValue
(
(
(
Number
)
leftObject
)
.
doubleValue
(
)
>=
(
(
Number
)
rightObject
)
.
doubleValue
(
)
)
;
break
;
case
LE
:
res
.
setValue
(
(
(
Number
)
leftObject
)
.
doubleValue
(
)
<=
(
(
Number
)
rightObject
)
.
doubleValue
(
)
)
;
break
;
case
GT
:
res
.
setValue
(
(
(
Number
)
leftObject
)
.
doubleValue
(
)
>
(
(
Number
)
rightObject
)
.
doubleValue
(
)
)
;
break
;
case
LT
:
res
.
setValue
(
(
(
Number
)
leftObject
)
.
doubleValue
(
)
<
(
(
Number
)
rightObject
)
.
doubleValue
(
)
)
;
break
;
case
MINUS
:
res
.
setValue
(
convert
(
operator
.
getType
(
)
,
(
(
Number
)
leftObject
)
.
doubleValue
(
)
-
(
(
Number
)
rightObject
)
.
doubleValue
(
)
)
)
;
break
;
case
MUL
:
res
.
setValue
(
convert
(
operator
.
getType
(
)
,
(
(
Number
)
leftObject
)
.
doubleValue
(
)
*
(
(
Number
)
rightObject
)
.
doubleValue
(
)
)
)
;
break
;
case
DIV
:
res
.
setValue
(
convert
(
operator
.
getType
(
)
,
(
(
Number
)
leftObject
)
.
doubleValue
(
)
/
(
(
Number
)
rightObject
)
.
doubleValue
(
)
)
)
;
break
;
case
PLUS
:
if
(
(
leftObject
instanceof
String
)
||
(
rightObject
instanceof
String
)
)
{
res
.
setValue
(
""
+
leftObject
+
rightObject
)
;
}
else
{
res
.
setValue
(
convert
(
operator
.
getType
(
)
,
(
(
Number
)
leftObject
)
.
doubleValue
(
)
+
(
(
Number
)
rightObject
)
.
doubleValue
(
)
)
)
;
}
break
;
case
BITAND
:
if
(
leftObject
instanceof
Boolean
)
{
res
.
setValue
(
(
Boolean
)
leftObject
&
(
Boolean
)
rightObject
)
;
}
else
{
res
.
setValue
(
(
(
Number
)
leftObject
)
.
intValue
(
)
&
(
(
Number
)
rightObject
)
.
intValue
(
)
)
;
}
break
;
case
BITOR
:
if
(
leftObject
instanceof
Boolean
)
{
res
.
setValue
(
(
Boolean
)
leftObject
|
(
Boolean
)
rightObject
)
;
}
else
{
res
.
setValue
(
(
(
Number
)
leftObject
)
.
intValue
(
)
|
(
(
Number
)
rightObject
)
.
intValue
(
)
)
;
}
break
;
case
BITXOR
:
if
(
leftObject
instanceof
Boolean
)
{
res
.
setValue
(
(
Boolean
)
leftObject
^
(
Boolean
)
rightObject
)
;
}
else
{
res
.
setValue
(
(
(
Number
)
leftObject
)
.
intValue
(
)
^
(
(
Number
)
rightObject
)
.
intValue
(
)
)
;
}
break
;
default
:
throw
new
RuntimeException
(
"unsupported operator "
+
operator
.
getKind
(
)
)
;
}
setResult
(
res
)
;
return
;
}
else
if
(
operator
.
getKind
(
)
==
BinaryOperatorKind
.
INSTANCEOF
)
{
CtLiteral
<
Boolean
>
res
=
operator
.
getFactory
(
)
.
Core
(
)
.
createLiteral
(
)
;
CtTypeReference
<
?
>
leftType
=
(
(
CtTypedElement
<
?
>
)
left
)
.
getType
(
)
.
box
(
)
;
CtTypeReference
<
?
>
rightType
=
(
(
CtLiteral
<
CtTypeReference
<
?
>
>
)
right
)
.
getValue
(
)
;
if
(
leftType
.
isSubtypeOf
(
rightType
)
)
{
res
.
setValue
(
true
)
;
setResult
(
res
)
;
}
return
;
}
else
if
(
(
left
instanceof
CtLiteral
)
||
(
right
instanceof
CtLiteral
)
)
{
CtLiteral
<
?
>
literal
;
CtExpression
<
?
>
expr
;
if
(
left
instanceof
CtLiteral
)
{
literal
=
(
CtLiteral
<
?
>
)
left
;
expr
=
right
;
}
else
{
literal
=
(
CtLiteral
<
?
>
)
right
;
expr
=
left
;
}
Object
o
=
literal
.
getValue
(
)
;
CtLiteral
<
Object
>
res
=
operator
.
getFactory
(
)
.
Core
(
)
.
createLiteral
(
)
;
switch
(
operator
.
getKind
(
)
)
{
case
AND
:
if
(
(
Boolean
)
o
)
{
setResult
(
expr
)
;
}
else
{
res
.
setValue
(
false
)
;
setResult
(
res
)
;
}
return
;
case
OR
:
if
(
(
Boolean
)
o
)
{
res
.
setValue
(
true
)
;
setResult
(
res
)
;
}
else
{
setResult
(
expr
)
;
}
return
;
case
BITOR
:
if
(
(
o
instanceof
Boolean
)
&&
(
Boolean
)
o
)
{
res
.
setValue
(
true
)
;
setResult
(
res
)
;
}
return
;
default
:
}
}
CtBinaryOperator
<
T
>
op
=
operator
.
getFactory
(
)
.
Core
(
)
.
createBinaryOperator
(
)
;
op
.
setKind
(
operator
.
getKind
(
)
)
;
op
.
setLeftHandOperand
(
left
)
;
op
.
setRightHandOperand
(
right
)
;
op
.
setType
(
operator
.
getType
(
)
)
;
setResult
(
op
)
;
}
