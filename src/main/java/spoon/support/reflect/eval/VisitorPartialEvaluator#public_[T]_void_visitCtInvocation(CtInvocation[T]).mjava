public
<
T
>
void
visitCtInvocation
(
CtInvocation
<
T
>
invocation
)
{
CtInvocation
<
T
>
i
=
invocation
.
getFactory
(
)
.
Core
(
)
.
createInvocation
(
)
;
i
.
setType
(
invocation
.
getType
(
)
)
;
i
.
setExecutable
(
invocation
.
getExecutable
(
)
)
;
boolean
constant
=
true
;
i
.
setTarget
(
evaluate
(
i
,
invocation
.
getTarget
(
)
)
)
;
if
(
i
.
getTarget
(
)
!=
null
&&
!
(
i
.
getTarget
(
)
instanceof
CtLiteral
)
)
constant
=
false
;
for
(
CtExpression
<
?
>
e
:
invocation
.
getArguments
(
)
)
{
CtExpression
<
?
>
re
=
evaluate
(
i
,
e
)
;
if
(
!
(
re
instanceof
CtLiteral
)
)
constant
=
false
;
i
.
getArguments
(
)
.
add
(
re
)
;
}
if
(
i
.
getExecutable
(
)
.
getSimpleName
(
)
.
equals
(
"<init>"
)
)
{
setResult
(
i
)
;
return
;
}
if
(
constant
)
{
CtExecutable
<
?
>
executable
=
invocation
.
getExecutable
(
)
.
getDeclaration
(
)
;
if
(
executable
!=
null
&&
invocation
.
getType
(
)
!=
null
&&
invocation
.
getExecutable
(
)
.
getDeclaringType
(
)
.
isAssignableFrom
(
(
(
CtSimpleType
<
?
>
)
invocation
.
getParent
(
CtSimpleType
.
class
)
)
.
getReference
(
)
)
)
{
CtBlock
<
?
>
b
=
evaluate
(
invocation
.
getParent
(
)
,
executable
.
getBody
(
)
)
;
flowEnded
=
false
;
CtStatement
last
=
b
.
getStatements
(
)
.
get
(
b
.
getStatements
(
)
.
size
(
)
-
1
)
;
if
(
last
!=
null
&&
(
last
instanceof
CtReturn
)
)
{
if
(
(
(
CtReturn
<
?
>
)
last
)
.
getReturnedExpression
(
)
instanceof
CtLiteral
)
{
setResult
(
(
(
CtReturn
<
?
>
)
last
)
.
getReturnedExpression
(
)
)
;
return
;
}
}
}
else
{
T
r
=
null
;
try
{
r
=
RtHelper
.
invoke
(
i
)
;
CtLiteral
<
T
>
l
=
invocation
.
getFactory
(
)
.
Core
(
)
.
createLiteral
(
)
;
l
.
setValue
(
r
)
;
setResult
(
l
)
;
return
;
}
catch
(
Exception
e
)
{
}
}
}
setResult
(
i
)
;
}
