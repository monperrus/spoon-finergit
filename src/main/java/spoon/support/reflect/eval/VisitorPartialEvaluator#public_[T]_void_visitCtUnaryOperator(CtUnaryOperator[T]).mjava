public
<
T
>
void
visitCtUnaryOperator
(
CtUnaryOperator
<
T
>
operator
)
{
CtExpression
<
?
>
operand
=
evaluate
(
operator
,
operator
.
getOperand
(
)
)
;
if
(
operand
instanceof
CtLiteral
)
{
Object
object
=
(
(
CtLiteral
<
?
>
)
operand
)
.
getValue
(
)
;
CtLiteral
<
Object
>
res
=
operator
.
getFactory
(
)
.
Core
(
)
.
createLiteral
(
)
;
switch
(
operator
.
getKind
(
)
)
{
case
NOT
:
res
.
setValue
(
!
(
Boolean
)
object
)
;
break
;
default
:
throw
new
RuntimeException
(
"unsupported operator "
+
operator
.
getKind
(
)
)
;
}
setResult
(
res
)
;
return
;
}
setResult
(
operator
.
getFactory
(
)
.
Core
(
)
.
clone
(
operator
)
)
;
}
