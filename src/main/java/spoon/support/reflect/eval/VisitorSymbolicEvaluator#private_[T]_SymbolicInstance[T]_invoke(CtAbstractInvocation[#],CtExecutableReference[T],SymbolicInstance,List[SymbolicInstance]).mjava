@SuppressWarnings("unchecked")
private
<
T
>
SymbolicInstance
<
T
>
invoke
(
CtAbstractInvocation
<
?
>
caller
,
CtExecutableReference
<
T
>
executable
,
SymbolicInstance
target
,
List
<
SymbolicInstance
>
args
)
{
enterExecutable
(
caller
,
executable
,
target
,
args
)
;
try
{
CtExecutable
<
?
>
decl
=
executable
.
getDeclaration
(
)
;
if
(
decl
!=
null
)
{
if
(
decl
.
getBody
(
)
!=
null
)
{
evaluate
(
decl
.
getBody
(
)
)
;
if
(
executable
.
isConstructor
(
)
)
{
result
=
target
;
}
else
{
result
=
null
;
}
}
else
{
result
=
new
SymbolicInstance
(
this
,
executable
.
getType
(
)
,
false
)
;
}
}
else
{
CtFieldReference
fref
=
null
;
if
(
isStateFullExternal
(
executable
.
getDeclaringType
(
)
)
)
{
if
(
target
!=
null
&&
isGetter
(
executable
)
)
{
SymbolicInstance
r
=
null
;
fref
=
executable
.
getFactory
(
)
.
Field
(
)
.
createReference
(
target
.
getConcreteType
(
)
,
executable
.
getType
(
)
,
executable
.
getSimpleName
(
)
.
substring
(
3
)
)
;
r
=
heap
.
get
(
target
.
getFieldValue
(
fref
)
)
;
if
(
r
!=
null
)
{
result
=
r
;
}
else
{
result
=
new
SymbolicInstance
(
this
,
executable
.
getType
(
)
,
false
)
;
}
}
else
if
(
target
!=
null
&&
isSetter
(
executable
)
)
{
fref
=
executable
.
getFactory
(
)
.
Field
(
)
.
createReference
(
target
.
getConcreteType
(
)
,
executable
.
getType
(
)
,
executable
.
getSimpleName
(
)
.
substring
(
3
)
)
;
target
.
setFieldValue
(
heap
,
fref
,
args
.
get
(
0
)
)
;
result
=
new
SymbolicInstance
(
this
,
executable
.
getType
(
)
,
false
)
;
}
else
{
result
=
new
SymbolicInstance
(
this
,
executable
.
getType
(
)
,
false
)
;
}
}
else
{
if
(
!
executable
.
isConstructor
(
)
)
{
result
=
new
SymbolicInstance
(
this
,
executable
.
getType
(
)
,
false
)
;
}
else
{
result
=
target
;
}
}
}
}
catch
(
ReturnException
e
)
{
}
finally
{
exitExecutable
(
executable
)
;
}
return
result
;
}
