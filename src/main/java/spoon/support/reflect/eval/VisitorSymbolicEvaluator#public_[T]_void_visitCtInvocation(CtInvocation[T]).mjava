public
<
T
>
void
visitCtInvocation
(
CtInvocation
<
T
>
invocation
)
{
CtExecutableReference
<
T
>
eref
=
invocation
.
getExecutable
(
)
;
List
<
SymbolicInstance
<
?
>
>
arguments
=
new
ArrayList
<
SymbolicInstance
<
?
>
>
(
)
;
for
(
CtExpression
<
?
>
expr
:
invocation
.
getArguments
(
)
)
{
SymbolicInstance
<
?
>
o
=
evaluate
(
expr
)
;
arguments
.
add
(
o
)
;
}
SymbolicInstance
<
?
>
target
=
evaluate
(
invocation
.
getTarget
(
)
)
;
if
(
target
!=
null
)
{
CtExecutableReference
<
T
>
override
=
eref
.
getOverridingExecutable
(
target
.
getConcreteType
(
)
)
;
if
(
override
!=
null
)
{
eref
=
override
;
}
}
if
(
target
==
null
)
{
if
(
eref
.
isStatic
(
)
)
{
target
=
heap
.
getType
(
this
,
eref
.
getDeclaringType
(
)
)
;
}
else
{
target
=
stack
.
getThis
(
)
;
}
}
invoke
(
invocation
,
eref
,
(
SymbolicInstance
<
?
>
)
target
,
arguments
)
;
}
