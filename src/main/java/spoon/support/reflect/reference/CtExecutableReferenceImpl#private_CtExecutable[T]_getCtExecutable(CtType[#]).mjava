private
CtExecutable
<
T
>
getCtExecutable
(
CtType
<
?
>
typeDecl
)
{
if
(
typeDecl
==
null
)
{
return
null
;
}
CtExecutable
<
T
>
method
=
typeDecl
.
getMethod
(
getSimpleName
(
)
,
parameters
.
toArray
(
new
CtTypeReferenceImpl
<
?
>
[
]
)
)
;
if
(
(
method
==
null
)
&&
(
typeDecl
instanceof
CtClass
)
&&
(
getSimpleName
(
)
.
equals
(
CtExecutableReference
.
CONSTRUCTOR_NAME
)
)
)
{
try
{
return
(
CtExecutable
<
T
>
)
(
(
CtClass
<
?
>
)
typeDecl
)
.
getConstructor
(
parameters
.
toArray
(
new
CtTypeReferenceImpl
<
?
>
[
]
)
)
;
}
catch
(
ClassCastException
e
)
{
Launcher
.
LOGGER
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
}
else
if
(
method
==
null
&&
getSimpleName
(
)
.
startsWith
(
CtExecutableReference
.
LAMBDA_NAME_PREFIX
)
)
{
final
List
<
CtLambda
>
elements
=
(
List
<
CtLambda
>
)
typeDecl
.
getElements
(
new
NamedElementFilter
<
>
(
CtLambda
.
class
,
getSimpleName
(
)
)
)
;
if
(
elements
.
size
(
)
==
0
)
{
return
null
;
}
return
elements
.
get
(
0
)
;
}
return
method
;
}
