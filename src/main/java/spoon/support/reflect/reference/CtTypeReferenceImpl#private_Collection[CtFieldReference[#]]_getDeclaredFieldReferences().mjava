/** 
 * Collects all field references of the declared class.
 * @return collection of field references
 */
private
Collection
<
CtFieldReference
<
?
>
>
getDeclaredFieldReferences
(
)
{
Collection
<
CtFieldReference
<
?
>
>
references
=
new
ArrayList
<
>
(
)
;
for
(
Field
f
:
getActualClass
(
)
.
getDeclaredFields
(
)
)
{
references
.
add
(
getFactory
(
)
.
Field
(
)
.
createReference
(
f
)
)
;
}
if
(
getActualClass
(
)
.
isAnnotation
(
)
)
{
for
(
Method
m
:
getActualClass
(
)
.
getDeclaredMethods
(
)
)
{
CtTypeReference
<
?
>
retRef
=
getFactory
(
)
.
Type
(
)
.
createReference
(
m
.
getReturnType
(
)
)
;
CtFieldReference
<
?
>
fr
=
getFactory
(
)
.
Field
(
)
.
createReference
(
this
,
retRef
,
m
.
getName
(
)
)
;
references
.
add
(
fr
)
;
}
}
return
references
;
}
