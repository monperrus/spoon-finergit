/** 
 * adds the actualTypeArguments of sourceTypeRef to targetTypeRef. Type of targetTypeRef extends from type of sourceTypeRef
 * @param targetTypeRef
 * @param sourceTypeRef
 */
private
static
void
applyActualTypeArguments
(
CtTypeReference
<
?
>
targetTypeRef
,
CtTypeReference
<
?
>
sourceTypeRef
)
{
CtTypeReference
<
?
>
targetDeclType
=
targetTypeRef
.
getDeclaringType
(
)
;
CtTypeReference
<
?
>
sourceDeclType
=
sourceTypeRef
.
getDeclaringType
(
)
;
if
(
targetDeclType
!=
null
&&
sourceDeclType
!=
null
&&
targetDeclType
.
isSubtypeOf
(
sourceDeclType
)
)
{
applyActualTypeArguments
(
targetDeclType
,
sourceDeclType
)
;
}
if
(
targetTypeRef
.
isSubtypeOf
(
sourceTypeRef
)
==
false
)
{
throw
new
SpoonException
(
"Invalid arguments. targetTypeRef "
+
targetTypeRef
.
getQualifiedName
(
)
+
" must be a sub type of sourceTypeRef "
+
sourceTypeRef
.
getQualifiedName
(
)
)
;
}
List
<
CtTypeReference
<
?
>
>
newTypeArgs
=
new
ArrayList
<
>
(
)
;
for
(
CtTypeReference
<
?
>
l_tr
:
sourceTypeRef
.
getActualTypeArguments
(
)
)
{
newTypeArgs
.
add
(
l_tr
.
clone
(
)
)
;
}
targetTypeRef
.
setActualTypeArguments
(
newTypeArgs
)
;
}
