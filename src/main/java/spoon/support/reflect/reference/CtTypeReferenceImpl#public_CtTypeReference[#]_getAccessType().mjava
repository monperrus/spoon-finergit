@Override
public
CtTypeReference
<
?
>
getAccessType
(
)
{
CtTypeReference
<
?
>
declType
=
this
.
getDeclaringType
(
)
;
if
(
declType
==
null
)
{
throw
new
SpoonException
(
"The declaring type is expected, but "
+
getQualifiedName
(
)
+
" is top level type"
)
;
}
CtType
<
?
>
contextType
=
getParent
(
CtType
.
class
)
;
if
(
contextType
==
null
)
{
return
declType
;
}
CtTypeReference
<
?
>
contextTypeRef
=
contextType
.
getReference
(
)
;
if
(
contextTypeRef
!=
null
&&
contextTypeRef
.
canAccess
(
declType
)
==
false
)
{
CtTypeReference
<
?
>
visibleDeclType
=
null
;
CtTypeReference
<
?
>
type
=
contextTypeRef
;
while
(
visibleDeclType
==
null
&&
type
!=
null
)
{
visibleDeclType
=
getLastVisibleSuperClassExtendingFrom
(
type
,
declType
)
;
if
(
visibleDeclType
!=
null
)
{
applyActualTypeArguments
(
visibleDeclType
,
declType
)
;
break
;
}
type
=
type
.
getDeclaringType
(
)
;
}
declType
=
visibleDeclType
;
}
if
(
declType
==
null
)
{
throw
new
SpoonException
(
"Cannot compute access path to type: "
+
this
.
getQualifiedName
(
)
+
" in context of type: "
+
contextType
.
getQualifiedName
(
)
)
;
}
return
declType
;
}
