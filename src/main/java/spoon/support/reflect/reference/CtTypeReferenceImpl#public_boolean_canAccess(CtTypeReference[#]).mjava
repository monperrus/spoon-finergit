@Override
public
boolean
canAccess
(
CtTypeReference
<
?
>
type
)
{
try
{
if
(
type
==
null
)
{
return
true
;
}
if
(
type
.
getTypeDeclaration
(
)
==
null
)
{
return
true
;
}
Set
<
ModifierKind
>
modifiers
=
type
.
getModifiers
(
)
;
if
(
modifiers
.
contains
(
ModifierKind
.
PUBLIC
)
)
{
return
true
;
}
if
(
modifiers
.
contains
(
ModifierKind
.
PROTECTED
)
)
{
CtTypeReference
<
?
>
declaringType
=
type
.
getDeclaringType
(
)
;
if
(
declaringType
==
null
)
{
throw
new
SpoonException
(
"The protected class "
+
type
.
getQualifiedName
(
)
+
" has no declaring class."
)
;
}
if
(
isImplementationOf
(
declaringType
)
)
{
return
true
;
}
return
isInSamePackage
(
type
)
;
}
if
(
modifiers
.
contains
(
ModifierKind
.
PRIVATE
)
)
{
return
type
.
getTopLevelType
(
)
.
getQualifiedName
(
)
.
equals
(
this
.
getTopLevelType
(
)
.
getQualifiedName
(
)
)
;
}
CtTypeReference
<
?
>
declaringTypeRef
=
type
.
getDeclaringType
(
)
;
if
(
declaringTypeRef
!=
null
&&
declaringTypeRef
.
isInterface
(
)
)
{
return
true
;
}
return
isInSamePackage
(
type
)
;
}
catch
(
SpoonClassNotFoundException
e
)
{
handleParentNotFound
(
e
)
;
return
true
;
}
}
