@Override
public
boolean
isSubtypeOf
(
CtTypeReference
<
?
>
type
)
{
if
(
type
instanceof
CtTypeParameterReference
)
{
return
false
;
}
if
(
NULL_TYPE_NAME
.
equals
(
getSimpleName
(
)
)
||
NULL_TYPE_NAME
.
equals
(
type
.
getSimpleName
(
)
)
)
{
return
false
;
}
if
(
isAnonymous
(
)
||
type
.
isAnonymous
(
)
)
{
return
false
;
}
if
(
isPrimitive
(
)
||
type
.
isPrimitive
(
)
)
{
return
equals
(
type
)
;
}
CtType
<
?
>
superTypeDecl
=
type
.
getDeclaration
(
)
;
CtType
<
?
>
subTypeDecl
=
getDeclaration
(
)
;
if
(
(
subTypeDecl
==
null
)
&&
(
superTypeDecl
==
null
)
)
{
try
{
if
(
(
(
this
instanceof
CtArrayTypeReference
)
&&
(
type
instanceof
CtArrayTypeReference
)
)
)
{
return
(
(
CtArrayTypeReference
<
?
>
)
this
)
.
getComponentType
(
)
.
isSubtypeOf
(
(
(
CtArrayTypeReference
<
?
>
)
type
)
.
getComponentType
(
)
)
;
}
Class
<
?
>
actualSubType
=
getActualClass
(
)
;
Class
<
?
>
actualSuperType
=
type
.
getActualClass
(
)
;
return
actualSuperType
.
isAssignableFrom
(
actualSubType
)
;
}
catch
(
Exception
e
)
{
Launcher
.
LOGGER
.
error
(
"cannot determine runtime types for '"
+
this
+
"' ("
+
getActualClass
(
)
+
") and '"
+
type
+
"' ("
+
type
.
getActualClass
(
)
+
")"
,
e
)
;
return
false
;
}
}
if
(
getQualifiedName
(
)
.
equals
(
type
.
getQualifiedName
(
)
)
)
{
return
true
;
}
if
(
subTypeDecl
!=
null
)
{
if
(
getFactory
(
)
.
Type
(
)
.
OBJECT
.
equals
(
type
)
)
{
return
true
;
}
for
(
CtTypeReference
<
?
>
ref
:
subTypeDecl
.
getSuperInterfaces
(
)
)
{
if
(
ref
.
isSubtypeOf
(
type
)
)
{
return
true
;
}
}
if
(
subTypeDecl
instanceof
CtClass
)
{
if
(
(
(
CtClass
<
?
>
)
subTypeDecl
)
.
getSuperclass
(
)
!=
null
)
{
if
(
(
(
CtClass
<
?
>
)
subTypeDecl
)
.
getSuperclass
(
)
.
equals
(
type
)
)
{
return
true
;
}
return
(
(
CtClass
<
?
>
)
subTypeDecl
)
.
getSuperclass
(
)
.
isSubtypeOf
(
type
)
;
}
}
return
false
;
}
else
{
try
{
Class
<
?
>
actualSubType
=
getActualClass
(
)
;
for
(
Class
<
?
>
c
:
actualSubType
.
getInterfaces
(
)
)
{
if
(
getFactory
(
)
.
Type
(
)
.
createReference
(
c
)
.
isSubtypeOf
(
type
)
)
{
return
true
;
}
}
CtTypeReference
<
?
>
superType
=
getFactory
(
)
.
Type
(
)
.
createReference
(
actualSubType
.
getSuperclass
(
)
)
;
return
superType
!=
null
&&
(
superType
.
equals
(
type
)
||
superType
.
isSubtypeOf
(
type
)
)
;
}
catch
(
Exception
e
)
{
Launcher
.
LOGGER
.
error
(
"cannot determine runtime types for '"
+
this
+
"' and '"
+
type
+
"'"
,
e
)
;
return
false
;
}
}
}
