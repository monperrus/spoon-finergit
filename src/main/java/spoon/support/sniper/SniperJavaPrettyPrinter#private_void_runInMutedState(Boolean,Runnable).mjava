/** 
 * Run code using  {@link MutableTokenWriter} in defined state.After this function leaves, the muted status is restored.
 * @param muted required muted status
 * @param code to be processed {@link Runnable}
 */
private
void
runInMutedState
(
Boolean
muted
,
Runnable
code
)
{
boolean
originMuted
=
mutableTokenWriter
.
isMuted
(
)
;
if
(
muted
==
null
)
{
muted
=
originMuted
;
}
try
{
mutableTokenWriter
.
setMuted
(
muted
)
;
code
.
run
(
)
;
}
finally
{
if
(
mutableTokenWriter
.
isMuted
(
)
!=
muted
)
{
if
(
mutableTokenWriter
.
isMuted
(
)
)
{
throw
new
SpoonException
(
"Unexpected state: Token writer is muted after scanning"
)
;
}
else
{
throw
new
SpoonException
(
"Unexpected state: Token writer is not muted after scanning"
)
;
}
}
mutableTokenWriter
.
setMuted
(
originMuted
)
;
}
}
