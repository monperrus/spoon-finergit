/** 
 * scans the `element` which exist on `role` in it's parent
 * @param role {@link CtRole} of `element` in scope of it's parent
 * @param element a scanned element
 * @param fragment origin source fragment of element
 * @param isFragmentModified true if any part of `fragment` is modified, false if whole fragment is not modified, null if caller doesn't know
 */
private
void
scanInternal
(
CtRole
role
,
CtElement
element
,
SourceFragment
fragment
,
Boolean
isFragmentModified
)
{
if
(
mutableTokenWriter
.
isMuted
(
)
)
{
throw
new
SpoonException
(
"Unexpected state of sniper pretty printer. TokenWriter is muted."
)
;
}
if
(
fragment
==
null
)
{
throw
new
SpoonException
(
"Missing source fragment. Call PrintEvent#print instead."
)
;
}
if
(
fragment
instanceof
CollectionSourceFragment
)
{
CollectionSourceFragment
csf
=
(
CollectionSourceFragment
)
fragment
;
SourceFragmentContext
listContext
=
csf
.
isOrdered
(
)
?
new
SourceFragmentContextList
(
mutableTokenWriter
,
element
,
csf
.
getItems
(
)
,
changeResolver
)
:
new
SourceFragmentContextSet
(
mutableTokenWriter
,
element
,
csf
.
getItems
(
)
,
changeResolver
)
;
sourceFragmentContextStack
.
push
(
listContext
)
;
if
(
isFragmentModified
==
Boolean
.
FALSE
)
{
mutableTokenWriter
.
getPrinterHelper
(
)
.
directPrint
(
fragment
.
getSourceCode
(
)
)
;
mutableTokenWriter
.
setMuted
(
true
)
;
scan
(
element
)
;
}
else
{
scan
(
element
)
;
}
}
else
if
(
fragment
instanceof
ElementSourceFragment
)
{
ElementSourceFragment
sourceFragment
=
(
ElementSourceFragment
)
fragment
;
ChangeResolver
changeResolver
=
null
;
if
(
isFragmentModified
==
null
)
{
changeResolver
=
new
ChangeResolver
(
getChangeCollector
(
)
,
element
)
;
isFragmentModified
=
changeResolver
.
hasChangedRole
(
)
;
}
if
(
isFragmentModified
==
false
)
{
mutableTokenWriter
.
getPrinterHelper
(
)
.
directPrint
(
fragment
.
getSourceCode
(
)
)
;
superScanInContext
(
element
,
SourceFragmentContextPrettyPrint
.
INSTANCE
,
true
)
;
return
;
}
if
(
changeResolver
==
null
)
{
changeResolver
=
new
ChangeResolver
(
getChangeCollector
(
)
,
element
)
;
}
if
(
changeResolver
.
hasChangedRole
(
)
==
false
)
{
throw
new
SpoonException
(
"The modified fragment has no changed roles?"
)
;
}
superScanInContext
(
element
,
new
SourceFragmentContextNormal
(
mutableTokenWriter
,
sourceFragment
,
changeResolver
)
,
false
)
;
}
else
{
throw
new
SpoonException
(
"Unsupported fragment type: "
+
fragment
.
getClass
(
)
)
;
}
}
