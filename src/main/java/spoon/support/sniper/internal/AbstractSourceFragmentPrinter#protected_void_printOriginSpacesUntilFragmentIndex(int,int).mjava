/** 
 * Prints origin whitespaces including comments which prefixes the fragment on index `index`, starting with fragment on `fromIndex`
 * @param fromIndex index of first processed fragment
 * @param toIndex index of first not processed fragment.
 */
protected
void
printOriginSpacesUntilFragmentIndex
(
int
fromIndex
,
int
toIndex
)
{
boolean
canPrintSpace
=
true
;
boolean
skipSpaceAfterDeletedElement
=
false
;
for
(
int
i
=
fromIndex
;
i
<
toIndex
;
i
++
)
{
SourceFragment
fragment
=
childFragments
.
get
(
i
)
;
if
(
fragment
instanceof
ElementSourceFragment
)
{
ElementSourceFragment
sourceFragment
=
(
ElementSourceFragment
)
fragment
;
if
(
sourceFragment
.
getElement
(
)
instanceof
CtComment
)
{
CtComment
comment
=
(
CtComment
)
sourceFragment
.
getElement
(
)
;
if
(
changeResolver
.
isElementExists
(
comment
)
)
{
if
(
changeResolver
.
getChanges
(
comment
)
.
size
(
)
>
0
)
{
mutableTokenWriter
.
writeComment
(
comment
)
;
}
else
{
mutableTokenWriter
.
getPrinterHelper
(
)
.
directPrint
(
fragment
.
getSourceCode
(
)
)
;
}
canPrintSpace
=
true
;
}
else
{
canPrintSpace
=
false
;
}
}
}
else
if
(
isSpaceFragment
(
fragment
)
&&
canPrintSpace
)
{
if
(
!
skipSpaceAfterDeletedElement
)
{
mutableTokenWriter
.
getPrinterHelper
(
)
.
directPrint
(
fragment
.
getSourceCode
(
)
)
;
}
else
{
skipSpaceAfterDeletedElement
=
false
;
}
canPrintSpace
=
false
;
}
else
{
skipSpaceAfterDeletedElement
=
true
;
}
}
setChildFragmentIdx
(
toIndex
-
1
)
;
separatorActions
.
clear
(
)
;
}
