/** 
 * @param parentFragment the parent {@link ElementSourceFragment}, which will receive  {@link ElementSourceFragment} made for `otherElement`
 * @param roleInParent the {@link CtRole} of `otherElement` in scope of element of `parentFragment`
 * @param otherElement {@link SourcePositionHolder} whose {@link ElementSourceFragment} has to be added to `parentFragment`
 * @return new {@link ElementSourceFragment} created for `otherElement` or null if `otherElement` has no source position or doesn't belong to the same compilation unit
 */
private
ElementSourceFragment
addChild
(
ElementSourceFragment
parentFragment
,
CtRole
roleInParent
,
SourcePositionHolder
otherElement
)
{
SourcePosition
otherSourcePosition
=
otherElement
.
getPosition
(
)
;
if
(
otherSourcePosition
instanceof
SourcePositionImpl
&&
!
(
otherSourcePosition
.
getCompilationUnit
(
)
instanceof
NoSourcePosition
.
NullCompilationUnit
)
)
{
if
(
parentFragment
.
isFromSameSource
(
otherSourcePosition
)
)
{
ElementSourceFragment
otherFragment
=
new
ElementSourceFragment
(
otherElement
,
parentFragment
.
getRoleHandler
(
roleInParent
,
otherElement
)
)
;
CMP
cmp
=
parentFragment
.
compare
(
otherFragment
)
;
if
(
cmp
==
CMP
.
OTHER_IS_CHILD
)
{
parentFragment
.
addChild
(
otherFragment
)
;
return
otherFragment
;
}
else
{
if
(
cmp
==
CMP
.
OTHER_IS_AFTER
||
cmp
==
CMP
.
OTHER_IS_BEFORE
)
{
if
(
otherElement
instanceof
CtComment
)
{
if
(
otherFragment
.
getStart
(
)
==
0
)
{
addChild
(
otherFragment
)
;
return
otherFragment
;
}
parentFragment
.
addChild
(
otherFragment
)
;
return
otherFragment
;
}
}
throw
new
SpoonException
(
"The SourcePosition of elements are not consistent\nparentFragment: "
+
parentFragment
+
"\notherFragment: "
+
otherFragment
)
;
}
}
else
{
throw
new
SpoonException
(
"SourcePosition from unexpected compilation unit: "
+
otherSourcePosition
+
" expected is: "
+
parentFragment
.
getSourcePosition
(
)
)
;
}
}
return
null
;
}
