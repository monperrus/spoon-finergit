/** 
 * Calls `consumer` once for each constant  {@link SourceFragment} found in source code between `start` and `end`
 */
private
void
forEachConstantFragment
(
int
start
,
int
end
,
Consumer
<
SourceFragment
>
consumer
)
{
if
(
start
==
end
)
{
return
;
}
if
(
start
>
end
)
{
throw
new
SpoonException
(
"Inconsistent start/end. Start="
+
start
+
" is greater then End="
+
end
)
;
}
String
sourceCode
=
getOriginalSourceCode
(
)
;
StringBuilder
buff
=
new
StringBuilder
(
)
;
CharType
lastType
=
null
;
int
off
=
start
;
while
(
off
<
end
)
{
char
c
=
sourceCode
.
charAt
(
off
)
;
CharType
type
=
CharType
.
fromChar
(
c
)
;
if
(
type
!=
lastType
)
{
if
(
lastType
!=
null
)
{
onCharSequence
(
lastType
,
buff
,
consumer
)
;
buff
.
setLength
(
0
)
;
}
lastType
=
type
;
}
buff
.
append
(
c
)
;
off
++
;
}
onCharSequence
(
lastType
,
buff
,
consumer
)
;
}
