/** 
 * Searches the tree of fragments for the  {@link ElementSourceFragment} with expected `element`,which contains `start` and `end` source interval. It searches in siblings and children of this  {@link ElementSourceFragment} recursively.
 * @param element the {@link SourcePositionHolder} of fragment it is looking for or null for any element
 * @param start the start offset of searched fragment
 * @param end the offset of next character after the end of searched fragment
 * @return {@link ElementSourceFragment} which represents the root of the CtElement whose sources are in interval [start, end]
 */
public
ElementSourceFragment
getSourceFragmentOf
(
SourcePositionHolder
element
,
int
start
,
int
end
)
{
int
myEnd
=
getEnd
(
)
;
if
(
myEnd
<=
start
)
{
if
(
nextSibling
==
null
)
{
return
null
;
}
return
getRootFragmentOfElement
(
nextSibling
.
getSourceFragmentOf
(
element
,
start
,
end
)
)
;
}
int
myStart
=
getStart
(
)
;
if
(
myStart
<=
start
)
{
if
(
myEnd
>=
end
)
{
if
(
myStart
==
start
&&
myEnd
==
end
)
{
if
(
element
!=
null
&&
getElement
(
)
!=
element
)
{
if
(
firstChild
==
null
)
{
throw
new
SpoonException
(
"There is no source fragment for element "
+
element
.
toString
(
)
+
". There is one for class "
+
getElement
(
)
.
toString
(
)
)
;
}
return
firstChild
.
getSourceFragmentOf
(
element
,
start
,
end
)
;
}
return
this
;
}
if
(
firstChild
==
null
)
{
if
(
element
!=
null
&&
getElement
(
)
!=
element
)
{
throw
new
SpoonException
(
"There is no source fragment for element "
+
element
.
getClass
(
)
+
". There is one for class "
+
getElement
(
)
.
getClass
(
)
)
;
}
return
this
;
}
ElementSourceFragment
child
=
getRootFragmentOfElement
(
firstChild
.
getSourceFragmentOf
(
element
,
start
,
end
)
)
;
if
(
child
!=
null
)
{
return
child
;
}
if
(
element
!=
null
&&
getElement
(
)
!=
element
)
{
throw
new
SpoonException
(
"There is no source fragment for element "
+
element
.
getClass
(
)
+
". There is one for class "
+
getElement
(
)
.
getClass
(
)
)
;
}
return
this
;
}
throw
new
SpoonException
(
"Invalid start/end interval. It overlaps multiple fragments."
)
;
}
return
null
;
}
