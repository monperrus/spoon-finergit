/** 
 * Gets the Map of names to template parameter values for all the template parameters of a given template type + adds mapping of template model reference to target type as parameter too
 * @param f the factory
 * @param targetType the target type of the substitution (can be null), which will be done with result parameters
 * @param template the template that holds the parameter values
 */
public
static
Map
<
String
,
Object
>
getTemplateParametersAsMap
(
Factory
f
,
CtType
<
?
>
targetType
,
Template
<
?
>
template
)
{
Map
<
String
,
Object
>
params
=
new
HashMap
<
>
(
Parameters
.
getNamesToValues
(
template
,
(
CtClass
)
f
.
Class
(
)
.
get
(
template
.
getClass
(
)
)
)
)
;
CtTypeReference
<
?
>
targetTypeRef
=
targetType
==
null
?
null
:
targetType
.
getReference
(
)
;
if
(
targetType
==
null
)
{
Object
targetTypeObject
=
params
.
get
(
template
.
getClass
(
)
.
getSimpleName
(
)
)
;
if
(
targetTypeObject
!=
null
)
{
if
(
targetTypeObject
instanceof
CtTypeReference
<
?
>
)
{
targetTypeRef
=
(
CtTypeReference
<
?
>
)
targetTypeObject
;
}
else
if
(
targetTypeObject
instanceof
String
)
{
targetTypeRef
=
f
.
Type
(
)
.
createReference
(
(
String
)
targetTypeObject
)
;
}
else
if
(
targetTypeObject
instanceof
Class
)
{
targetTypeRef
=
f
.
Type
(
)
.
createReference
(
(
Class
<
?
>
)
targetTypeObject
)
;
}
else
{
throw
new
SpoonException
(
"Unsupported definition of target type by value of class "
+
targetTypeObject
.
getClass
(
)
)
;
}
}
}
if
(
targetTypeRef
!=
null
)
{
params
.
put
(
PatternBuilder
.
TARGET_TYPE
,
targetTypeRef
)
;
}
return
params
;
}
