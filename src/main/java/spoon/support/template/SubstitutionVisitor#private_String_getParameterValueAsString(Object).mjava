/** 
 * @param parameterValue a value of an template parameter
 * @return parameter value converted to String
 */
private
String
getParameterValueAsString
(
Object
parameterValue
)
{
if
(
parameterValue
==
null
)
{
return
null
;
}
if
(
parameterValue
instanceof
String
)
{
return
(
String
)
parameterValue
;
}
else
if
(
parameterValue
instanceof
CtNamedElement
)
{
return
(
(
CtNamedElement
)
parameterValue
)
.
getSimpleName
(
)
;
}
else
if
(
parameterValue
instanceof
CtReference
)
{
return
(
(
CtReference
)
parameterValue
)
.
getSimpleName
(
)
;
}
else
if
(
parameterValue
instanceof
Class
)
{
return
(
(
Class
)
parameterValue
)
.
getSimpleName
(
)
;
}
else
if
(
parameterValue
instanceof
CtInvocation
)
{
return
getShortSignatureForJavadoc
(
(
(
CtInvocation
<
?
>
)
parameterValue
)
.
getExecutable
(
)
)
;
}
else
if
(
parameterValue
instanceof
CtExecutableReference
)
{
return
getShortSignatureForJavadoc
(
(
CtExecutableReference
<
?
>
)
parameterValue
)
;
}
else
if
(
parameterValue
instanceof
CtExecutable
)
{
return
getShortSignatureForJavadoc
(
(
(
CtExecutable
<
?
>
)
parameterValue
)
.
getReference
(
)
)
;
}
else
if
(
parameterValue
instanceof
CtLiteral
)
{
Object
val
=
(
(
CtLiteral
<
Object
>
)
parameterValue
)
.
getValue
(
)
;
return
val
==
null
?
null
:
val
.
toString
(
)
;
}
throw
new
SpoonException
(
"Parameter value has unexpected class: "
+
parameterValue
.
getClass
(
)
.
getName
(
)
+
", whose conversion to String is not supported"
)
;
}
