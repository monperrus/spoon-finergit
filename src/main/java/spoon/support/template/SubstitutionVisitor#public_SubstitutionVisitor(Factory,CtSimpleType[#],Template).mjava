/** 
 * Creates a new substitution visitor.
 * @param f the factory
 * @param targetType the target type of the substitution
 * @param template the template that holds the parameter values
 */
public
SubstitutionVisitor
(
Factory
f
,
CtSimpleType
<
?
>
targetType
,
Template
template
)
{
inheritanceScanner
=
new
InheritanceSustitutionScanner
(
this
)
;
this
.
f
=
f
;
this
.
template
=
template
;
this
.
targetType
=
targetType
;
S
=
f
.
Executable
(
)
.
createReference
(
f
.
Type
(
)
.
createReference
(
TemplateParameter
.
class
)
,
f
.
Type
(
)
.
createTypeParameterReference
(
"T"
)
,
"S"
)
;
templateRef
=
f
.
Type
(
)
.
createReference
(
template
.
getClass
(
)
)
;
templateType
=
f
.
Template
(
)
.
get
(
templateRef
.
getQualifiedName
(
)
)
;
parameterNames
=
Parameters
.
getNames
(
templateType
)
;
targetRef
=
f
.
Type
(
)
.
createReference
(
targetType
)
;
targetRef
.
accept
(
this
)
;
templateTypeRef
=
f
.
Type
(
)
.
createReference
(
Template
.
class
)
;
}
