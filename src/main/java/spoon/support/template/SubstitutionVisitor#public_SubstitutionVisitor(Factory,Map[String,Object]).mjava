/** 
 * Creates new substitution visitor with substitution model (doesn't have to implement  {@link Template}) type and the substitution parameters (doesn't have to be bound to  {@link TemplateParameter} or {@link Parameter}).
 * @param f the factory
 * @param templateParameters the parameter names and values which will be used during substitution
 */
public
SubstitutionVisitor
(
Factory
f
,
Map
<
String
,
Object
>
templateParameters
)
{
this
.
inheritanceScanner
=
new
InheritanceSustitutionScanner
(
)
;
this
.
factory
=
f
;
S
=
factory
.
Executable
(
)
.
createReference
(
factory
.
Type
(
)
.
createReference
(
TemplateParameter
.
class
)
,
factory
.
Type
(
)
.
createTypeParameterReference
(
"T"
)
,
"S"
)
;
this
.
context
=
new
Context
(
null
)
.
putParameters
(
templateParameters
)
;
}
