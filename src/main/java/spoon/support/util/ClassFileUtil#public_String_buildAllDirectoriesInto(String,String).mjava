public
static
String
buildAllDirectoriesInto
(
String
outputPath
,
String
relativeFileName
)
throws
IOException
{
char
fileSeparatorChar
=
File
.
separatorChar
;
String
fileSeparator
=
File
.
separator
;
File
f
;
outputPath
=
outputPath
.
replace
(
'/'
,
fileSeparatorChar
)
;
if
(
outputPath
.
endsWith
(
fileSeparator
)
)
{
outputPath
=
outputPath
.
substring
(
0
,
outputPath
.
length
(
)
-
1
)
;
}
f
=
new
File
(
outputPath
)
;
if
(
f
.
exists
(
)
)
{
if
(
!
f
.
isDirectory
(
)
)
{
final
String
message
=
Messages
.
bind
(
Messages
.
output_isFile
,
f
.
getAbsolutePath
(
)
)
;
throw
new
IOException
(
message
)
;
}
}
else
{
if
(
!
f
.
mkdirs
(
)
)
{
final
String
message
=
Messages
.
bind
(
Messages
.
output_notValidAll
,
f
.
getAbsolutePath
(
)
)
;
throw
new
IOException
(
message
)
;
}
}
StringBuffer
outDir
=
new
StringBuffer
(
outputPath
)
;
outDir
.
append
(
fileSeparator
)
;
StringTokenizer
tokenizer
=
new
StringTokenizer
(
relativeFileName
,
fileSeparator
)
;
String
token
=
tokenizer
.
nextToken
(
)
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
f
=
new
File
(
outDir
.
append
(
token
)
.
append
(
fileSeparator
)
.
toString
(
)
)
;
if
(
f
.
exists
(
)
)
{
}
else
{
if
(
!
f
.
mkdir
(
)
)
{
throw
new
IOException
(
Messages
.
bind
(
Messages
.
output_notValid
,
f
.
getName
(
)
)
)
;
}
}
token
=
tokenizer
.
nextToken
(
)
;
}
return
outDir
.
append
(
token
)
.
toString
(
)
;
}
