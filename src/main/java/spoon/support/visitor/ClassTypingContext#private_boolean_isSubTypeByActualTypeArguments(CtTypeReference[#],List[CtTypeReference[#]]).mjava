/** 
 * @return true if actualType arguments of `scope` are fitting as a subtype of superTypeArgs
 */
private
boolean
isSubTypeByActualTypeArguments
(
CtTypeReference
<
?
>
superTypeRef
,
List
<
CtTypeReference
<
?
>
>
expectedSuperTypeArguments
)
{
List
<
CtTypeReference
<
?
>
>
superTypeArgs
=
superTypeRef
.
getActualTypeArguments
(
)
;
if
(
superTypeArgs
.
isEmpty
(
)
)
{
return
true
;
}
List
<
CtTypeReference
<
?
>
>
subTypeArgs
=
expectedSuperTypeArguments
;
if
(
subTypeArgs
.
isEmpty
(
)
)
{
return
true
;
}
if
(
subTypeArgs
.
size
(
)
!=
superTypeArgs
.
size
(
)
)
{
return
false
;
}
for
(
int
i
=
0
;
i
<
subTypeArgs
.
size
(
)
;
i
++
)
{
CtTypeReference
<
?
>
superArg
=
superTypeArgs
.
get
(
i
)
;
CtTypeReference
<
?
>
subArg
=
subTypeArgs
.
get
(
i
)
;
if
(
isSubTypeArg
(
subArg
,
superArg
)
==
false
)
{
return
false
;
}
}
return
true
;
}
