/** 
 * adapts `typeParam` to the  {@link CtTypeReference}of scope of this  {@link ClassTypingContext}In can be  {@link CtTypeParameterReference} again - depending actual type arguments of this {@link ClassTypingContext}.
 * @param typeParam to be resolved {@link CtTypeParameter}
 * @return {@link CtTypeReference} or {@link CtTypeParameterReference} adapted to scope of this {@link ClassTypingContext}or null if `typeParam` cannot be adapted to target `scope`
 */
@Override
protected
CtTypeReference
<
?
>
adaptTypeParameter
(
CtTypeParameter
typeParam
)
{
CtFormalTypeDeclarer
declarer
=
typeParam
.
getTypeParameterDeclarer
(
)
;
if
(
(
declarer
instanceof
CtType
<
?
>
)
==
false
)
{
return
null
;
}
List
<
CtTypeReference
<
?
>
>
actualTypeArguments
=
resolveActualTypeArgumentsOf
(
(
(
CtType
<
?
>
)
declarer
)
.
getReference
(
)
)
;
if
(
actualTypeArguments
==
null
)
{
if
(
enclosingClassTypingContext
!=
null
)
{
return
enclosingClassTypingContext
.
adaptType
(
typeParam
)
;
}
return
null
;
}
return
getValue
(
actualTypeArguments
,
typeParam
,
declarer
)
;
}
