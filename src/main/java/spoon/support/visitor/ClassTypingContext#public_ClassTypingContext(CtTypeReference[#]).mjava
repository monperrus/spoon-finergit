/** 
 * @param typeReference {@link CtTypeReference} whose actual type arguments are used for resolving of input type parameters
 */
public
ClassTypingContext
(
CtTypeReference
<
?
>
typeReference
)
{
scopeType
=
typeReference
.
getTypeDeclaration
(
)
;
lastResolvedSuperclass
=
typeReference
;
CtTypeReference
<
?
>
enclosing
=
getEnclosingType
(
typeReference
)
;
if
(
enclosing
!=
null
)
{
enclosingClassTypingContext
=
createEnclosingHierarchy
(
enclosing
)
;
}
typeToArguments
.
put
(
typeReference
.
getQualifiedName
(
)
,
typeReference
.
getActualTypeArguments
(
)
)
;
}
