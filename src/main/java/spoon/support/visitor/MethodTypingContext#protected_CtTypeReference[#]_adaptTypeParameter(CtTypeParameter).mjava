/** 
 * Adapts `typeParam` to the  {@link CtTypeReference}of scope of this  {@link MethodTypingContext}In can be  {@link CtTypeParameterReference} again - depending actual type arguments of this {@link MethodTypingContext}.
 * @param typeParam to be resolved {@link CtTypeParameter}
 * @return {@link CtTypeReference} or {@link CtTypeParameterReference} adapted to scope of this {@link MethodTypingContext}or null if `typeParam` cannot be adapted to target `scope`
 */
@Override
protected
CtTypeReference
<
?
>
adaptTypeParameter
(
CtTypeParameter
typeParam
)
{
CtFormalTypeDeclarer
typeParamDeclarer
=
typeParam
.
getTypeParameterDeclarer
(
)
;
if
(
typeParamDeclarer
instanceof
CtType
<
?
>
)
{
return
getEnclosingGenericTypeAdapter
(
)
.
adaptType
(
typeParam
)
;
}
if
(
typeParamDeclarer
instanceof
CtMethod
<
?
>
)
{
if
(
(
scopeMethod
instanceof
CtMethod
<
?
>
)
==
false
)
{
return
null
;
}
}
else
if
(
typeParamDeclarer
instanceof
CtConstructor
<
?
>
)
{
if
(
(
scopeMethod
instanceof
CtConstructor
<
?
>
)
==
false
)
{
return
null
;
}
}
else
{
throw
new
SpoonException
(
"Unexpected type parameter declarer"
)
;
}
if
(
hasSameMethodFormalTypeParameters
(
typeParamDeclarer
)
==
false
)
{
return
null
;
}
int
typeParamPosition
=
typeParamDeclarer
.
getFormalCtTypeParameters
(
)
.
indexOf
(
typeParam
)
;
return
actualTypeArguments
.
get
(
typeParamPosition
)
;
}
