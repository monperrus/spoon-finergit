/** 
 * For methods, this implementation of signature contains the return type, which corresponds to what the Java compile and virtual machine call a "descriptor". See chapter "8.4.2 Method Signature" of the Java specification
 */
@Override
public
<
T
>
void
visitCtMethod
(
CtMethod
<
T
>
m
)
{
if
(
!
m
.
getFormalCtTypeParameters
(
)
.
isEmpty
(
)
)
{
write
(
"<"
)
;
for
(
CtTypeParameter
typeParameter
:
m
.
getFormalCtTypeParameters
(
)
)
{
scan
(
typeParameter
.
getReference
(
)
)
;
write
(
","
)
;
}
if
(
m
.
getFormalCtTypeParameters
(
)
.
size
(
)
>
0
)
{
clearLast
(
)
;
}
write
(
"> "
)
;
}
if
(
m
.
getType
(
)
!=
null
)
{
write
(
m
.
getType
(
)
.
getQualifiedName
(
)
)
;
}
write
(
" "
)
;
write
(
m
.
getSimpleName
(
)
)
;
write
(
"("
)
;
for
(
CtParameter
<
?
>
p
:
m
.
getParameters
(
)
)
{
scan
(
p
.
getType
(
)
)
;
write
(
","
)
;
}
if
(
!
m
.
getParameters
(
)
.
isEmpty
(
)
)
{
clearLast
(
)
;
}
write
(
")"
)
;
}
