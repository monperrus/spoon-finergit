public
<
T
,
A
extends
T
>
void
visitCtAssignment
(
final
spoon
.
reflect
.
code
.
CtAssignment
<
T
,
A
>
assignement
)
{
spoon
.
reflect
.
code
.
CtAssignment
<
T
,
A
>
aCtAssignment
=
assignement
.
getFactory
(
)
.
Core
(
)
.
createAssignment
(
)
;
aCtAssignment
.
setAnnotations
(
this
.
cloneHelper
.
clone
(
assignement
.
getAnnotations
(
)
)
)
;
aCtAssignment
.
setType
(
this
.
cloneHelper
.
clone
(
assignement
.
getType
(
)
)
)
;
aCtAssignment
.
setTypeCasts
(
this
.
cloneHelper
.
clone
(
assignement
.
getTypeCasts
(
)
)
)
;
aCtAssignment
.
setAssigned
(
this
.
cloneHelper
.
clone
(
assignement
.
getAssigned
(
)
)
)
;
aCtAssignment
.
setAssignment
(
this
.
cloneHelper
.
clone
(
assignement
.
getAssignment
(
)
)
)
;
aCtAssignment
.
setComments
(
this
.
cloneHelper
.
clone
(
assignement
.
getComments
(
)
)
)
;
this
.
builder
.
copy
(
assignement
,
aCtAssignment
)
;
this
.
cloneHelper
.
tailor
(
assignement
,
aCtAssignment
)
;
this
.
other
=
aCtAssignment
;
}
