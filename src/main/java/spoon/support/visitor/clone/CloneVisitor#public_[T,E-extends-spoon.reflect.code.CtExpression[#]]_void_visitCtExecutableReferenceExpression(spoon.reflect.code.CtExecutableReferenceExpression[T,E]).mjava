@java.lang.Override
public
<
T
,
E
extends
spoon
.
reflect
.
code
.
CtExpression
<
?
>
>
void
visitCtExecutableReferenceExpression
(
final
spoon
.
reflect
.
code
.
CtExecutableReferenceExpression
<
T
,
E
>
expression
)
{
spoon
.
reflect
.
code
.
CtExecutableReferenceExpression
<
T
,
E
>
aCtExecutableReferenceExpression
=
spoon
.
support
.
visitor
.
clone
.
CloneBuilder
.
build
(
this
.
builder
,
expression
,
expression
.
getFactory
(
)
.
Core
(
)
.
createExecutableReferenceExpression
(
)
)
;
aCtExecutableReferenceExpression
.
setComments
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
expression
.
getComments
(
)
)
)
;
aCtExecutableReferenceExpression
.
setAnnotations
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
expression
.
getAnnotations
(
)
)
)
;
aCtExecutableReferenceExpression
.
setType
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
expression
.
getType
(
)
)
)
;
aCtExecutableReferenceExpression
.
setTypeCasts
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
expression
.
getTypeCasts
(
)
)
)
;
aCtExecutableReferenceExpression
.
setExecutable
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
expression
.
getExecutable
(
)
)
)
;
aCtExecutableReferenceExpression
.
setTarget
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
expression
.
getTarget
(
)
)
)
;
this
.
other
=
aCtExecutableReferenceExpression
;
}
