public
<
T
>
void
visitCtBinaryOperator
(
final
spoon
.
reflect
.
code
.
CtBinaryOperator
<
T
>
operator
)
{
spoon
.
reflect
.
code
.
CtBinaryOperator
<
T
>
aCtBinaryOperator
=
spoon
.
support
.
visitor
.
clone
.
CloneBuilder
.
build
(
this
.
builder
,
operator
,
operator
.
getFactory
(
)
.
Core
(
)
.
createBinaryOperator
(
)
)
;
aCtBinaryOperator
.
setAnnotations
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
operator
.
getAnnotations
(
)
)
)
;
aCtBinaryOperator
.
setType
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
operator
.
getType
(
)
)
)
;
aCtBinaryOperator
.
setTypeCasts
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
operator
.
getTypeCasts
(
)
)
)
;
aCtBinaryOperator
.
setLeftHandOperand
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
operator
.
getLeftHandOperand
(
)
)
)
;
aCtBinaryOperator
.
setRightHandOperand
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
operator
.
getRightHandOperand
(
)
)
)
;
aCtBinaryOperator
.
setComments
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
operator
.
getComments
(
)
)
)
;
this
.
other
=
aCtBinaryOperator
;
}
