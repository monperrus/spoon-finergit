@java.lang.Override
public
<
T
>
void
visitCtLambda
(
final
spoon
.
reflect
.
code
.
CtLambda
<
T
>
lambda
)
{
spoon
.
reflect
.
code
.
CtLambda
<
T
>
aCtLambda
=
spoon
.
support
.
visitor
.
clone
.
CloneBuilder
.
build
(
this
.
builder
,
lambda
,
lambda
.
getFactory
(
)
.
Core
(
)
.
createLambda
(
)
)
;
aCtLambda
.
setAnnotations
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
lambda
.
getAnnotations
(
)
)
)
;
aCtLambda
.
setType
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
lambda
.
getType
(
)
)
)
;
aCtLambda
.
setTypeCasts
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
lambda
.
getTypeCasts
(
)
)
)
;
aCtLambda
.
setParameters
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
lambda
.
getParameters
(
)
)
)
;
aCtLambda
.
setBody
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
lambda
.
getBody
(
)
)
)
;
aCtLambda
.
setExpression
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
lambda
.
getExpression
(
)
)
)
;
aCtLambda
.
setComments
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
lambda
.
getComments
(
)
)
)
;
this
.
other
=
aCtLambda
;
}
