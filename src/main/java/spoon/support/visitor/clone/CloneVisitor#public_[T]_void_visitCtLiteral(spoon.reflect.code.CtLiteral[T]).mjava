public
<
T
>
void
visitCtLiteral
(
final
spoon
.
reflect
.
code
.
CtLiteral
<
T
>
literal
)
{
spoon
.
reflect
.
code
.
CtLiteral
<
T
>
aCtLiteral
=
spoon
.
support
.
visitor
.
clone
.
CloneBuilder
.
build
(
this
.
builder
,
literal
,
literal
.
getFactory
(
)
.
Core
(
)
.
createLiteral
(
)
)
;
aCtLiteral
.
setAnnotations
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
literal
.
getAnnotations
(
)
)
)
;
aCtLiteral
.
setType
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
literal
.
getType
(
)
)
)
;
aCtLiteral
.
setTypeCasts
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
literal
.
getTypeCasts
(
)
)
)
;
aCtLiteral
.
setComments
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
literal
.
getComments
(
)
)
)
;
this
.
other
=
aCtLiteral
;
}
