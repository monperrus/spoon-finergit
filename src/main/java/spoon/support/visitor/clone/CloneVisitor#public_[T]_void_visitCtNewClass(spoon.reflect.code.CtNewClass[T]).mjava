public
<
T
>
void
visitCtNewClass
(
final
spoon
.
reflect
.
code
.
CtNewClass
<
T
>
newClass
)
{
spoon
.
reflect
.
code
.
CtNewClass
<
T
>
aCtNewClass
=
spoon
.
support
.
visitor
.
clone
.
CloneBuilder
.
build
(
this
.
builder
,
newClass
,
newClass
.
getFactory
(
)
.
Core
(
)
.
createNewClass
(
)
)
;
aCtNewClass
.
setAnnotations
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
newClass
.
getAnnotations
(
)
)
)
;
aCtNewClass
.
setTypeCasts
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
newClass
.
getTypeCasts
(
)
)
)
;
aCtNewClass
.
setExecutable
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
newClass
.
getExecutable
(
)
)
)
;
aCtNewClass
.
setTarget
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
newClass
.
getTarget
(
)
)
)
;
aCtNewClass
.
setArguments
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
newClass
.
getArguments
(
)
)
)
;
aCtNewClass
.
setAnonymousClass
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
newClass
.
getAnonymousClass
(
)
)
)
;
aCtNewClass
.
setComments
(
spoon
.
support
.
visitor
.
equals
.
CloneHelper
.
clone
(
newClass
.
getComments
(
)
)
)
;
this
.
other
=
aCtNewClass
;
}
