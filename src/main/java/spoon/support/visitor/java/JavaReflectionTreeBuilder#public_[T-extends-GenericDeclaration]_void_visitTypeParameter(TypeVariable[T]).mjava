@Override
public
<
T
extends
GenericDeclaration
>
void
visitTypeParameter
(
TypeVariable
<
T
>
parameter
)
{
GenericDeclaration
genericDeclaration
=
parameter
.
getGenericDeclaration
(
)
;
Iterator
<
RuntimeBuilderContext
>
contextIterator
=
contexts
.
iterator
(
)
;
while
(
contextIterator
.
hasNext
(
)
)
{
CtTypeParameter
typeParameter
=
contextIterator
.
next
(
)
.
getTypeParameter
(
genericDeclaration
,
parameter
.
getName
(
)
)
;
if
(
typeParameter
!=
null
)
{
contexts
.
peek
(
)
.
addFormalType
(
typeParameter
.
clone
(
)
)
;
return
;
}
}
final
CtTypeParameter
typeParameter
=
factory
.
Core
(
)
.
createTypeParameter
(
)
;
typeParameter
.
setSimpleName
(
parameter
.
getName
(
)
)
;
enter
(
new
TypeRuntimeBuilderContext
(
parameter
,
typeParameter
)
{
@SuppressWarnings("incomplete-switch")
@Override
public
void
addTypeReference
(
CtRole
role
,
CtTypeReference
<
?
>
typeReference
)
{
switch
(
role
)
{
case
SUPER_TYPE
:
typeParameter
.
setSuperclass
(
typeReference
)
;
return
;
}
super
.
addTypeReference
(
role
,
typeReference
)
;
}
}
)
;
super
.
visitTypeParameter
(
parameter
)
;
exit
(
)
;
contexts
.
peek
(
)
.
addFormalType
(
typeParameter
)
;
}
