@Override
public
void
visitField
(
Field
field
)
{
final
CtField
<
Object
>
ctField
=
factory
.
Core
(
)
.
createField
(
)
;
ctField
.
setSimpleName
(
field
.
getName
(
)
)
;
setModifier
(
ctField
,
field
.
getModifiers
(
)
,
field
.
getDeclaringClass
(
)
)
;
try
{
Set
<
ModifierKind
>
modifiers
=
RtHelper
.
getModifiers
(
field
.
getModifiers
(
)
)
;
if
(
modifiers
.
contains
(
ModifierKind
.
STATIC
)
&&
modifiers
.
contains
(
ModifierKind
.
PUBLIC
)
&&
(
field
.
getType
(
)
.
isPrimitive
(
)
||
String
.
class
.
isAssignableFrom
(
field
.
getType
(
)
)
)
)
{
CtLiteral
<
Object
>
defaultExpression
=
factory
.
createLiteral
(
field
.
get
(
null
)
)
;
ctField
.
setDefaultExpression
(
defaultExpression
)
;
}
}
catch
(
IllegalAccessException
e
)
{
}
enter
(
new
VariableRuntimeBuilderContext
(
ctField
)
)
;
super
.
visitField
(
field
)
;
exit
(
)
;
contexts
.
peek
(
)
.
addField
(
ctField
)
;
}
