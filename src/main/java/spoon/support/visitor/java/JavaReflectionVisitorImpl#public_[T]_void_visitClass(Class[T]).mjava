@Override
public
<
T
>
void
visitClass
(
Class
<
T
>
clazz
)
{
if
(
clazz
.
getPackage
(
)
!=
null
)
{
clazz
.
getPackage
(
)
;
}
for
(
TypeVariable
<
Class
<
T
>
>
generic
:
clazz
.
getTypeParameters
(
)
)
{
visitTypeParameter
(
generic
)
;
}
if
(
clazz
.
getGenericSuperclass
(
)
!=
null
&&
clazz
.
getGenericSuperclass
(
)
!=
Object
.
class
)
{
visitTypeReference
(
CtRole
.
SUPER_TYPE
,
clazz
.
getGenericSuperclass
(
)
)
;
}
for
(
Type
anInterface
:
clazz
.
getGenericInterfaces
(
)
)
{
visitTypeReference
(
CtRole
.
INTERFACE
,
anInterface
)
;
}
for
(
Annotation
annotation
:
clazz
.
getDeclaredAnnotations
(
)
)
{
visitAnnotation
(
annotation
)
;
}
for
(
Constructor
<
?
>
constructor
:
clazz
.
getDeclaredConstructors
(
)
)
{
if
(
constructor
.
isSynthetic
(
)
)
{
continue
;
}
visitConstructor
(
constructor
)
;
}
for
(
RtMethod
method
:
getDeclaredMethods
(
clazz
)
)
{
if
(
method
.
getMethod
(
)
.
isSynthetic
(
)
)
{
continue
;
}
visitMethod
(
method
)
;
}
for
(
Field
field
:
clazz
.
getDeclaredFields
(
)
)
{
if
(
field
.
isSynthetic
(
)
)
{
continue
;
}
visitField
(
field
)
;
}
for
(
Class
<
?
>
aClass
:
clazz
.
getDeclaredClasses
(
)
)
{
visitType
(
aClass
)
;
}
}
