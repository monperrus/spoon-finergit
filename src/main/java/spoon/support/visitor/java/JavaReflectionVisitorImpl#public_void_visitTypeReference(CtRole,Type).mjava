@Override
public
final
void
visitTypeReference
(
CtRole
role
,
Type
type
)
{
if
(
type
instanceof
TypeVariable
)
{
this
.
visitTypeParameterReference
(
role
,
(
TypeVariable
<
?
>
)
type
)
;
return
;
}
if
(
type
instanceof
ParameterizedType
)
{
this
.
visitTypeReference
(
role
,
(
ParameterizedType
)
type
)
;
return
;
}
if
(
type
instanceof
WildcardType
)
{
this
.
visitTypeReference
(
role
,
(
WildcardType
)
type
)
;
return
;
}
if
(
type
instanceof
GenericArrayType
)
{
visitArrayReference
(
role
,
(
(
GenericArrayType
)
type
)
.
getGenericComponentType
(
)
)
;
return
;
}
if
(
type
instanceof
Class
)
{
Class
<
?
>
clazz
=
(
Class
<
?
>
)
type
;
if
(
clazz
.
isArray
(
)
)
{
visitArrayReference
(
role
,
clazz
.
getComponentType
(
)
)
;
return
;
}
this
.
visitTypeReference
(
role
,
clazz
)
;
return
;
}
throw
new
SpoonException
(
"Unexpected java reflection type: "
+
type
.
getClass
(
)
.
getName
(
)
)
;
}
