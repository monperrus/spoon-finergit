private
<
K
,
V
extends
spoon
.
reflect
.
declaration
.
CtElement
>
void
replaceInMapIfExist
(
java
.
util
.
Map
<
K
,
V
>
mapProtected
,
ReplaceMapListener
listener
)
{
java
.
util
.
Map
<
K
,
V
>
map
=
new
java
.
util
.
HashMap
<
>
(
mapProtected
)
;
V
shouldBeDeleted
=
null
;
K
key
=
null
;
for
(
java
.
util
.
Map
.
Entry
<
K
,
V
>
entry
:
map
.
entrySet
(
)
)
{
if
(
(
entry
.
getValue
(
)
)
==
(
original
)
)
{
shouldBeDeleted
=
entry
.
getValue
(
)
;
key
=
entry
.
getKey
(
)
;
break
;
}
}
if
(
shouldBeDeleted
!=
null
)
{
if
(
(
replace
.
length
)
>
0
)
{
if
(
(
replace
.
length
)
>
1
)
{
throw
new
spoon
.
support
.
visitor
.
replace
.
InvalidReplaceException
(
(
"Cannot replace single value by multiple values in "
+
(
listener
.
getClass
(
)
.
getSimpleName
(
)
)
)
)
;
}
V
val
=
(
(
V
)
(
replace
[
0
]
)
)
;
if
(
val
!=
null
)
{
map
.
put
(
key
,
val
)
;
val
.
setParent
(
shouldBeDeleted
.
getParent
(
)
)
;
}
else
{
map
.
remove
(
key
)
;
}
}
else
{
map
.
remove
(
key
)
;
}
listener
.
set
(
map
)
;
}
}
