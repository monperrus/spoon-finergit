private
<
T
extends
spoon
.
reflect
.
declaration
.
CtElement
>
void
replaceInListIfExist
(
java
.
util
.
List
<
T
>
listProtected
,
ReplaceListListener
listener
)
{
java
.
util
.
List
<
T
>
list
=
new
java
.
util
.
ArrayList
<
>
(
listProtected
)
;
T
shouldBeDeleted
=
null
;
int
index
=
0
;
for
(
int
i
=
0
;
i
<
(
list
.
size
(
)
)
;
i
++
)
{
if
(
(
list
.
get
(
i
)
)
==
(
original
)
)
{
index
=
i
;
shouldBeDeleted
=
list
.
get
(
i
)
;
break
;
}
}
if
(
shouldBeDeleted
!=
null
)
{
list
.
remove
(
index
)
;
if
(
(
replace
.
length
)
>
0
)
{
for
(
int
i
=
0
;
i
<
(
replace
.
length
)
;
i
++
)
{
T
ele
=
(
(
T
)
(
replace
[
i
]
)
)
;
if
(
ele
!=
null
)
{
list
.
add
(
index
,
ele
)
;
ele
.
setParent
(
shouldBeDeleted
.
getParent
(
)
)
;
index
=
index
+
1
;
}
}
}
listener
.
set
(
list
)
;
}
}
