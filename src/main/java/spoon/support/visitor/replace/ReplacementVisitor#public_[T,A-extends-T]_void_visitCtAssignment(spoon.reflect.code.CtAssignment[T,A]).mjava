@java.lang.Override
public
<
T
,
A
extends
T
>
void
visitCtAssignment
(
final
spoon
.
reflect
.
code
.
CtAssignment
<
T
,
A
>
assignement
)
{
replaceInListIfExist
(
assignement
.
getAnnotations
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementAnnotationsReplaceListener
(
assignement
)
)
;
replaceElementIfExist
(
assignement
.
getType
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTypedElementTypeReplaceListener
(
assignement
)
)
;
replaceInListIfExist
(
assignement
.
getTypeCasts
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtExpressionTypeCastsReplaceListener
(
assignement
)
)
;
replaceElementIfExist
(
assignement
.
getAssigned
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtAssignmentAssignedReplaceListener
(
assignement
)
)
;
replaceElementIfExist
(
assignement
.
getAssignment
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtRHSReceiverAssignmentReplaceListener
(
assignement
)
)
;
replaceInListIfExist
(
assignement
.
getComments
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementCommentsReplaceListener
(
assignement
)
)
;
}
