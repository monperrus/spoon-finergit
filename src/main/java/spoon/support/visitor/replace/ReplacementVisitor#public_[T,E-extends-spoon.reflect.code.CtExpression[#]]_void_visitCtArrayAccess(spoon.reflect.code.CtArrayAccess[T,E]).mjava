public
<
T
,
E
extends
spoon
.
reflect
.
code
.
CtExpression
<
?
>
>
void
visitCtArrayAccess
(
final
spoon
.
reflect
.
code
.
CtArrayAccess
<
T
,
E
>
arrayAccess
)
{
replaceInListIfExist
(
arrayAccess
.
getAnnotations
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementAnnotationsReplaceListener
(
arrayAccess
)
)
;
replaceElementIfExist
(
arrayAccess
.
getType
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTypedElementTypeReplaceListener
(
arrayAccess
)
)
;
replaceInListIfExist
(
arrayAccess
.
getTypeCasts
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtExpressionTypeCastsReplaceListener
(
arrayAccess
)
)
;
replaceElementIfExist
(
arrayAccess
.
getTarget
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTargetedExpressionTargetReplaceListener
(
arrayAccess
)
)
;
replaceElementIfExist
(
arrayAccess
.
getIndexExpression
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtArrayAccessIndexExpressionReplaceListener
(
arrayAccess
)
)
;
replaceInListIfExist
(
arrayAccess
.
getComments
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementCommentsReplaceListener
(
arrayAccess
)
)
;
}
