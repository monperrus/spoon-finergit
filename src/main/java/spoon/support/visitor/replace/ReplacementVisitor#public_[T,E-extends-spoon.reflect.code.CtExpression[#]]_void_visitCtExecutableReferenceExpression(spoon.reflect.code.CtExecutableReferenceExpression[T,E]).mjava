@java.lang.Override
public
<
T
,
E
extends
spoon
.
reflect
.
code
.
CtExpression
<
?
>
>
void
visitCtExecutableReferenceExpression
(
final
spoon
.
reflect
.
code
.
CtExecutableReferenceExpression
<
T
,
E
>
expression
)
{
replaceInListIfExist
(
expression
.
getComments
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementCommentsReplaceListener
(
expression
)
)
;
replaceInListIfExist
(
expression
.
getAnnotations
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementAnnotationsReplaceListener
(
expression
)
)
;
replaceElementIfExist
(
expression
.
getType
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTypedElementTypeReplaceListener
(
expression
)
)
;
replaceInListIfExist
(
expression
.
getTypeCasts
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtExpressionTypeCastsReplaceListener
(
expression
)
)
;
replaceElementIfExist
(
expression
.
getExecutable
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtExecutableReferenceExpressionExecutableReplaceListener
(
expression
)
)
;
replaceElementIfExist
(
expression
.
getTarget
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTargetedExpressionTargetReplaceListener
(
expression
)
)
;
}
