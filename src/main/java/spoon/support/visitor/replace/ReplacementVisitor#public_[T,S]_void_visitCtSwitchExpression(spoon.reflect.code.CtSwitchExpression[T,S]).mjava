@java.lang.Override
public
<
T
,
S
>
void
visitCtSwitchExpression
(
final
spoon
.
reflect
.
code
.
CtSwitchExpression
<
T
,
S
>
switchExpression
)
{
replaceInListIfExist
(
switchExpression
.
getAnnotations
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementAnnotationsReplaceListener
(
switchExpression
)
)
;
replaceElementIfExist
(
switchExpression
.
getSelector
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtAbstractSwitchSelectorReplaceListener
(
switchExpression
)
)
;
replaceInListIfExist
(
switchExpression
.
getCases
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtAbstractSwitchCasesReplaceListener
(
switchExpression
)
)
;
replaceInListIfExist
(
switchExpression
.
getComments
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementCommentsReplaceListener
(
switchExpression
)
)
;
replaceElementIfExist
(
switchExpression
.
getType
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTypedElementTypeReplaceListener
(
switchExpression
)
)
;
replaceInListIfExist
(
switchExpression
.
getTypeCasts
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtExpressionTypeCastsReplaceListener
(
switchExpression
)
)
;
}
