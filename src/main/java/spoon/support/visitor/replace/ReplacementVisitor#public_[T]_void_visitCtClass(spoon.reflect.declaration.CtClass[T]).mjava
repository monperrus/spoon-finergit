public
<
T
>
void
visitCtClass
(
final
spoon
.
reflect
.
declaration
.
CtClass
<
T
>
ctClass
)
{
replaceInListIfExist
(
ctClass
.
getAnnotations
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementAnnotationsReplaceListener
(
ctClass
)
)
;
replaceElementIfExist
(
ctClass
.
getSuperclass
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTypeInformationSuperclassReplaceListener
(
ctClass
)
)
;
replaceInSetIfExist
(
ctClass
.
getSuperInterfaces
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTypeInformationSuperInterfacesReplaceListener
(
ctClass
)
)
;
replaceInListIfExist
(
ctClass
.
getFormalTypeParameters
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtFormalTypeDeclarerFormalTypeParametersReplaceListener
(
ctClass
)
)
;
replaceInListIfExist
(
ctClass
.
getAnonymousExecutables
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtClassAnonymousExecutablesReplaceListener
(
ctClass
)
)
;
replaceInSetIfExist
(
ctClass
.
getNestedTypes
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTypeNestedTypesReplaceListener
(
ctClass
)
)
;
replaceInListIfExist
(
ctClass
.
getFields
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtClassFieldsReplaceListener
(
ctClass
)
)
;
replaceInSetIfExist
(
ctClass
.
getConstructors
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtClassConstructorsReplaceListener
(
ctClass
)
)
;
replaceInSetIfExist
(
ctClass
.
getMethods
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTypeMethodsReplaceListener
(
ctClass
)
)
;
replaceInListIfExist
(
ctClass
.
getComments
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementCommentsReplaceListener
(
ctClass
)
)
;
}
