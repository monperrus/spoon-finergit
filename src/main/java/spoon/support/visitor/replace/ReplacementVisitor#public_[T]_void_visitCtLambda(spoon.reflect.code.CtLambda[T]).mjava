@java.lang.Override
public
<
T
>
void
visitCtLambda
(
final
spoon
.
reflect
.
code
.
CtLambda
<
T
>
lambda
)
{
replaceInListIfExist
(
lambda
.
getAnnotations
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementAnnotationsReplaceListener
(
lambda
)
)
;
replaceElementIfExist
(
lambda
.
getType
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTypedElementTypeReplaceListener
(
lambda
)
)
;
replaceInListIfExist
(
lambda
.
getTypeCasts
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtExpressionTypeCastsReplaceListener
(
lambda
)
)
;
replaceInListIfExist
(
lambda
.
getParameters
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtExecutableParametersReplaceListener
(
lambda
)
)
;
replaceElementIfExist
(
lambda
.
getBody
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtExecutableBodyReplaceListener
(
lambda
)
)
;
replaceElementIfExist
(
lambda
.
getExpression
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtLambdaExpressionReplaceListener
(
lambda
)
)
;
replaceInListIfExist
(
lambda
.
getComments
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementCommentsReplaceListener
(
lambda
)
)
;
}
