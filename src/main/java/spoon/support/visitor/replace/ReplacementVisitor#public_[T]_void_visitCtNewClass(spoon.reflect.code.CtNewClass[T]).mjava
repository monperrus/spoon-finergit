@java.lang.Override
public
<
T
>
void
visitCtNewClass
(
final
spoon
.
reflect
.
code
.
CtNewClass
<
T
>
newClass
)
{
replaceInListIfExist
(
newClass
.
getAnnotations
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementAnnotationsReplaceListener
(
newClass
)
)
;
replaceInListIfExist
(
newClass
.
getTypeCasts
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtExpressionTypeCastsReplaceListener
(
newClass
)
)
;
replaceElementIfExist
(
newClass
.
getExecutable
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtAbstractInvocationExecutableReplaceListener
(
newClass
)
)
;
replaceElementIfExist
(
newClass
.
getTarget
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtTargetedExpressionTargetReplaceListener
(
newClass
)
)
;
replaceInListIfExist
(
newClass
.
getArguments
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtAbstractInvocationArgumentsReplaceListener
(
newClass
)
)
;
replaceElementIfExist
(
newClass
.
getAnonymousClass
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtNewClassAnonymousClassReplaceListener
(
newClass
)
)
;
replaceInListIfExist
(
newClass
.
getComments
(
)
,
new
spoon
.
support
.
visitor
.
replace
.
ReplacementVisitor
.
CtElementCommentsReplaceListener
(
newClass
)
)
;
}
