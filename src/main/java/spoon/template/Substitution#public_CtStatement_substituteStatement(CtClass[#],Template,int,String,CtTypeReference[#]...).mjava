/** 
 * Gets a statement from a template executable with all the template parameters substituted.
 * @param targetClass the target class
 * @param template the template that holds the executable
 * @param statementIndex the statement index in the executable's body
 * @param executableName the source executable template
 * @param parameterTypes the parameter types of the source executable
 * @return the body expression of the source executable template with allthe template parameters substituted
 */
public
static
CtStatement
substituteStatement
(
CtClass
<
?
>
targetClass
,
Template
template
,
int
statementIndex
,
String
executableName
,
CtTypeReference
<
?
>
...
parameterTypes
)
{
CtClass
<
?
>
sourceClass
=
targetClass
.
getFactory
(
)
.
Template
(
)
.
Class
(
)
.
get
(
template
.
getClass
(
)
)
;
CtExecutable
<
?
>
sourceExecutable
=
executableName
.
equals
(
template
.
getClass
(
)
.
getSimpleName
(
)
)
?
sourceClass
.
getConstructor
(
parameterTypes
)
:
sourceClass
.
getMethod
(
executableName
,
parameterTypes
)
;
return
substitute
(
targetClass
,
template
,
sourceExecutable
.
getBody
(
)
.
getStatement
(
statementIndex
)
)
;
}
