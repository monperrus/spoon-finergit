/** 
 * Substitutes all the template parameters in a random piece of code.
 * @param targetType the target type
 * @param template the template instance
 * @param code the code
 * @return the code where all the template parameters has been substitutedby their values
 */
public
static
<
E
extends
CtElement
>
E
substitute
(
CtType
<
?
>
targetType
,
Template
<
?
>
template
,
E
code
)
{
if
(
code
==
null
)
{
return
null
;
}
if
(
targetType
==
null
)
{
throw
new
RuntimeException
(
"target is null in substitution"
)
;
}
E
result
=
(
E
)
code
.
clone
(
)
;
List
<
E
>
results
=
new
SubstitutionVisitor
(
targetType
.
getFactory
(
)
,
targetType
,
template
)
.
substitute
(
result
)
;
if
(
results
.
size
(
)
>
1
)
{
throw
new
SpoonException
(
"StatementTemplate cannot return more then one statement"
)
;
}
return
results
.
isEmpty
(
)
?
null
:
results
.
get
(
0
)
;
}
