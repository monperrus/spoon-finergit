/** 
 * Substitutes all the template parameters in a random piece of code.
 * @param targetType the target type
 * @param template the template instance
 * @param code the code
 * @return the code where all the template parameters has been substitutedby their values
 */
@SuppressWarnings("unchecked")
public
static
<
E
extends
CtElement
>
E
substitute
(
CtType
<
?
>
targetType
,
Template
<
?
>
template
,
E
code
)
{
if
(
code
==
null
)
{
return
null
;
}
if
(
targetType
==
null
)
{
throw
new
RuntimeException
(
"target is null in substitution"
)
;
}
TemplateBuilder
tb
=
TemplateBuilder
.
createPattern
(
code
,
template
)
;
if
(
template
instanceof
AbstractTemplate
)
{
tb
.
setAddGeneratedBy
(
(
(
AbstractTemplate
)
template
)
.
isAddGeneratedBy
(
)
)
;
}
return
(
E
)
tb
.
substituteSingle
(
targetType
,
CtElement
.
class
)
;
}
