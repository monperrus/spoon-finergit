/** 
 * Substitute the parameters localized with {@link SimpleTemplate#S(String,Class)} invocations. All the invocationsof the form <code>S("parameter-name")</code> will be replaced using the given parameters.
 * @param target the target element
 * @param parameters a name-element parameter map
 * @return a copy of the target element, with all the found parameterssubstituted
 * @throws Exception if an error occurs
 */
public
static
<
E
extends
CtElement
>
E
substitute
(
E
target
,
Map
<
String
,
CtElement
>
parameters
)
throws
Exception
{
target
=
target
.
getFactory
(
)
.
Core
(
)
.
clone
(
target
)
;
List
<
CtInvocation
<
?
>
>
sInvocations
=
Query
.
getElements
(
target
,
new
Filter
<
CtInvocation
<
?
>
>
(
)
{
@Override
public
Class
<
?
>
getType
(
)
{
return
CtInvocation
.
class
;
}
@Override
public
boolean
matches
(
CtInvocation
<
?
>
element
)
{
return
element
.
getExecutable
(
)
.
getDeclaringType
(
)
.
getActualClass
(
)
==
SimpleTemplate
.
class
&&
(
element
.
getExecutable
(
)
.
getSimpleName
(
)
.
equals
(
"S"
)
||
element
.
getExecutable
(
)
.
getSimpleName
(
)
.
equals
(
"S_throws"
)
)
;
}
}
)
;
for
(
CtInvocation
<
?
>
i
:
sInvocations
)
{
for
(
Entry
<
String
,
CtElement
>
parameter
:
parameters
.
entrySet
(
)
)
{
if
(
i
.
getArguments
(
)
.
get
(
0
)
.
toString
(
)
.
equals
(
"\""
+
parameter
.
getKey
(
)
+
"\""
)
)
{
i
.
replace
(
parameter
.
getValue
(
)
)
;
}
}
}
return
target
;
}
