/** 
 * Inserts all the methods, fields, constructors, initialization blocks (if target is a class), inner types, and super interfaces (except {@link Template}) from a given template by substituting all the template parameters by their values. Members annotated with {@link spoon.template.Local} or {@link Parameter} are not inserted.
 * @param targetType the target type
 * @param template the source template
 */
public
static
<
T
extends
Template
<
?
>
>
void
insertAll
(
CtType
<
?
>
targetType
,
T
template
)
{
CtClass
<
T
>
templateClass
=
getTemplateCtClass
(
targetType
,
template
)
;
insertAllSuperInterfaces
(
targetType
,
template
,
templateClass
)
;
insertAllMethods
(
targetType
,
template
,
templateClass
)
;
insertAllConstructors
(
targetType
,
template
,
templateClass
)
;
for
(
CtTypeMember
typeMember
:
templateClass
.
getTypeMembers
(
)
)
{
if
(
typeMember
instanceof
CtField
)
{
insertGeneratedField
(
targetType
,
template
,
(
CtField
<
?
>
)
typeMember
)
;
}
else
if
(
typeMember
instanceof
CtType
)
{
insertGeneratedNestedType
(
targetType
,
template
,
(
CtType
)
typeMember
,
templateClass
)
;
}
}
}
