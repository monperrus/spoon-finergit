/** 
 * Inserts all the methods, fields, constructors, initialization blocks (if target is a class), inner types, and super interfaces (except {@link Template}) from a given template by substituting all the template parameters by their values. Members annotated with {@link spoon.template.Local} or {@link Parameter} are not inserted.
 * @param targetType the target type
 * @param template the source template
 */
@SuppressWarnings("unchecked")
public
static
void
insertAll
(
CtType
<
?
>
targetType
,
Template
template
)
{
CtClass
<
?
Template
>
sourceClass
=
targetType
.
getFactory
(
)
.
Template
(
)
.
get
(
template
.
getClass
(
)
)
;
for
(
CtTypeReference
<
?
>
t
:
sourceClass
.
getSuperInterfaces
(
)
)
{
if
(
!
t
.
equals
(
targetType
.
getFactory
(
)
.
Type
(
)
.
createReference
(
Template
.
class
)
)
)
{
CtTypeReference
<
?
>
t1
=
t
;
if
(
Parameters
.
getNames
(
sourceClass
)
.
contains
(
t
.
getSimpleName
(
)
)
)
{
Object
o
=
Parameters
.
getValue
(
template
,
t
.
getSimpleName
(
)
,
null
)
;
if
(
o
instanceof
CtTypeReference
)
{
t1
=
(
CtTypeReference
)
o
;
}
else
if
(
o
instanceof
Class
)
{
t1
=
targetType
.
getFactory
(
)
.
Type
(
)
.
createReference
(
(
Class
)
o
)
;
}
else
if
(
o
instanceof
String
)
{
t1
=
targetType
.
getFactory
(
)
.
Type
(
)
.
createReference
(
(
String
)
o
)
;
}
}
if
(
!
t1
.
equals
(
targetType
.
getReference
(
)
)
)
{
Class
c
=
null
;
try
{
c
=
t1
.
getActualClass
(
)
;
}
catch
(
Exception
e
)
{
}
if
(
c
!=
null
&&
c
.
isInterface
(
)
)
{
targetType
.
getSuperInterfaces
(
)
.
add
(
t1
)
;
}
if
(
c
==
null
)
{
targetType
.
getSuperInterfaces
(
)
.
add
(
t1
)
;
}
}
}
}
for
(
CtMethod
<
?
>
m
:
sourceClass
.
getMethods
(
)
)
{
if
(
m
.
getAnnotation
(
Local
.
class
)
!=
null
)
continue
;
if
(
m
.
getAnnotation
(
Parameter
.
class
)
!=
null
)
continue
;
insertMethod
(
targetType
,
template
,
m
)
;
}
if
(
targetType
instanceof
CtClass
)
{
for
(
CtConstructor
c
:
sourceClass
.
getConstructors
(
)
)
{
if
(
c
.
isImplicit
(
)
)
continue
;
if
(
c
.
getAnnotation
(
Local
.
class
)
!=
null
)
continue
;
insertConstructor
(
(
CtClass
<
?
>
)
targetType
,
template
,
c
)
;
}
}
if
(
targetType
instanceof
CtClass
)
{
for
(
CtAnonymousExecutable
e
:
sourceClass
.
getAnonymousExecutables
(
)
)
{
(
(
CtClass
<
?
>
)
targetType
)
.
getAnonymousExecutables
(
)
.
add
(
substitute
(
targetType
,
template
,
e
)
)
;
}
}
for
(
CtField
<
?
>
f
:
sourceClass
.
getFields
(
)
)
{
if
(
f
.
getAnnotation
(
Local
.
class
)
!=
null
)
continue
;
if
(
Parameters
.
isParameterSource
(
f
.
getReference
(
)
)
)
continue
;
insertField
(
targetType
,
template
,
f
)
;
}
for
(
CtSimpleType
<
?
>
t
:
sourceClass
.
getNestedTypes
(
)
)
{
if
(
t
.
getAnnotation
(
Local
.
class
)
!=
null
)
continue
;
CtSimpleType
<
?
>
result
=
substitute
(
sourceClass
,
template
,
t
)
;
targetType
.
getNestedTypes
(
)
.
add
(
result
)
;
result
.
setParent
(
targetType
)
;
}
}
