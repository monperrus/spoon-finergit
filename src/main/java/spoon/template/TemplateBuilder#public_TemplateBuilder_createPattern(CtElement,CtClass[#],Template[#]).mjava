/** 
 * Creates a  {@link TemplateBuilder}, which builds  {@link Pattern} from {@link Template}
 * @param templateRoot the root element of {@link Template} model
 * @param templateType {@link CtClass} model of `template`
 * @param template a instance of the {@link Template}. It is needed here, because parameter value types influences which AST nodes will be the target of substitution
 * @return
 */
public
static
TemplateBuilder
createPattern
(
CtElement
templateRoot
,
CtClass
<
?
>
templateType
,
Template
<
?
>
template
)
{
Factory
f
=
templateRoot
.
getFactory
(
)
;
if
(
template
!=
null
&&
templateType
.
getQualifiedName
(
)
.
equals
(
template
.
getClass
(
)
.
getName
(
)
)
==
false
)
{
throw
new
SpoonException
(
"Unexpected template instance "
+
template
.
getClass
(
)
.
getName
(
)
+
". Expects "
+
templateType
.
getQualifiedName
(
)
)
;
}
PatternBuilder
pb
;
@SuppressWarnings("rawtypes")
CtTypeReference
<
TemplateParameter
>
templateParamRef
=
f
.
Type
(
)
.
createReference
(
TemplateParameter
.
class
)
;
if
(
templateType
==
templateRoot
)
{
PatternBuilderHelper
tv
=
new
PatternBuilderHelper
(
templateType
)
;
{
tv
.
keepTypeMembers
(
typeMember
->
{
if
(
typeMember
.
getAnnotation
(
Parameter
.
class
)
!=
null
)
{
return
false
;
}
if
(
typeMember
.
getAnnotation
(
Local
.
class
)
!=
null
)
{
return
false
;
}
if
(
typeMember
instanceof
CtField
<
?
>
&&
(
(
CtField
<
?
>
)
typeMember
)
.
getType
(
)
.
isSubtypeOf
(
templateParamRef
)
)
{
return
false
;
}
return
true
;
}
)
;
tv
.
removeSuperClass
(
)
;
}
;
pb
=
new
PatternBuilder
(
tv
.
getPatternElements
(
)
)
;
}
else
{
pb
=
new
PatternBuilder
(
Collections
.
singletonList
(
templateRoot
)
)
;
}
Map
<
String
,
Object
>
templateParameters
=
template
==
null
?
null
:
Parameters
.
getTemplateParametersAsMap
(
f
,
null
,
template
)
;
pb
.
setAutoSimplifySubstitutions
(
true
)
;
pb
.
configurePatternParameters
(
pc
->
{
pc
.
byTemplateParameter
(
templateParameters
)
;
pc
.
byParameterValues
(
templateParameters
)
;
}
)
;
return
new
TemplateBuilder
(
templateType
,
pb
,
template
)
;
}
