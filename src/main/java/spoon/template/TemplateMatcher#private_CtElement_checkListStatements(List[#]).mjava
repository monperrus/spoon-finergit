/** 
 * Detects whether `teList` contains a multiElement template parameter
 * @param teList a list of template nodes
 * @return a first found multiElement template parameter
 */
private
CtElement
checkListStatements
(
List
<
?
>
teList
)
{
for
(
Object
tem
:
teList
)
{
if
(
variables
.
contains
(
tem
)
&&
(
tem
instanceof
CtInvocation
)
)
{
CtInvocation
<
?
>
listCand
=
(
CtInvocation
<
?
>
)
tem
;
boolean
ok
=
listCand
.
getFactory
(
)
.
Type
(
)
.
createReference
(
TemplateParameter
.
class
)
.
isSubtypeOf
(
listCand
.
getTarget
(
)
.
getType
(
)
)
;
return
ok
?
listCand
:
null
;
}
if
(
tem
instanceof
CtVariable
)
{
CtVariable
<
?
>
var
=
(
CtVariable
<
?
>
)
tem
;
String
name
=
var
.
getSimpleName
(
)
;
for
(
CtFieldReference
<
?
>
f
:
varArgs
)
{
if
(
f
.
getSimpleName
(
)
.
equals
(
name
)
)
{
return
f
.
getDeclaration
(
)
;
}
}
}
}
return
null
;
}
