/** 
 * Looks for fields of type  {@link CtStatementList} in the template and returns these fields,
 * @param root CtClass model of {@link Template}
 * @param variables
 * @return returns for fields of type {@link CtStatementList} in the template
 */
private
List
<
CtFieldReference
<
?
>
>
getVarargs
(
CtClass
<
?
Template
<
?
>
>
root
,
List
<
CtInvocation
<
?
>
>
variables
)
{
List
<
CtFieldReference
<
?
>
>
fields
=
new
ArrayList
<
>
(
)
;
for
(
CtFieldReference
<
?
>
field
:
root
.
getAllFields
(
)
)
{
if
(
field
.
getType
(
)
.
getActualClass
(
)
==
CtStatementList
.
class
)
{
boolean
alreadyAdded
=
false
;
for
(
CtInvocation
<
?
>
invocation
:
variables
)
{
alreadyAdded
=
(
(
CtFieldAccess
<
?
>
)
invocation
.
getTarget
(
)
)
.
getVariable
(
)
.
getDeclaration
(
)
.
equals
(
field
)
;
}
if
(
!
alreadyAdded
)
{
fields
.
add
(
field
)
;
}
}
}
return
fields
;
}
