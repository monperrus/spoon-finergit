/** 
 * returns an appropriate ParameterMatcher defined in a template parameter, or else a default one if a template parameter (field annotated with @Parameter) whose name (field name) is a substring of the template name, it also works
 */
private
ParameterMatcher
findParameterMatcher
(
CtNamedElement
templateDeclaration
)
throws
InstantiationException
,
IllegalAccessException
{
if
(
templateDeclaration
==
null
)
{
return
new
DefaultParameterMatcher
(
)
;
}
String
name
=
templateDeclaration
.
getSimpleName
(
)
;
CtClass
<
?
>
clazz
=
null
;
try
{
clazz
=
templateDeclaration
.
getParent
(
CtClass
.
class
)
;
}
catch
(
ParentNotInitializedException
e
)
{
Launcher
.
LOGGER
.
error
(
e
.
getMessage
(
)
,
e
)
;
}
if
(
clazz
==
null
)
{
return
new
DefaultParameterMatcher
(
)
;
}
Collection
<
CtFieldReference
<
?
>
>
fields
=
clazz
.
getAllFields
(
)
;
CtFieldReference
<
?
>
param
=
null
;
for
(
CtFieldReference
<
?
>
fieldRef
:
fields
)
{
Parameter
p
=
fieldRef
.
getDeclaration
(
)
.
getAnnotation
(
Parameter
.
class
)
;
if
(
p
==
null
)
{
continue
;
}
String
proxy
=
p
.
value
(
)
;
if
(
!
""
.
equals
(
proxy
)
)
{
if
(
name
.
contains
(
proxy
)
)
{
param
=
fieldRef
;
break
;
}
}
if
(
name
.
contains
(
fieldRef
.
getSimpleName
(
)
)
)
{
param
=
fieldRef
;
break
;
}
}
return
getParameterInstance
(
param
)
;
}
