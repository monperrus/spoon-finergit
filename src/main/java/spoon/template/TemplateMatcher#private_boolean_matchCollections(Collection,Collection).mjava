@SuppressWarnings("unchecked")
private
boolean
matchCollections
(
Collection
target
,
Collection
template
)
{
List
teList
=
new
ArrayList
(
template
)
;
List
taList
=
new
ArrayList
(
target
)
;
int
numOfNonParamsinTeList
=
teList
.
size
(
)
;
CtElement
inMulti
=
nextListStatement
(
teList
,
null
)
;
List
<
CtElement
>
multi
=
new
ArrayList
(
)
;
if
(
null
==
inMulti
)
{
if
(
teList
.
size
(
)
!=
taList
.
size
(
)
)
return
false
;
for
(
int
te
=
0
,
ta
=
0
;
te
<
teList
.
size
(
)
&&
ta
<
taList
.
size
(
)
;
te
++
,
ta
++
)
{
if
(
!
helperMatch
(
taList
.
get
(
ta
)
,
teList
.
get
(
te
)
)
)
{
return
false
;
}
}
return
true
;
}
else
{
for
(
int
te
=
0
,
ta
=
0
;
te
<
teList
.
size
(
)
&&
ta
<
taList
.
size
(
)
;
te
++
,
ta
++
)
{
if
(
isCurrentTemplate
(
teList
.
get
(
te
)
,
inMulti
)
)
{
numOfNonParamsinTeList
--
;
if
(
te
+
1
>=
teList
.
size
(
)
)
{
multi
.
addAll
(
taList
.
subList
(
te
,
taList
.
size
(
)
)
)
;
CtStatementList
tpl
=
templateType
.
getFactory
(
)
.
Core
(
)
.
createStatementList
(
)
;
tpl
.
setStatements
(
multi
)
;
if
(
!
invokeCallBack
(
tpl
,
inMulti
)
)
{
return
false
;
}
boolean
ret
=
addMatch
(
inMulti
,
multi
)
;
return
ret
;
}
te
++
;
while
(
te
<
teList
.
size
(
)
&&
ta
<
taList
.
size
(
)
&&
!
helperMatch
(
taList
.
get
(
ta
)
,
teList
.
get
(
te
)
)
)
{
multi
.
add
(
(
CtElement
)
taList
.
get
(
ta
)
)
;
ta
++
;
}
CtStatementList
tpl
=
templateType
.
getFactory
(
)
.
Core
(
)
.
createStatementList
(
)
;
tpl
.
setStatements
(
multi
)
;
if
(
!
invokeCallBack
(
tpl
,
inMulti
)
)
{
return
false
;
}
addMatch
(
inMulti
,
tpl
)
;
inMulti
=
nextListStatement
(
teList
,
inMulti
)
;
multi
=
new
ArrayList
(
)
;
numOfNonParamsinTeList
--
;
}
else
{
if
(
!
helperMatch
(
taList
.
get
(
ta
)
,
teList
.
get
(
te
)
)
)
{
return
false
;
}
if
(
!
(
ta
+
1
<
taList
.
size
(
)
)
&&
inMulti
!=
null
)
{
CtStatementList
tpl
=
templateType
.
getFactory
(
)
.
Core
(
)
.
createStatementList
(
)
;
tpl
.
setStatements
(
multi
)
;
if
(
!
invokeCallBack
(
tpl
,
inMulti
)
)
{
return
false
;
}
addMatch
(
inMulti
,
tpl
)
;
inMulti
=
nextListStatement
(
teList
,
inMulti
)
;
multi
=
new
ArrayList
(
)
;
numOfNonParamsinTeList
--
;
}
}
}
return
true
;
}
}
