@Test
public
void
test
(
)
{
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"src/test/java/spoon/CompilationUnitPrintTest.java"
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
buildModel
(
)
;
final
Factory
factory
=
launcher
.
getFactory
(
)
;
final
CtClass
<
?
>
compilationUnitPrintTest
=
factory
.
Class
(
)
.
get
(
"spoon.CompilationUnitPrintTest"
)
;
final
CtClass
<
?
>
clone
=
compilationUnitPrintTest
.
clone
(
)
;
compilationUnitPrintTest
.
getPackage
(
)
.
addType
(
clone
)
;
assertEquals
(
1
,
clone
.
getMethods
(
)
.
size
(
)
)
;
assertEquals
(
1
,
compilationUnitPrintTest
.
getMethods
(
)
.
size
(
)
)
;
CtMethod
<
?
>
cloneMethod
=
(
(
CtMethod
<
?
>
)
clone
.
getMethodsByName
(
"test"
)
.
get
(
0
)
)
.
clone
(
)
;
cloneMethod
.
setSimpleName
(
"cloneTest"
)
;
clone
.
addMethod
(
cloneMethod
)
;
assertEquals
(
2
,
clone
.
getMethods
(
)
.
size
(
)
)
;
assertEquals
(
1
,
compilationUnitPrintTest
.
getMethods
(
)
.
size
(
)
)
;
Environment
env
=
factory
.
getEnvironment
(
)
;
env
.
setAutoImports
(
true
)
;
env
.
setNoClasspath
(
true
)
;
env
.
setCommentEnabled
(
true
)
;
JavaOutputProcessor
processor
=
new
JavaOutputProcessor
(
new
DefaultJavaPrettyPrinter
(
env
)
)
;
processor
.
setFactory
(
factory
)
;
processor
.
getEnvironment
(
)
.
setSourceOutputDirectory
(
new
File
(
"target/"
)
)
;
processor
.
createJavaFile
(
clone
)
;
assertEquals
(
2
,
clone
.
getMethods
(
)
.
size
(
)
)
;
assertEquals
(
1
,
compilationUnitPrintTest
.
getMethods
(
)
.
size
(
)
)
;
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"target/spoon/CompilationUnitPrintTest.java"
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
buildModel
(
)
;
assertEquals
(
clone
.
getMethods
(
)
.
size
(
)
,
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
"spoon.CompilationUnitPrintTest"
)
.
getMethods
(
)
.
size
(
)
)
;
}
