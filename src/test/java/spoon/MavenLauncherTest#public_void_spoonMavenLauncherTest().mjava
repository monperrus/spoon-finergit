@Test
public
void
spoonMavenLauncherTest
(
)
{
MavenLauncher
launcher
=
new
MavenLauncher
(
"./"
,
MavenLauncher
.
SOURCE_TYPE
.
APP_SOURCE
)
;
assertNotEquals
(
0
,
launcher
.
getEnvironment
(
)
.
getSourceClasspath
(
)
.
length
)
;
for
(
String
cpe
:
launcher
.
getEnvironment
(
)
.
getSourceClasspath
(
)
)
{
assertTrue
(
new
File
(
cpe
)
.
exists
(
)
)
;
}
int
numberOfJavaSrcFolder
=
new
FileSystemFolder
(
"src/main/java/spoon"
)
.
getAllFiles
(
)
.
stream
(
)
.
map
(
SpoonResource
::
getParent
)
.
collect
(
Collectors
.
toSet
(
)
)
.
size
(
)
;
assertTrue
(
"size: "
+
launcher
.
getModelBuilder
(
)
.
getInputSources
(
)
.
size
(
)
,
launcher
.
getModelBuilder
(
)
.
getInputSources
(
)
.
size
(
)
>=
(
numberOfJavaSrcFolder
)
)
;
launcher
=
new
MavenLauncher
(
"./"
,
MavenLauncher
.
SOURCE_TYPE
.
ALL_SOURCE
)
;
assertNotEquals
(
0
,
launcher
.
getEnvironment
(
)
.
getSourceClasspath
(
)
.
length
)
;
for
(
String
cpe
:
launcher
.
getEnvironment
(
)
.
getSourceClasspath
(
)
)
{
assertTrue
(
new
File
(
cpe
)
.
exists
(
)
)
;
}
int
numberOfJavaTestFolder
=
new
FileSystemFolder
(
"src/test/java/spoon"
)
.
getAllFiles
(
)
.
stream
(
)
.
map
(
SpoonResource
::
getParent
)
.
collect
(
Collectors
.
toSet
(
)
)
.
size
(
)
;
assertTrue
(
"size: "
+
launcher
.
getModelBuilder
(
)
.
getInputSources
(
)
.
size
(
)
,
launcher
.
getModelBuilder
(
)
.
getInputSources
(
)
.
size
(
)
>=
(
numberOfJavaSrcFolder
+
numberOfJavaTestFolder
)
)
;
launcher
=
new
MavenLauncher
(
"./pom.xml"
,
MavenLauncher
.
SOURCE_TYPE
.
APP_SOURCE
)
;
assertEquals
(
8
,
launcher
.
getEnvironment
(
)
.
getComplianceLevel
(
)
)
;
launcher
=
new
MavenLauncher
(
"./src/test/resources/maven-launcher/java-11/pom.xml"
,
MavenLauncher
.
SOURCE_TYPE
.
APP_SOURCE
)
;
assertEquals
(
11
,
launcher
.
getEnvironment
(
)
.
getComplianceLevel
(
)
)
;
launcher
=
new
MavenLauncher
(
"./pom.xml"
,
MavenLauncher
.
SOURCE_TYPE
.
APP_SOURCE
,
new
String
[
]
{
}
)
;
assertEquals
(
0
,
launcher
.
getEnvironment
(
)
.
getSourceClasspath
(
)
.
length
)
;
}
