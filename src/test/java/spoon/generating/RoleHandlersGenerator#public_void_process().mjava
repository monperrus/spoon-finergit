@Override
public
void
process
(
)
{
SpoonMetaModel
metaModel
=
new
SpoonMetaModel
(
getFactory
(
)
)
;
List
<
MMField
>
superFields
=
new
ArrayList
<
>
(
)
;
metaModel
.
getMMTypes
(
)
.
forEach
(
mmType
->
{
mmType
.
getRole2field
(
)
.
forEach
(
(
role
,
rim
)
->
{
addUniqueObject
(
superFields
,
rim
.
getRootSuperField
(
)
)
;
}
)
;
}
)
;
superFields
.
sort
(
(
a
,
b
)
->
{
int
d
=
a
.
getRole
(
)
.
ordinal
(
)
-
b
.
getRole
(
)
.
ordinal
(
)
;
if
(
d
!=
0
)
{
return
d
;
}
return
a
.
getOwnerType
(
)
.
getName
(
)
.
compareTo
(
b
.
getOwnerType
(
)
.
getName
(
)
)
;
}
)
;
PrinterHelper
concept
=
new
PrinterHelper
(
getFactory
(
)
.
getEnvironment
(
)
)
;
superFields
.
forEach
(
mmField
->
{
concept
.
write
(
mmField
.
getOwnerType
(
)
.
getName
(
)
+
" CtRole."
+
mmField
.
getRole
(
)
.
name
(
)
)
.
writeln
(
)
.
incTab
(
)
.
write
(
"ItemType: "
)
.
write
(
mmField
.
getValueType
(
)
.
toString
(
)
)
.
writeln
(
)
;
for
(
MMMethodKind
mk
:
MMMethodKind
.
values
(
)
)
{
MMMethod
mmMethod
=
mmField
.
getMethod
(
mk
)
;
if
(
mmMethod
!=
null
)
{
concept
.
write
(
mk
.
name
(
)
)
.
write
(
": "
)
.
write
(
mmMethod
.
getSignature
(
)
)
.
write
(
" : "
)
.
write
(
mmMethod
.
getReturnType
(
)
.
toString
(
)
)
.
writeln
(
)
;
}
}
concept
.
decTab
(
)
;
concept
.
write
(
"----------------------------------------------------------"
)
.
writeln
(
)
;
}
)
;
try
(
Writer
w
=
new
OutputStreamWriter
(
new
FileOutputStream
(
file
(
"target/report/concept.txt"
)
)
)
)
{
w
.
write
(
concept
.
toString
(
)
)
;
}
catch
(
IOException
e
)
{
throw
new
RuntimeException
(
e
)
;
}
CtType
<
?
>
template
=
getTemplate
(
"spoon.generating.meta.ModelRoleHandlerTemplate"
)
;
CtClass
<
?
>
modelRoleHandlersClass
=
Substitution
.
createTypeFromTemplate
(
TARGET_PACKAGE
+
".ModelRoleHandlers"
,
template
,
new
HashMap
<
>
(
)
)
;
CtNewArray
<
?
>
roleHandlersFieldExpr
=
(
CtNewArray
<
?
>
)
modelRoleHandlersClass
.
getField
(
"roleHandlers"
)
.
getDefaultExpression
(
)
;
superFields
.
forEach
(
rim
->
{
Map
<
String
,
Object
>
params
=
new
HashMap
<
>
(
)
;
params
.
put
(
"$getterName$"
,
rim
.
getMethod
(
MMMethodKind
.
GET
)
.
getName
(
)
)
;
if
(
rim
.
getMethod
(
MMMethodKind
.
SET
)
!=
null
)
{
params
.
put
(
"$setterName$"
,
rim
.
getMethod
(
MMMethodKind
.
SET
)
.
getName
(
)
)
;
}
params
.
put
(
"$Role$"
,
getFactory
(
)
.
Type
(
)
.
createReference
(
CtRole
.
class
)
)
;
params
.
put
(
"ROLE"
,
rim
.
getRole
(
)
.
name
(
)
)
;
params
.
put
(
"$TargetType$"
,
rim
.
getOwnerType
(
)
.
getModelInterface
(
)
.
getReference
(
)
)
;
params
.
put
(
"AbstractHandler"
,
getRoleHandlerSuperTypeQName
(
rim
)
)
;
params
.
put
(
"Node"
,
rim
.
getOwnerType
(
)
.
getModelInterface
(
)
.
getReference
(
)
)
;
params
.
put
(
"ValueType"
,
fixMainValueType
(
getRoleHandlerSuperTypeQName
(
rim
)
.
endsWith
(
"SingleHandler"
)
?
rim
.
getValueType
(
)
:
rim
.
getItemValueType
(
)
)
)
;
CtClass
<
?
>
modelRoleHandlerClass
=
Substitution
.
createTypeFromTemplate
(
getHandlerName
(
rim
)
,
getTemplate
(
"spoon.generating.meta.RoleHandlerTemplate"
)
,
params
)
;
if
(
rim
.
getMethod
(
MMMethodKind
.
SET
)
==
null
)
{
modelRoleHandlerClass
.
getMethodsByName
(
"setValue"
)
.
forEach
(
m
->
m
.
delete
(
)
)
;
}
modelRoleHandlerClass
.
addModifier
(
ModifierKind
.
STATIC
)
;
modelRoleHandlersClass
.
addNestedType
(
modelRoleHandlerClass
)
;
roleHandlersFieldExpr
.
addElement
(
getFactory
(
)
.
createCodeSnippetExpression
(
"new "
+
modelRoleHandlerClass
.
getSimpleName
(
)
+
"()"
)
)
;
}
)
;
}
