private
CtClass
createListenerClass
(
Factory
factory
,
String
listenerName
,
CtTypeReference
getterType
,
Type
type
)
{
CtClass
listener
;
listener
=
factory
.
Class
(
)
.
get
(
TARGET_REPLACE_PACKAGE
+
".CtListener"
)
.
clone
(
)
;
listener
.
setSimpleName
(
listenerName
)
;
target
.
addNestedType
(
listener
)
;
final
List
<
CtTypeReference
>
references
=
listener
.
getElements
(
new
TypeFilter
<
CtTypeReference
>
(
CtTypeReference
.
class
)
{
@Override
public
boolean
matches
(
CtTypeReference
reference
)
{
return
(
TARGET_REPLACE_PACKAGE
+
".CtListener"
)
.
equals
(
reference
.
getQualifiedName
(
)
)
;
}
}
)
;
for
(
CtTypeReference
reference
:
references
)
{
reference
.
setPackage
(
listener
.
getPackage
(
)
.
getReference
(
)
)
;
}
final
CtTypeReference
<
Object
>
theInterface
=
factory
.
Class
(
)
.
createReference
(
TARGET_REPLACE_PACKAGE
+
"."
+
type
.
name
)
;
theInterface
.
addActualTypeArgument
(
getterType
)
;
final
Set
<
CtTypeReference
<
?
>
>
interfaces
=
new
HashSet
<
>
(
)
;
interfaces
.
add
(
theInterface
)
;
listener
.
setSuperInterfaces
(
interfaces
)
;
return
listener
;
}
