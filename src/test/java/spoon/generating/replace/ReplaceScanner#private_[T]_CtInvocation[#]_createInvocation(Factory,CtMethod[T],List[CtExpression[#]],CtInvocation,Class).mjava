private
<
T
>
CtInvocation
<
?
>
createInvocation
(
Factory
factory
,
CtMethod
<
T
>
candidate
,
List
<
CtExpression
<
?
>
>
invArgs
,
CtInvocation
getter
,
Class
getterTypeClass
)
{
CtInvocation
<
?
>
invocation
;
Type
type
;
if
(
getterTypeClass
.
equals
(
Collection
.
class
)
||
List
.
class
.
isAssignableFrom
(
getterTypeClass
)
)
{
invocation
=
factory
.
Code
(
)
.
createInvocation
(
null
,
this
.
list
,
invArgs
)
;
type
=
Type
.
LIST
;
}
else
if
(
getterTypeClass
.
equals
(
Map
.
class
)
)
{
invocation
=
factory
.
Code
(
)
.
createInvocation
(
null
,
this
.
map
,
invArgs
)
;
type
=
Type
.
MAP
;
}
else
if
(
getterTypeClass
.
equals
(
Set
.
class
)
)
{
invocation
=
factory
.
Code
(
)
.
createInvocation
(
null
,
this
.
set
,
invArgs
)
;
type
=
Type
.
SET
;
}
else
{
invocation
=
factory
.
Code
(
)
.
createInvocation
(
null
,
this
.
element
,
invArgs
)
;
type
=
Type
.
ELEMENT
;
}
final
String
name
=
getter
.
getExecutable
(
)
.
getSimpleName
(
)
.
substring
(
3
)
;
final
String
listenerName
=
getter
.
getExecutable
(
)
.
getDeclaringType
(
)
.
getSimpleName
(
)
+
name
+
"ReplaceListener"
;
CtClass
listener
;
if
(
listeners
.
containsKey
(
listenerName
)
)
{
listener
=
listeners
.
get
(
listenerName
)
;
}
else
{
final
CtTypeReference
getterType
=
getGetterType
(
factory
,
getter
)
;
CtTypeReference
<
?
>
setterParamType
=
getterType
;
if
(
modelCollectionTypes
.
contains
(
setterParamType
.
getQualifiedName
(
)
)
)
{
setterParamType
=
factory
.
Type
(
)
.
createReference
(
Collection
.
class
)
;
}
listener
=
createListenerClass
(
factory
,
listenerName
,
setterParamType
,
type
)
;
final
CtMethod
setter
=
getSetter
(
name
,
getter
.
getTarget
(
)
.
getType
(
)
.
getDeclaration
(
)
)
;
final
CtField
field
=
updateField
(
listener
,
setter
.
getDeclaringType
(
)
.
getReference
(
)
)
;
updateConstructor
(
listener
,
setter
.
getDeclaringType
(
)
.
getReference
(
)
)
;
updateSetter
(
factory
,
(
CtMethod
<
?
>
)
listener
.
getMethodsByName
(
"set"
)
.
get
(
0
)
,
setterParamType
,
field
,
setter
)
;
final
CtComment
comment
=
factory
.
Core
(
)
.
createComment
(
)
;
comment
.
setCommentType
(
CtComment
.
CommentType
.
INLINE
)
;
comment
.
setContent
(
"auto-generated, see "
+
ReplacementVisitorGenerator
.
class
.
getName
(
)
)
;
listener
.
addComment
(
comment
)
;
listeners
.
put
(
listenerName
,
listener
)
;
}
invocation
.
addArgument
(
getConstructorCall
(
listener
,
factory
.
Code
(
)
.
createVariableRead
(
candidate
.
getParameters
(
)
.
get
(
0
)
.
getReference
(
)
,
false
)
)
)
;
return
invocation
;
}
