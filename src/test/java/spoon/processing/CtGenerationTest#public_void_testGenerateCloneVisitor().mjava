@Test
public
void
testGenerateCloneVisitor
(
)
throws
Exception
{
System
.
setProperty
(
"line.separator"
,
"\n"
)
;
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
getEnvironment
(
)
.
setCommentEnabled
(
true
)
;
launcher
.
getEnvironment
(
)
.
useTabulations
(
true
)
;
launcher
.
setSourceOutputDirectory
(
"./target/generated/"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/code"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/declaration"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/reference"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/internal"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/reflect/code"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/reflect/declaration"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/reflect/reference"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/reflect/internal"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/visitor/CtScanner.java"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/visitor/CtInheritanceScanner.java"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/generating/clone/"
)
;
launcher
.
addProcessor
(
new
CloneVisitorGenerator
(
)
)
;
launcher
.
setOutputFilter
(
new
RegexFilter
(
"spoon.support.visitor.clone.*"
)
)
;
launcher
.
run
(
)
;
assertThat
(
build
(
new
File
(
"./src/main/java/spoon/support/visitor/clone/"
)
)
.
Package
(
)
.
get
(
"spoon.support.visitor.clone"
)
)
.
isEqualTo
(
build
(
new
File
(
"./target/generated/spoon/support/visitor/clone/"
)
)
.
Package
(
)
.
get
(
"spoon.support.visitor.clone"
)
)
;
}
