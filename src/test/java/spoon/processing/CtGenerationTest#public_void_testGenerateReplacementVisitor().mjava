@Test
public
void
testGenerateReplacementVisitor
(
)
throws
Exception
{
System
.
setProperty
(
"line.separator"
,
"\n"
)
;
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setAutoImports
(
false
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
getEnvironment
(
)
.
setCommentEnabled
(
true
)
;
launcher
.
getEnvironment
(
)
.
useTabulations
(
true
)
;
launcher
.
setSourceOutputDirectory
(
"./target/generated/"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/code"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/declaration"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/reference"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/internal"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/visitor/CtScanner.java"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/generating/replace/"
)
;
launcher
.
addProcessor
(
new
ReplacementVisitorGenerator
(
)
)
;
launcher
.
setOutputFilter
(
new
RegexFilter
(
"spoon.support.visitor.replace.*"
)
)
;
launcher
.
run
(
)
;
CtClass
<
Object
>
actual
=
build
(
new
File
(
launcher
.
getModelBuilder
(
)
.
getSourceOutputDirectory
(
)
+
"/spoon/support/visitor/replace/ReplacementVisitor.java"
)
)
.
Class
(
)
.
get
(
"spoon.support.visitor.replace.ReplacementVisitor"
)
;
CtClass
<
Object
>
expected
=
build
(
new
File
(
"./src/main/java/spoon/support/visitor/replace/ReplacementVisitor.java"
)
)
.
Class
(
)
.
get
(
"spoon.support.visitor.replace.ReplacementVisitor"
)
;
try
{
assertThat
(
actual
)
.
isEqualTo
(
expected
)
;
}
catch
(
AssertionError
e
)
{
throw
new
ComparisonFailure
(
"ReplacementVisitor different"
,
expected
.
toString
(
)
,
actual
.
toString
(
)
)
;
}
}
