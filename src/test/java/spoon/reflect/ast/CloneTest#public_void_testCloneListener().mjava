@Test
public
void
testCloneListener
(
)
{
Factory
factory
=
ModelUtils
.
build
(
new
File
(
"./src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java"
)
)
;
CtType
<
?
>
cloneSource
=
factory
.
Type
(
)
.
get
(
DefaultJavaPrettyPrinter
.
class
)
;
class
CloneListener
extends
CloneHelper
{
Map
<
CtElement
,
CtElement
>
sourceToTarget
=
new
IdentityHashMap
<
>
(
)
;
@Override
public
<
T
extends
CtElement
>
T
clone
(
T
source
)
{
if
(
source
==
null
)
{
return
null
;
}
T
target
=
super
.
clone
(
source
)
;
onCloned
(
source
,
target
)
;
return
target
;
}
private
void
onCloned
(
CtElement
source
,
CtElement
target
)
{
CtElement
previousTarget
=
sourceToTarget
.
put
(
source
,
target
)
;
assertNull
(
previousTarget
)
;
}
}
CloneListener
cl
=
new
CloneListener
(
)
;
CtType
<
?
>
cloneTarget
=
cl
.
clone
(
cloneSource
)
;
cloneSource
.
filterChildren
(
null
)
.
forEach
(
sourceElement
->
{
CtElement
targetElement
=
cl
.
sourceToTarget
.
remove
(
sourceElement
)
;
assertNotNull
(
"Missing target for sourceElement\n"
+
sourceElement
,
targetElement
)
;
assertEquals
(
"Source and Target are not equal"
,
sourceElement
,
targetElement
)
;
}
)
;
assertTrue
(
cl
.
sourceToTarget
.
isEmpty
(
)
)
;
}
