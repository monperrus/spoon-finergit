@Test
public
void
testCloneMethodsDeclaredInAST
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
setSourceOutputDirectory
(
"./target/trash"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/code"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/declaration"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/reference"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/reflect/code"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/reflect/declaration"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/reflect/reference"
)
;
launcher
.
run
(
)
;
new
CtScanner
(
)
{
@Override
public
<
T
>
void
visitCtClass
(
CtClass
<
T
>
ctClass
)
{
if
(
!
ctClass
.
getSimpleName
(
)
.
startsWith
(
"Ct"
)
)
{
return
;
}
final
CtMethod
<
Object
>
clone
=
ctClass
.
getMethod
(
"clone"
)
;
assertNotNull
(
ctClass
.
getQualifiedName
(
)
+
" hasn't clone method."
,
clone
)
;
assertTrue
(
ctClass
.
getQualifiedName
(
)
+
" hasn't Override annotation on clone method."
,
clone
.
getAnnotations
(
)
.
stream
(
)
.
map
(
ctAnnotation
->
ctAnnotation
.
getActualAnnotation
(
)
.
annotationType
(
)
)
.
collect
(
Collectors
.
toList
(
)
)
.
contains
(
Override
.
class
)
)
;
}
@Override
public
<
T
>
void
visitCtInterface
(
CtInterface
<
T
>
intrface
)
{
if
(
!
intrface
.
getSimpleName
(
)
.
startsWith
(
"Ct"
)
)
{
return
;
}
final
CtMethod
<
Object
>
clone
=
intrface
.
getMethod
(
"clone"
)
;
if
(
hasConcreteImpl
(
intrface
)
)
{
assertNotNull
(
intrface
.
getQualifiedName
(
)
+
" hasn't clone method."
,
clone
)
;
if
(
!
isRootDeclaration
(
intrface
)
)
{
assertTrue
(
intrface
.
getQualifiedName
(
)
+
" hasn't Override annotation on clone method."
,
clone
.
getAnnotations
(
)
.
stream
(
)
.
map
(
ctAnnotation
->
ctAnnotation
.
getActualAnnotation
(
)
.
annotationType
(
)
)
.
collect
(
Collectors
.
toList
(
)
)
.
contains
(
Override
.
class
)
)
;
}
}
}
private
<
T
>
boolean
hasConcreteImpl
(
CtInterface
<
T
>
intrface
)
{
return
Query
.
getElements
(
intrface
.
getFactory
(
)
,
new
TypeFilter
<
CtClass
<
?
>
>
(
CtClass
.
class
)
{
@Override
public
boolean
matches
(
CtClass
<
?
>
element
)
{
return
super
.
matches
(
element
)
&&
element
.
getSuperInterfaces
(
)
.
contains
(
intrface
.
getReference
(
)
)
;
}
}
)
.
size
(
)
>
0
;
}
private
<
T
>
boolean
isRootDeclaration
(
CtInterface
<
T
>
intrface
)
{
return
"CtElement"
.
equals
(
intrface
.
getSimpleName
(
)
)
;
}
}
.
scan
(
launcher
.
getModel
(
)
.
getRootPackage
(
)
)
;
}
