@Test
public
void
testCopyMethod
(
)
{
Launcher
l
=
new
Launcher
(
)
;
l
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
l
.
addInputResource
(
"./src/test/resources/noclasspath/A2.java"
)
;
l
.
buildModel
(
)
;
CtClass
<
Object
>
klass
=
l
.
getFactory
(
)
.
Class
(
)
.
get
(
"A2"
)
;
CtMethod
<
?
>
method
=
klass
.
getMethodsByName
(
"c"
)
.
get
(
0
)
;
List
<
CtExecutableReference
>
elements
=
method
.
getElements
(
new
TypeFilter
<
>
(
CtExecutableReference
.
class
)
)
;
CtExecutableReference
methodRef
=
elements
.
get
(
0
)
;
assertSame
(
method
,
methodRef
.
getDeclaration
(
)
)
;
assertEquals
(
"A2"
,
methodRef
.
getDeclaringType
(
)
.
toString
(
)
)
;
CtMethod
<
?
>
methodClone
=
method
.
copyMethod
(
)
;
assertEquals
(
"cCopy"
,
methodClone
.
getSimpleName
(
)
)
;
methodClone
.
getBody
(
)
.
insertBegin
(
l
.
getFactory
(
)
.
createCodeSnippetStatement
(
"// debug info"
)
)
;
CtExecutableReference
reference
=
methodClone
.
getElements
(
new
TypeFilter
<
>
(
CtExecutableReference
.
class
)
)
.
get
(
0
)
;
assertEquals
(
"cCopy"
,
reference
.
getSimpleName
(
)
)
;
assertSame
(
methodClone
,
reference
.
getDeclaration
(
)
)
;
assertEquals
(
"A2"
,
methodClone
.
getDeclaringType
(
)
.
getQualifiedName
(
)
)
;
Refactoring
.
changeMethodName
(
methodClone
,
"foo"
)
;
assertEquals
(
"foo"
,
methodClone
.
getSimpleName
(
)
)
;
assertEquals
(
"foo"
,
reference
.
getSimpleName
(
)
)
;
assertSame
(
methodClone
,
reference
.
getDeclaration
(
)
)
;
assertEquals
(
"A2"
,
methodClone
.
getDeclaringType
(
)
.
getQualifiedName
(
)
)
;
methodClone
=
Refactoring
.
copyMethod
(
method
)
;
assertEquals
(
"cCopy"
,
methodClone
.
getSimpleName
(
)
)
;
methodClone
=
Refactoring
.
copyMethod
(
method
)
;
assertEquals
(
"cCopyX"
,
methodClone
.
getSimpleName
(
)
)
;
}
