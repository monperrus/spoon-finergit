@Test
public
void
testClassTypingContextContinueScanning
(
)
throws
Exception
{
final
CtType
<
?
>
subClass
=
this
.
factory
.
Type
(
)
.
get
(
Subclass
.
class
)
;
final
CtTypeReference
<
?
>
subinterface
=
this
.
factory
.
Type
(
)
.
createReference
(
Subinterface
.
class
)
;
final
CtTypeReference
<
?
>
testInterface
=
this
.
factory
.
Type
(
)
.
createReference
(
TestInterface
.
class
)
;
final
CtTypeReference
<
?
>
extendObject
=
this
.
factory
.
Type
(
)
.
createReference
(
ExtendsArrayList
.
class
)
;
final
CtTypeReference
<
?
>
arrayList
=
this
.
factory
.
Type
(
)
.
createReference
(
ArrayList
.
class
)
;
final
CtTypeReference
<
?
>
abstractList
=
this
.
factory
.
Type
(
)
.
createReference
(
AbstractList
.
class
)
;
final
CtTypeReference
<
?
>
abstractCollection
=
this
.
factory
.
Type
(
)
.
createReference
(
AbstractCollection
.
class
)
;
final
CtTypeReference
<
?
>
object
=
this
.
factory
.
Type
(
)
.
createReference
(
Object
.
class
)
;
{
final
ClassTypingContext
ctc
=
(
ClassTypingContext
)
this
.
factory
.
createTypeAdapter
(
subClass
)
;
Assert
.
assertEquals
(
subClass
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
subClass
.
getReference
(
)
)
)
;
Assert
.
assertEquals
(
subClass
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
subinterface
)
)
;
Assert
.
assertEquals
(
subClass
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
testInterface
)
)
;
Assert
.
assertEquals
(
subClass
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
factory
.
createCtTypeReference
(
Comparable
.
class
)
)
)
;
Assert
.
assertEquals
(
subClass
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
extendObject
)
)
;
Assert
.
assertEquals
(
extendObject
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
arrayList
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
extendObject
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
subClass
.
getReference
(
)
)
)
;
Assert
.
assertEquals
(
arrayList
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
factory
.
createCtTypeReference
(
RandomAccess
.
class
)
)
)
;
Assert
.
assertEquals
(
arrayList
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
abstractList
)
)
;
Assert
.
assertEquals
(
abstractList
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
abstractCollection
)
)
;
Assert
.
assertEquals
(
abstractCollection
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
object
)
)
;
Assert
.
assertEquals
(
object
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc
)
.
getQualifiedName
(
)
)
;
Assert
.
assertFalse
(
ctc
.
isSubtypeOf
(
factory
.
Type
(
)
.
createReference
(
"java.io.InputStream"
)
)
)
;
Assert
.
assertNull
(
getLastResolvedSuperclass
(
ctc
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
arrayList
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
extendObject
)
)
;
Assert
.
assertTrue
(
ctc
.
isSubtypeOf
(
subClass
.
getReference
(
)
)
)
;
}
{
final
ClassTypingContext
ctc2
=
(
ClassTypingContext
)
this
.
factory
.
createTypeAdapter
(
subClass
)
;
Assert
.
assertEquals
(
subClass
.
getQualifiedName
(
)
,
getLastResolvedSuperclass
(
ctc2
)
.
getQualifiedName
(
)
)
;
Assert
.
assertFalse
(
ctc2
.
isSubtypeOf
(
factory
.
Type
(
)
.
createReference
(
"java.io.InputStream"
)
)
)
;
Assert
.
assertNull
(
getLastResolvedSuperclass
(
ctc2
)
)
;
Assert
.
assertTrue
(
ctc2
.
isSubtypeOf
(
arrayList
)
)
;
Assert
.
assertTrue
(
ctc2
.
isSubtypeOf
(
extendObject
)
)
;
Assert
.
assertTrue
(
ctc2
.
isSubtypeOf
(
subClass
.
getReference
(
)
)
)
;
}
}
