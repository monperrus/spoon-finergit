@Parameterized.Parameters(name="{0}")
public
static
Collection
<
Object
[
]
>
data
(
)
{
return
Arrays
.
asList
(
new
Object
[
]
[
]
{
{
CtAnnotation
.
class
,
factory
.
Core
(
)
.
createAnnotation
(
)
}
,
{
CtAnnotationFieldAccess
.
class
,
factory
.
Core
(
)
.
createAnnotationFieldAccess
(
)
}
,
{
CtAnnotationType
.
class
,
factory
.
Core
(
)
.
createAnnotationType
(
)
}
,
{
CtAnonymousExecutable
.
class
,
factory
.
Core
(
)
.
createAnonymousExecutable
(
)
}
,
{
CtArrayAccess
.
class
,
factory
.
Core
(
)
.
createArrayAccess
(
)
}
,
{
CtArrayTypeReference
.
class
,
factory
.
Core
(
)
.
createArrayTypeReference
(
)
}
,
{
CtAssert
.
class
,
factory
.
Core
(
)
.
createAssert
(
)
}
,
{
CtAssignment
.
class
,
factory
.
Core
(
)
.
createAssignment
(
)
}
,
{
CtBinaryOperator
.
class
,
factory
.
Core
(
)
.
createBinaryOperator
(
)
}
,
{
CtBlock
.
class
,
factory
.
Core
(
)
.
createBlock
(
)
}
,
{
CtBreak
.
class
,
factory
.
Core
(
)
.
createBreak
(
)
}
,
{
CtCase
.
class
,
factory
.
Core
(
)
.
createCase
(
)
}
,
{
CtCatch
.
class
,
factory
.
Core
(
)
.
createCatch
(
)
}
,
{
CtClass
.
class
,
factory
.
Core
(
)
.
createClass
(
)
}
,
{
CtConditional
.
class
,
factory
.
Core
(
)
.
createConditional
(
)
}
,
{
CtConstructor
.
class
,
factory
.
Core
(
)
.
createConstructor
(
)
}
,
{
CtContinue
.
class
,
factory
.
Core
(
)
.
createContinue
(
)
}
,
{
CtDo
.
class
,
factory
.
Core
(
)
.
createDo
(
)
}
,
{
CtEnum
.
class
,
factory
.
Core
(
)
.
createEnum
(
)
}
,
{
CtExecutableReference
.
class
,
factory
.
Core
(
)
.
createExecutableReference
(
)
}
,
{
CtField
.
class
,
factory
.
Core
(
)
.
createField
(
)
}
,
{
CtFieldAccess
.
class
,
factory
.
Core
(
)
.
createFieldAccess
(
)
}
,
{
CtThisAccess
.
class
,
factory
.
Core
(
)
.
createThisAccess
(
)
}
,
{
CtSuperAccess
.
class
,
factory
.
Core
(
)
.
createSuperAccess
(
)
}
,
{
CtFieldReference
.
class
,
factory
.
Core
(
)
.
createFieldReference
(
)
}
,
{
CtFor
.
class
,
factory
.
Core
(
)
.
createFor
(
)
}
,
{
CtForEach
.
class
,
factory
.
Core
(
)
.
createForEach
(
)
}
,
{
CtIf
.
class
,
factory
.
Core
(
)
.
createIf
(
)
}
,
{
CtInterface
.
class
,
factory
.
Core
(
)
.
createInterface
(
)
}
,
{
CtInvocation
.
class
,
factory
.
Core
(
)
.
createInvocation
(
)
}
,
{
CtLiteral
.
class
,
factory
.
Core
(
)
.
createLiteral
(
)
}
,
{
CtLocalVariable
.
class
,
factory
.
Core
(
)
.
createLocalVariable
(
)
}
,
{
CtLocalVariableReference
.
class
,
factory
.
Core
(
)
.
createLocalVariableReference
(
)
}
,
{
CtCatchVariable
.
class
,
factory
.
Core
(
)
.
createCatchVariable
(
)
}
,
{
CtCatchVariableReference
.
class
,
factory
.
Core
(
)
.
createCatchVariableReference
(
)
}
,
{
CtMethod
.
class
,
factory
.
Core
(
)
.
createMethod
(
)
}
,
{
CtNewArray
.
class
,
factory
.
Core
(
)
.
createNewArray
(
)
}
,
{
CtNewClass
.
class
,
factory
.
Core
(
)
.
createNewClass
(
)
}
,
{
CtOperatorAssignment
.
class
,
factory
.
Core
(
)
.
createOperatorAssignment
(
)
}
,
{
CtPackage
.
class
,
factory
.
Core
(
)
.
createPackage
(
)
}
,
{
CtPackageReference
.
class
,
factory
.
Core
(
)
.
createPackageReference
(
)
}
,
{
CtParameter
.
class
,
factory
.
Core
(
)
.
createParameter
(
)
}
,
{
CtParameterReference
.
class
,
factory
.
Core
(
)
.
createParameterReference
(
)
}
,
{
CtReturn
.
class
,
factory
.
Core
(
)
.
createReturn
(
)
}
,
{
CtStatementList
.
class
,
factory
.
Core
(
)
.
createStatementList
(
)
}
,
{
CtSwitch
.
class
,
factory
.
Core
(
)
.
createSwitch
(
)
}
,
{
CtSynchronized
.
class
,
factory
.
Core
(
)
.
createSynchronized
(
)
}
,
{
CtThrow
.
class
,
factory
.
Core
(
)
.
createThrow
(
)
}
,
{
CtTry
.
class
,
factory
.
Core
(
)
.
createTry
(
)
}
,
{
CtTryWithResource
.
class
,
factory
.
Core
(
)
.
createTryWithResource
(
)
}
,
{
CtTypeParameter
.
class
,
factory
.
Core
(
)
.
createTypeParameter
(
)
}
,
{
CtTypeParameterReference
.
class
,
factory
.
Core
(
)
.
createTypeParameterReference
(
)
}
,
{
CtTypeReference
.
class
,
factory
.
Core
(
)
.
createTypeReference
(
)
}
,
{
CtUnaryOperator
.
class
,
factory
.
Core
(
)
.
createUnaryOperator
(
)
}
,
{
CtVariableAccess
.
class
,
factory
.
Core
(
)
.
createVariableAccess
(
)
}
,
{
CtWhile
.
class
,
factory
.
Core
(
)
.
createWhile
(
)
}
,
{
CtCodeSnippetExpression
.
class
,
factory
.
Core
(
)
.
createCodeSnippetExpression
(
)
}
,
{
CtCodeSnippetStatement
.
class
,
factory
.
Core
(
)
.
createCodeSnippetStatement
(
)
}
}
)
;
}
