@Test
public
void
testGenerateReplacementVisitor
(
)
throws
Exception
{
class
RegexFilter
implements
Filter
<
CtType
<
?
>
>
{
private
final
Pattern
regex
;
private
RegexFilter
(
String
regex
)
{
if
(
regex
==
null
)
{
throw
new
IllegalArgumentException
(
)
;
}
this
.
regex
=
Pattern
.
compile
(
regex
)
;
}
public
boolean
matches
(
CtType
<
?
>
element
)
{
Matcher
m
=
regex
.
matcher
(
element
.
getQualifiedName
(
)
)
;
return
m
.
matches
(
)
;
}
public
Class
<
CtElement
>
getType
(
)
{
return
CtElement
.
class
;
}
}
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
getEnvironment
(
)
.
setGenerateJavadoc
(
true
)
;
launcher
.
getEnvironment
(
)
.
setCommentEnabled
(
true
)
;
launcher
.
getEnvironment
(
)
.
useTabulations
(
true
)
;
launcher
.
setSourceOutputDirectory
(
"./target/generated/"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/code"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/declaration"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/reference"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/internal"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/visitor/CtScanner.java"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/generating/replace/"
)
;
launcher
.
addProcessor
(
new
ReplacementVisitorGenerator
(
)
)
;
launcher
.
setOutputFilter
(
new
RegexFilter
(
"spoon.support.visitor.replace.*"
)
)
;
launcher
.
run
(
)
;
assertThat
(
build
(
new
File
(
"./src/main/java/spoon/support/visitor/replace/ReplacementVisitor.java"
)
)
.
Class
(
)
.
get
(
ReplacementVisitor
.
class
)
)
.
isEqualTo
(
build
(
new
File
(
"./target/generated/spoon/support/visitor/replace/ReplacementVisitor.java"
)
)
.
Class
(
)
.
get
(
ReplacementVisitor
.
class
)
)
;
}
