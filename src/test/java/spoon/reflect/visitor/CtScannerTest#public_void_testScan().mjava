@Test
public
void
testScan
(
)
{
Launcher
launcher
;
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
addInputResource
(
"src/test/resources/noclasspath/draw2d"
)
;
launcher
.
buildModel
(
)
;
class
Counter
{
int
nEnter
=
0
;
int
nExit
=
0
;
int
nObject
=
0
;
int
nElement
=
0
;
Deque
<
CollectionContext
>
contexts
=
new
ArrayDeque
<
>
(
)
;
}
Counter
counter
=
new
Counter
(
)
;
launcher
.
getModel
(
)
.
getRootPackage
(
)
.
accept
(
new
CtScanner
(
)
{
@Override
public
void
scan
(
Object
o
)
{
counter
.
nObject
++
;
super
.
scan
(
o
)
;
}
@Override
public
void
scan
(
CtElement
o
)
{
counter
.
nElement
++
;
super
.
scan
(
o
)
;
}
@Override
public
void
enter
(
CtElement
o
)
{
counter
.
nEnter
++
;
super
.
enter
(
o
)
;
}
@Override
public
void
exit
(
CtElement
o
)
{
counter
.
nExit
++
;
super
.
exit
(
o
)
;
}
}
)
;
assertEquals
(
0
,
counter
.
nObject
)
;
assertEquals
(
3655
,
counter
.
nElement
)
;
assertEquals
(
2435
,
counter
.
nEnter
)
;
assertEquals
(
2435
,
counter
.
nExit
)
;
Counter
counter2
=
new
Counter
(
)
;
launcher
.
getModel
(
)
.
getRootPackage
(
)
.
accept
(
new
CtScanner
(
)
{
@Override
public
void
scan
(
Object
o
)
{
counter2
.
nObject
++
;
super
.
scan
(
o
)
;
}
@Override
public
void
scan
(
CtRole
role
,
CtElement
o
)
{
if
(
o
==
null
)
{
assertNull
(
counter2
.
contexts
.
peek
(
)
.
col
)
;
}
else
{
RoleHandler
rh
=
RoleHandlerHelper
.
getRoleHandler
(
o
.
getParent
(
)
.
getClass
(
)
,
role
)
;
if
(
rh
.
getContainerKind
(
)
==
ContainerKind
.
SINGLE
)
{
assertNull
(
counter2
.
contexts
.
peek
(
)
.
col
)
;
}
else
{
counter2
.
contexts
.
peek
(
)
.
assertRemoveSame
(
o
)
;
}
}
counter2
.
nElement
++
;
super
.
scan
(
o
)
;
}
@Override
public
void
scan
(
CtRole
role
,
Collection
<
?
CtElement
>
elements
)
{
counter2
.
contexts
.
peek
(
)
.
initCollection
(
elements
)
;
super
.
scan
(
role
,
elements
)
;
counter2
.
contexts
.
peek
(
)
.
assertCollectionIsEmpty
(
)
;
}
@Override
public
void
scan
(
CtRole
role
,
Map
<
String
,
?
CtElement
>
elements
)
{
counter2
.
contexts
.
peek
(
)
.
initCollection
(
elements
.
values
(
)
)
;
super
.
scan
(
role
,
elements
)
;
counter2
.
contexts
.
peek
(
)
.
assertCollectionIsEmpty
(
)
;
}
@Override
public
void
enter
(
CtElement
o
)
{
counter2
.
nEnter
++
;
counter2
.
contexts
.
push
(
new
CollectionContext
(
)
)
;
}
@Override
public
void
exit
(
CtElement
o
)
{
counter2
.
nExit
++
;
counter2
.
contexts
.
peek
(
)
.
assertCollectionIsEmpty
(
)
;
counter2
.
contexts
.
pop
(
)
;
}
}
)
;
assertEquals
(
counter
.
nObject
,
counter2
.
nObject
)
;
assertEquals
(
counter
.
nElement
,
counter2
.
nElement
)
;
assertEquals
(
counter
.
nEnter
,
counter2
.
nEnter
)
;
assertEquals
(
counter
.
nExit
,
counter2
.
nExit
)
;
}
