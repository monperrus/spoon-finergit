@Test
public
void
testScannerCallsAllProperties
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/"
)
;
launcher
.
run
(
)
;
CtTypeReference
<
?
>
ctElementRef
=
launcher
.
getFactory
(
)
.
createCtTypeReference
(
CtElement
.
class
)
;
CtClass
<
?
>
scannerCtClass
=
(
CtClass
<
?
>
)
launcher
.
getFactory
(
)
.
Type
(
)
.
get
(
CtScanner
.
class
)
;
List
<
String
>
problems
=
new
ArrayList
<
>
(
)
;
Set
<
String
>
ignoredInvocations
=
new
HashSet
(
Arrays
.
asList
(
"scan"
,
"enter"
,
"exit"
)
)
;
SpoonMetaModel
metaModel
=
new
SpoonMetaModel
(
new
File
(
"./src/main/java"
)
)
;
Map
<
String
,
CtMethod
<
?
>
>
scannerVisitMethodsByName
=
new
HashMap
<
>
(
)
;
scannerCtClass
.
getAllMethods
(
)
.
forEach
(
m
->
{
if
(
m
.
getSimpleName
(
)
.
startsWith
(
"visit"
)
)
{
scannerVisitMethodsByName
.
put
(
m
.
getSimpleName
(
)
,
m
)
;
}
}
)
;
class
Counter
{
int
nbChecks
=
0
;
}
Counter
c
=
new
Counter
(
)
;
for
(
MMType
leafMmType
:
metaModel
.
getMMTypes
(
)
)
{
if
(
leafMmType
.
getKind
(
)
!=
MMTypeKind
.
LEAF
)
{
continue
;
}
CtMethod
<
?
>
visitMethod
=
scannerVisitMethodsByName
.
remove
(
"visit"
+
leafMmType
.
getName
(
)
)
;
assertNotNull
(
"CtScanner#"
+
"visit"
+
leafMmType
.
getName
(
)
+
"(...) not found"
,
visitMethod
)
;
Set
<
String
>
calledMethods
=
new
HashSet
<
>
(
)
;
Set
<
String
>
checkedMethods
=
new
HashSet
<
>
(
)
;
leafMmType
.
getRole2field
(
)
.
forEach
(
(
role
,
mmField
)
->
{
if
(
mmField
.
isDerived
(
)
)
{
return
;
}
if
(
mmField
.
getItemValueType
(
)
.
isSubtypeOf
(
ctElementRef
)
==
false
)
{
return
;
}
MMMethod
getter
=
mmField
.
getMethod
(
MMMethodKind
.
GET
)
;
checkedMethods
.
add
(
getter
.
getSignature
(
)
)
;
CtInvocation
invocation
=
visitMethod
.
filterChildren
(
new
TypeFilter
<
CtInvocation
>
(
CtInvocation
.
class
)
{
@Override
public
boolean
matches
(
CtInvocation
element
)
{
if
(
ignoredInvocations
.
contains
(
element
.
getExecutable
(
)
.
getSimpleName
(
)
)
)
{
return
false
;
}
calledMethods
.
add
(
element
.
getExecutable
(
)
.
getSignature
(
)
)
;
return
super
.
matches
(
element
)
&&
element
.
getExecutable
(
)
.
getSimpleName
(
)
.
equals
(
getter
.
getName
(
)
)
;
}
}
)
.
first
(
)
;
if
(
getter
.
getName
(
)
.
equals
(
"getComments"
)
)
{
return
;
}
if
(
invocation
==
null
)
{
problems
.
add
(
"no "
+
getter
.
getSignature
(
)
+
" in "
+
visitMethod
)
;
}
else
{
c
.
nbChecks
++
;
}
}
)
;
calledMethods
.
removeAll
(
checkedMethods
)
;
if
(
calledMethods
.
size
(
)
>
0
)
{
problems
.
add
(
"CtScanner "
+
visitMethod
.
getPosition
(
)
+
" calls unexpected methods: "
+
calledMethods
)
;
}
}
if
(
scannerVisitMethodsByName
.
isEmpty
(
)
==
false
)
{
problems
.
add
(
"These CtScanner visit methods were not checked: "
+
scannerVisitMethodsByName
.
keySet
(
)
)
;
}
if
(
problems
.
size
(
)
>
0
)
{
fail
(
String
.
join
(
"\n"
,
problems
)
)
;
}
assertTrue
(
"not enough checks"
,
c
.
nbChecks
>=
200
)
;
}
