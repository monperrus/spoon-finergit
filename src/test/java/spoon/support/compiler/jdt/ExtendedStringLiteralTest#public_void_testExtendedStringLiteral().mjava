@Test
public
void
testExtendedStringLiteral
(
)
throws
Exception
{
Launcher
launcher
=
new
Launcher
(
)
{
@Override
public
SpoonModelBuilder
createCompiler
(
)
{
return
new
JDTBasedSpoonCompiler
(
getFactory
(
)
)
{
@Override
protected
JDTBatchCompiler
createBatchCompiler
(
)
{
return
new
JDTBatchCompiler
(
this
)
{
@Override
public
CompilationUnitDeclaration
[
]
getUnits
(
)
{
startTime
=
System
.
currentTimeMillis
(
)
;
INameEnvironment
environment
=
this
.
jdtCompiler
.
environment
;
if
(
environment
==
null
)
{
environment
=
getLibraryAccess
(
)
;
}
CompilerOptions
compilerOptions
=
new
CompilerOptions
(
this
.
options
)
;
compilerOptions
.
parseLiteralExpressionsAsConstants
=
true
;
TreeBuilderCompiler
treeBuilderCompiler
=
new
TreeBuilderCompiler
(
environment
,
getHandlingPolicy
(
)
,
compilerOptions
,
this
.
jdtCompiler
.
requestor
,
getProblemFactory
(
)
,
this
.
out
,
null
)
;
CompilationUnitDeclaration
[
]
units
=
treeBuilderCompiler
.
buildUnits
(
getCompilationUnits
(
)
)
;
return
units
;
}
}
;
}
}
;
}
}
;
SpoonModelBuilder
comp
=
launcher
.
createCompiler
(
)
;
comp
.
addInputSources
(
SpoonResourceHelper
.
resources
(
"./src/test/java/"
+
ExtendedStringLiteralTestClass
.
class
.
getCanonicalName
(
)
.
replace
(
'.'
,
'/'
)
+
".java"
)
)
;
comp
.
build
(
)
;
CtClass
<
?
>
cl
=
comp
.
getFactory
(
)
.
Package
(
)
.
get
(
"spoon.support.compiler.jdt.testclasses"
)
.
getType
(
"ExtendedStringLiteralTestClass"
)
;
CtField
<
?
>
f
=
cl
.
getField
(
"extendedStringLiteral"
)
;
CtExpression
<
?
>
de
=
f
.
getDefaultExpression
(
)
;
assertEquals
(
"\"hello world!\""
,
de
.
toString
(
)
)
;
}
