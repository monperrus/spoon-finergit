@Test
public
void
testSuperOfActualTypeArgumentsOfReturnTypeOfMethod
(
)
{
Consumer
<
CtType
<
?
>
>
checker
=
type
->
{
{
CtMethod
method
=
type
.
getMethodsByName
(
"setAssignment"
)
.
get
(
0
)
;
CtTypeReference
<
?
>
paramType
=
(
(
CtParameter
<
?
>
)
method
.
getParameters
(
)
.
get
(
0
)
)
.
getType
(
)
;
assertEquals
(
CtExpression
.
class
.
getName
(
)
,
paramType
.
getQualifiedName
(
)
)
;
assertEquals
(
1
,
paramType
.
getActualTypeArguments
(
)
.
size
(
)
)
;
CtTypeParameterReference
actTypeArgOfReturnType
=
(
CtTypeParameterReference
)
paramType
.
getActualTypeArguments
(
)
.
get
(
0
)
;
assertEquals
(
"A"
,
actTypeArgOfReturnType
.
getSimpleName
(
)
)
;
CtTypeReference
<
?
>
boundType
=
actTypeArgOfReturnType
.
getBoundingType
(
)
;
assertEquals
(
"T"
,
boundType
.
getSimpleName
(
)
)
;
assertTrue
(
boundType
instanceof
CtTypeParameterReference
)
;
}
{
CtMethod
method
=
type
.
getMethodsByName
(
"getAssignment"
)
.
get
(
0
)
;
CtTypeReference
<
?
>
returnType
=
method
.
getType
(
)
;
assertEquals
(
CtExpression
.
class
.
getName
(
)
,
returnType
.
getQualifiedName
(
)
)
;
assertEquals
(
1
,
returnType
.
getActualTypeArguments
(
)
.
size
(
)
)
;
CtTypeParameterReference
actTypeArgOfReturnType
=
(
CtTypeParameterReference
)
returnType
.
getActualTypeArguments
(
)
.
get
(
0
)
;
assertEquals
(
"A"
,
actTypeArgOfReturnType
.
getSimpleName
(
)
)
;
CtTypeReference
<
?
>
boundType
=
actTypeArgOfReturnType
.
getBoundingType
(
)
;
assertEquals
(
"T"
,
boundType
.
getSimpleName
(
)
)
;
assertTrue
(
boundType
instanceof
CtTypeParameterReference
)
;
}
}
;
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
addInputResource
(
new
FileSystemFile
(
new
File
(
"./src/main/java/spoon/support/reflect/code/CtAssignmentImpl.java"
)
)
)
;
launcher
.
buildModel
(
)
;
CtClass
<
?
>
classFromSources
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
CtAssignmentImpl
.
class
.
getName
(
)
)
;
assertFalse
(
classFromSources
.
isShadow
(
)
)
;
checker
.
accept
(
classFromSources
)
;
CtType
<
?
>
classFromReflection
=
createFactory
(
)
.
Class
(
)
.
get
(
CtAssignmentImpl
.
class
)
;
assertTrue
(
classFromReflection
.
isShadow
(
)
)
;
checker
.
accept
(
classFromReflection
)
;
}
