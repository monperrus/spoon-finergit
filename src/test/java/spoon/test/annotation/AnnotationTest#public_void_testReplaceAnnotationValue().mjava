@Test
public
void
testReplaceAnnotationValue
(
)
throws
Exception
{
CtType
<
?
>
type
=
this
.
factory
.
Type
(
)
.
get
(
"spoon.test.annotation.testclasses.Main"
)
;
CtMethod
<
?
>
m1
=
type
.
getElements
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"m1"
)
)
.
get
(
0
)
;
List
<
CtAnnotation
<
?
Annotation
>
>
annotations
=
m1
.
getAnnotations
(
)
;
assertEquals
(
1
,
annotations
.
size
(
)
)
;
CtAnnotation
<
?
>
a
=
annotations
.
get
(
0
)
;
AnnotParamTypes
annot
=
(
AnnotParamTypes
)
a
.
getActualAnnotation
(
)
;
CtExpression
integerValue
=
a
.
getValue
(
"integer"
)
;
assertEquals
(
42
,
(
(
CtLiteral
<
Integer
>
)
integerValue
)
.
getValue
(
)
.
intValue
(
)
)
;
assertEquals
(
42
,
annot
.
integer
(
)
)
;
integerValue
.
replace
(
factory
.
createLiteral
(
17
)
)
;
CtExpression
newIntegerValue
=
a
.
getValue
(
"integer"
)
;
assertEquals
(
17
,
(
(
CtLiteral
<
Integer
>
)
newIntegerValue
)
.
getValue
(
)
.
intValue
(
)
)
;
assertEquals
(
17
,
annot
.
integer
(
)
)
;
try
{
a
.
getValue
(
"integer"
)
.
replace
(
Arrays
.
asList
(
factory
.
createLiteral
(
18
)
,
null
)
)
;
fail
(
)
;
}
catch
(
SpoonException
e
)
{
}
a
.
getValue
(
"integer"
)
.
delete
(
)
;
assertNull
(
a
.
getValue
(
"integer"
)
)
;
try
{
annot
.
integer
(
)
;
fail
(
)
;
}
catch
(
NullPointerException
e
)
{
}
a
.
getValue
(
"string"
)
.
replace
(
(
CtElement
)
null
)
;
assertNull
(
a
.
getValue
(
"string"
)
)
;
assertNull
(
annot
.
string
(
)
)
;
a
.
getValue
(
"clazz"
)
.
replace
(
Collections
.
singletonList
(
null
)
)
;
assertNull
(
a
.
getValue
(
"clazz"
)
)
;
assertNull
(
annot
.
clazz
(
)
)
;
assertEquals
(
1
,
annot
.
integers
(
)
.
length
)
;
assertEquals
(
42
,
annot
.
integers
(
)
[
0
]
)
;
CtNewArray
<
?
>
integersNewArray
=
(
CtNewArray
)
a
.
getValue
(
"integers"
)
;
integersNewArray
.
getElements
(
)
.
get
(
0
)
.
replace
(
Arrays
.
asList
(
null
,
factory
.
createLiteral
(
101
)
,
null
,
factory
.
createLiteral
(
102
)
)
)
;
assertEquals
(
2
,
annot
.
integers
(
)
.
length
)
;
assertEquals
(
101
,
annot
.
integers
(
)
[
0
]
)
;
assertEquals
(
102
,
annot
.
integers
(
)
[
1
]
)
;
}
