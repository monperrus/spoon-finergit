@Test
public
void
testUsageOfParametersInTypeAnnotation
(
)
throws
Exception
{
final
CtClass
<
?
>
ctClass
=
(
CtClass
<
?
>
)
this
.
factory
.
Type
(
)
.
get
(
"spoon.test.annotation.testclasses.AnnotationsAppliedOnAnyTypeInAClass"
)
;
final
CtMethod
<
?
>
method
=
ctClass
.
getMethodsByName
(
"m5"
)
.
get
(
0
)
;
final
String
integerParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(integer = 1)"
+
System
.
lineSeparator
(
)
+
"T> list"
;
assertEquals
(
"integer parameter in type annotation"
,
integerParam
,
method
.
getBody
(
)
.
getStatement
(
0
)
.
toString
(
)
)
;
final
String
arrayIntegerParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(integers = { 1 })"
+
System
.
lineSeparator
(
)
+
"T> list2"
;
assertEquals
(
"array of integers parameter in type annotation"
,
arrayIntegerParam
,
method
.
getBody
(
)
.
getStatement
(
1
)
.
toString
(
)
)
;
final
String
stringParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(string = \"\")"
+
System
.
lineSeparator
(
)
+
"T> list3"
;
assertEquals
(
"string parameter in type annotation"
,
stringParam
,
method
.
getBody
(
)
.
getStatement
(
2
)
.
toString
(
)
)
;
final
String
arrayStringParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(strings = { \"\" })"
+
System
.
lineSeparator
(
)
+
"T> list4"
;
assertEquals
(
"array of strings parameter in type annotation"
,
arrayStringParam
,
method
.
getBody
(
)
.
getStatement
(
3
)
.
toString
(
)
)
;
final
String
classParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(clazz = java.lang.String.class)"
+
System
.
lineSeparator
(
)
+
"T> list5"
;
assertEquals
(
"class parameter in type annotation"
,
classParam
,
method
.
getBody
(
)
.
getStatement
(
4
)
.
toString
(
)
)
;
final
String
arrayClassParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(classes = { java.lang.String.class })"
+
System
.
lineSeparator
(
)
+
"T> list6"
;
assertEquals
(
"array of classes parameter in type annotation"
,
arrayClassParam
,
method
.
getBody
(
)
.
getStatement
(
5
)
.
toString
(
)
)
;
final
String
primitiveParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(b = true)"
+
System
.
lineSeparator
(
)
+
"T> list7"
;
assertEquals
(
"primitive parameter in type annotation"
,
primitiveParam
,
method
.
getBody
(
)
.
getStatement
(
6
)
.
toString
(
)
)
;
final
String
enumParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(e = spoon.test.annotation.testclasses.AnnotParamTypeEnum.R)"
+
System
.
lineSeparator
(
)
+
"T> list8"
;
assertEquals
(
"enum parameter in type annotation"
,
enumParam
,
method
.
getBody
(
)
.
getStatement
(
7
)
.
toString
(
)
)
;
final
String
annotationParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(ia = @spoon.test.annotation.testclasses.InnerAnnot(value = \"\"))"
+
System
.
lineSeparator
(
)
+
"T> list9"
;
assertEquals
(
"annotation parameter in type annotation"
,
annotationParam
,
method
.
getBody
(
)
.
getStatement
(
8
)
.
toString
(
)
)
;
final
String
arrayAnnotationParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(ias = { @spoon.test.annotation.testclasses.InnerAnnot(value = \"\") })"
+
System
.
lineSeparator
(
)
+
"T> list10"
;
assertEquals
(
"array of annotations parameter in type annotation"
,
arrayAnnotationParam
,
method
.
getBody
(
)
.
getStatement
(
9
)
.
toString
(
)
)
;
final
String
complexArrayParam
=
"java.util.List<@spoon.test.annotation.testclasses.TypeAnnotation(inceptions = { @spoon.test.annotation.testclasses.Inception(value = @spoon.test.annotation.testclasses.InnerAnnot(value = \"\")"
+
System
.
lineSeparator
(
)
+
", values = { @spoon.test.annotation.testclasses.InnerAnnot(value = \"\") }) })"
+
System
.
lineSeparator
(
)
+
"T> list11"
;
assertEquals
(
"array of complexes parameters in type annotation"
,
complexArrayParam
,
method
.
getBody
(
)
.
getStatement
(
10
)
.
toString
(
)
)
;
}
