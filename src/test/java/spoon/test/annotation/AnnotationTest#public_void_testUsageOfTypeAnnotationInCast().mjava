@Test
public
void
testUsageOfTypeAnnotationInCast
(
)
throws
Exception
{
final
CtClass
<
?
>
ctClass
=
(
CtClass
<
?
>
)
this
.
factory
.
Type
(
)
.
get
(
"spoon.test.annotation.testclasses.AnnotationsAppliedOnAnyTypeInAClass"
)
;
final
CtReturn
<
?
>
returns
=
ctClass
.
getElements
(
new
AbstractFilter
<
CtReturn
<
?
>
>
(
CtReturn
.
class
)
{
@Override
public
boolean
matches
(
CtReturn
<
?
>
element
)
{
return
!
element
.
getReturnedExpression
(
)
.
getTypeCasts
(
)
.
isEmpty
(
)
;
}
}
)
.
get
(
0
)
;
final
CtExpression
<
?
>
returnedExpression
=
returns
.
getReturnedExpression
(
)
;
final
List
<
CtAnnotation
<
?
Annotation
>
>
typeAnnotations
=
returnedExpression
.
getTypeCasts
(
)
.
get
(
0
)
.
getTypeAnnotations
(
)
;
assertEquals
(
"Cast with a type annotation must have it in its model"
,
1
,
typeAnnotations
.
size
(
)
)
;
assertEquals
(
"Type annotation in the cast must be typed by TypeAnnotation"
,
TypeAnnotation
.
class
,
typeAnnotations
.
get
(
0
)
.
getAnnotationType
(
)
.
getActualClass
(
)
)
;
assertEquals
(
"Cast with an type annotation must be well printed"
,
"((java.lang.@spoon.test.annotation.testclasses.TypeAnnotation String)(s))"
,
returnedExpression
.
toString
(
)
)
;
}
