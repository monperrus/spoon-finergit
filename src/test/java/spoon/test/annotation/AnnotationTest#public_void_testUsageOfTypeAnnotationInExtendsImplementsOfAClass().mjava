@Test
public
void
testUsageOfTypeAnnotationInExtendsImplementsOfAClass
(
)
throws
Exception
{
final
CtClass
<
?
>
ctClass
=
(
CtClass
<
?
>
)
this
.
factory
.
Type
(
)
.
get
(
"spoon.test.annotation.testclasses.AnnotationsAppliedOnAnyTypeInAClass"
)
;
final
CtClass
<
?
>
innerClass
=
ctClass
.
getElements
(
new
NameFilter
<
CtClass
<
?
>
>
(
"DummyClass"
)
)
.
get
(
0
)
;
final
CtTypeReference
<
?
>
extendsActual
=
innerClass
.
getSuperclass
(
)
;
final
List
<
CtAnnotation
<
?
Annotation
>
>
extendsTypeAnnotations
=
extendsActual
.
getTypeAnnotations
(
)
;
final
String
superClassExpected
=
"spoon.test.annotation.testclasses.@spoon.test.annotation.testclasses.TypeAnnotation AnnotArrayInnerClass"
;
assertEquals
(
"Extends with a type annotation must have it in its model"
,
1
,
extendsTypeAnnotations
.
size
(
)
)
;
assertEquals
(
"Type annotation on a extends must be typed by TypeAnnotation"
,
TypeAnnotation
.
class
,
extendsTypeAnnotations
.
get
(
0
)
.
getAnnotationType
(
)
.
getActualClass
(
)
)
;
assertEquals
(
"Extends with an type annotation must be well printed"
,
superClassExpected
,
extendsActual
.
toString
(
)
)
;
final
Set
<
CtTypeReference
<
?
>
>
superInterfaces
=
innerClass
.
getSuperInterfaces
(
)
;
final
CtTypeReference
<
?
>
firstSuperInterface
=
superInterfaces
.
toArray
(
new
CtTypeReference
<
?
>
[
]
)
[
0
]
;
final
List
<
CtAnnotation
<
?
Annotation
>
>
implementsTypeAnnotations
=
firstSuperInterface
.
getTypeAnnotations
(
)
;
final
String
superInterfaceExpected
=
"spoon.test.annotation.testclasses.@spoon.test.annotation.testclasses.TypeAnnotation BasicAnnotation"
;
assertEquals
(
"Implements with a type annotation must have it in its model"
,
1
,
implementsTypeAnnotations
.
size
(
)
)
;
assertEquals
(
"Type annotation on a extends must be typed by TypeAnnotation"
,
TypeAnnotation
.
class
,
implementsTypeAnnotations
.
get
(
0
)
.
getAnnotationType
(
)
.
getActualClass
(
)
)
;
assertEquals
(
"Extends with an type annotation must be well printed"
,
superInterfaceExpected
,
firstSuperInterface
.
toString
(
)
)
;
final
CtEnum
<
?
>
enumActual
=
ctClass
.
getElements
(
new
NameFilter
<
CtEnum
<
?
>
>
(
"DummyEnum"
)
)
.
get
(
0
)
;
final
Set
<
CtTypeReference
<
?
>
>
superInterfacesOfEnum
=
enumActual
.
getSuperInterfaces
(
)
;
final
CtTypeReference
<
?
>
firstSuperInterfaceOfEnum
=
superInterfacesOfEnum
.
toArray
(
new
CtTypeReference
<
?
>
[
]
)
[
0
]
;
final
List
<
CtAnnotation
<
?
Annotation
>
>
enumTypeAnnotations
=
firstSuperInterfaceOfEnum
.
getTypeAnnotations
(
)
;
final
String
enumExpected
=
"public enum DummyEnum implements spoon.test.annotation.testclasses.@spoon.test.annotation.testclasses.TypeAnnotation BasicAnnotation {"
+
System
.
lineSeparator
(
)
+
"    ;"
+
System
.
lineSeparator
(
)
+
"}"
;
assertEquals
(
"Implements in a enum with a type annotation must have it in its model"
,
1
,
enumTypeAnnotations
.
size
(
)
)
;
assertEquals
(
"Type annotation on a implements in a enum must be typed by TypeAnnotation"
,
TypeAnnotation
.
class
,
enumTypeAnnotations
.
get
(
0
)
.
getAnnotationType
(
)
.
getActualClass
(
)
)
;
assertEquals
(
"Implements in a enum with an type annotation must be well printed"
,
enumExpected
,
enumActual
.
toString
(
)
)
;
final
CtInterface
<
?
>
interfaceActual
=
ctClass
.
getElements
(
new
NameFilter
<
CtInterface
<
?
>
>
(
"DummyInterface"
)
)
.
get
(
0
)
;
final
Set
<
CtTypeReference
<
?
>
>
superInterfacesOfInterface
=
interfaceActual
.
getSuperInterfaces
(
)
;
final
CtTypeReference
<
?
>
firstSuperInterfaceOfInterface
=
superInterfacesOfInterface
.
toArray
(
new
CtTypeReference
<
?
>
[
]
)
[
0
]
;
final
List
<
CtAnnotation
<
?
Annotation
>
>
interfaceTypeAnnotations
=
firstSuperInterfaceOfInterface
.
getTypeAnnotations
(
)
;
final
String
interfaceExpected
=
"public interface DummyInterface extends spoon.test.annotation.testclasses.@spoon.test.annotation.testclasses.TypeAnnotation BasicAnnotation {}"
;
assertEquals
(
"Implements in a interface with a type annotation must have it in its model"
,
1
,
interfaceTypeAnnotations
.
size
(
)
)
;
assertEquals
(
"Type annotation on a implements in a enum must be typed by TypeAnnotation"
,
TypeAnnotation
.
class
,
interfaceTypeAnnotations
.
get
(
0
)
.
getAnnotationType
(
)
.
getActualClass
(
)
)
;
assertEquals
(
"Implements in a interface with an type annotation must be well printed"
,
interfaceExpected
,
interfaceActual
.
toString
(
)
)
;
}
