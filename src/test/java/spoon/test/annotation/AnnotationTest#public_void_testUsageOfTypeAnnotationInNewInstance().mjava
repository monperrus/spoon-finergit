@Test
public
void
testUsageOfTypeAnnotationInNewInstance
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java"
)
;
launcher
.
buildModel
(
)
;
Factory
factory
=
launcher
.
getFactory
(
)
;
final
CtClass
<
?
>
ctClass
=
(
CtClass
<
?
>
)
factory
.
Type
(
)
.
get
(
"spoon.test.annotation.testclasses.AnnotationsAppliedOnAnyTypeInAClass"
)
;
final
CtConstructorCall
<
?
>
ctConstructorCall
=
ctClass
.
getElements
(
new
AbstractFilter
<
CtConstructorCall
<
?
>
>
(
CtConstructorCall
.
class
)
{
@Override
public
boolean
matches
(
CtConstructorCall
<
?
>
element
)
{
return
"String"
.
equals
(
element
.
getType
(
)
.
getSimpleName
(
)
)
;
}
}
)
.
get
(
0
)
;
final
List
<
CtAnnotation
<
?
Annotation
>
>
typeAnnotations
=
ctConstructorCall
.
getType
(
)
.
getAnnotations
(
)
;
assertEquals
(
"Type of the new class must use an annotation"
,
1
,
typeAnnotations
.
size
(
)
)
;
assertEquals
(
"Type of the new class is typed by TypeAnnotation"
,
TypeAnnotation
.
class
,
typeAnnotations
.
get
(
0
)
.
getAnnotationType
(
)
.
getActualClass
(
)
)
;
assertEquals
(
CtAnnotatedElementType
.
TYPE_USE
,
typeAnnotations
.
get
(
0
)
.
getAnnotatedElementType
(
)
)
;
assertEquals
(
"New class with an type annotation must be well printed"
,
"new java.lang.@spoon.test.annotation.testclasses.TypeAnnotation"
+
System
.
lineSeparator
(
)
+
"String()"
,
ctConstructorCall
.
toString
(
)
)
;
}
