@Test
public
void
testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java"
)
;
launcher
.
buildModel
(
)
;
Factory
factory
=
launcher
.
getFactory
(
)
;
final
CtClass
<
?
>
ctClass
=
(
CtClass
<
?
>
)
factory
.
Type
(
)
.
get
(
"spoon.test.annotation.testclasses.AnnotationsAppliedOnAnyTypeInAClass"
)
;
final
CtClass
<
?
>
genericClass
=
ctClass
.
getElements
(
new
NamedElementFilter
<
>
(
CtClass
.
class
,
"DummyGenericClass"
)
)
.
get
(
0
)
;
final
List
<
CtTypeParameter
>
typeParameters
=
genericClass
.
getFormalCtTypeParameters
(
)
;
assertEquals
(
"Generic class has 2 generics parameters."
,
2
,
typeParameters
.
size
(
)
)
;
assertEquals
(
"First generic type must have type annotation"
,
"@spoon.test.annotation.testclasses.TypeAnnotation"
+
System
.
lineSeparator
(
)
+
"T"
,
typeParameters
.
get
(
0
)
.
toString
(
)
)
;
assertEquals
(
"Second generic type must have type annotation"
,
"@spoon.test.annotation.testclasses.TypeAnnotation"
+
System
.
lineSeparator
(
)
+
"K"
,
typeParameters
.
get
(
1
)
.
toString
(
)
)
;
final
CtTypeReference
<
?
>
superInterface
=
genericClass
.
getSuperInterfaces
(
)
.
toArray
(
new
CtTypeReference
<
?
>
[
]
)
[
0
]
;
final
String
expected
=
"spoon.test.annotation.testclasses.BasicAnnotation<@spoon.test.annotation.testclasses.TypeAnnotation"
+
System
.
lineSeparator
(
)
+
"T>"
;
assertEquals
(
"Super interface has a generic type with type annotation"
,
expected
,
superInterface
.
toString
(
)
)
;
}
