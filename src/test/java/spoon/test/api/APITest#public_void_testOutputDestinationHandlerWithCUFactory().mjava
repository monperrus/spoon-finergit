@Test
public
void
testOutputDestinationHandlerWithCUFactory
(
)
throws
IOException
{
final
File
outputDest
=
Files
.
createTempDirectory
(
"spoon"
)
.
toFile
(
)
;
final
OutputDestinationHandler
outputDestinationHandler
=
new
OutputDestinationHandler
(
)
{
@Override
public
Path
getOutputPath
(
CtModule
module
,
CtPackage
pack
,
CtType
type
)
{
String
path
=
""
;
if
(
module
!=
null
)
{
path
=
module
.
getSimpleName
(
)
+
"_"
;
if
(
pack
==
null
&&
type
==
null
)
{
path
=
"module-info.java"
;
}
}
if
(
pack
!=
null
)
{
path
=
pack
.
getQualifiedName
(
)
+
"_"
;
if
(
type
==
null
)
{
path
=
"package-info.java"
;
}
}
if
(
type
!=
null
)
{
path
=
type
.
getSimpleName
(
)
+
".java"
;
}
return
new
File
(
outputDest
,
path
)
.
toPath
(
)
;
}
@Override
public
File
getDefaultOutputDirectory
(
)
{
return
outputDest
;
}
}
;
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setComplianceLevel
(
9
)
;
launcher
.
getEnvironment
(
)
.
setOutputDestinationHandler
(
outputDestinationHandler
)
;
Factory
factory
=
launcher
.
getFactory
(
)
;
CtModule
module
=
factory
.
Module
(
)
.
getOrCreate
(
"simplemodule"
)
;
CompilationUnit
cuModule
=
factory
.
CompilationUnit
(
)
.
getOrCreate
(
module
)
;
CtPackage
ctPackage
=
factory
.
Package
(
)
.
getOrCreate
(
"my.beautiful.pack"
)
;
module
.
setRootPackage
(
factory
.
Package
(
)
.
get
(
"my"
)
)
;
CtType
ctType
=
factory
.
Class
(
)
.
create
(
"my.beautiful.pack.SuperClass"
)
;
CompilationUnit
cuClass
=
factory
.
CompilationUnit
(
)
.
getOrCreate
(
ctType
)
;
CompilationUnit
cuPackage
=
factory
.
CompilationUnit
(
)
.
getOrCreate
(
ctPackage
)
;
File
moduleFile
=
new
File
(
outputDest
.
getCanonicalPath
(
)
,
"simplemodule_module-info.java"
)
;
File
packageFile
=
new
File
(
outputDest
.
getCanonicalPath
(
)
,
"simplemodule_my.beautiful.pack_package-info.java"
)
;
File
classFile
=
new
File
(
outputDest
.
getCanonicalPath
(
)
,
"simplemodule_my.beautiful.pack_SuperClass.java"
)
;
assertEquals
(
moduleFile
,
cuModule
.
getFile
(
)
)
;
assertEquals
(
packageFile
,
cuPackage
.
getFile
(
)
)
;
assertEquals
(
classFile
,
cuClass
.
getFile
(
)
)
;
Set
<
String
>
units
=
launcher
.
getFactory
(
)
.
CompilationUnit
(
)
.
getMap
(
)
.
keySet
(
)
;
assertEquals
(
3
,
units
.
size
(
)
)
;
assertTrue
(
"Module file not contained ("
+
moduleFile
.
getCanonicalPath
(
)
+
"). \nContent: "
+
StringUtils
.
join
(
units
,
"\n"
)
,
units
.
contains
(
moduleFile
.
getCanonicalPath
(
)
)
)
;
assertTrue
(
"Package file not contained ("
+
packageFile
.
getCanonicalPath
(
)
+
"). \nContent: "
+
StringUtils
.
join
(
units
,
"\n"
)
,
units
.
contains
(
packageFile
.
getCanonicalPath
(
)
)
)
;
assertTrue
(
"Class file not contained ("
+
classFile
.
getCanonicalPath
(
)
+
"). \nContent: "
+
StringUtils
.
join
(
units
,
"\n"
)
,
units
.
contains
(
classFile
.
getCanonicalPath
(
)
)
)
;
}
