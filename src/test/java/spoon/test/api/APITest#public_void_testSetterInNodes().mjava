@Test
public
void
testSetterInNodes
(
)
throws
Exception
{
class
SetterMethodWithoutCollectionsFilter
extends
TypeFilter
<
CtMethod
<
?
>
>
{
private
final
List
<
CtTypeReference
<
?
>
>
collections
=
new
ArrayList
<
>
(
4
)
;
public
SetterMethodWithoutCollectionsFilter
(
Factory
factory
)
{
super
(
CtMethod
.
class
)
;
for
(
Class
<
?
>
aCollectionClass
:
Arrays
.
asList
(
Collection
.
class
,
List
.
class
,
Map
.
class
,
Set
.
class
)
)
{
collections
.
add
(
factory
.
Type
(
)
.
createReference
(
aCollectionClass
)
)
;
}
}
@Override
public
boolean
matches
(
CtMethod
<
?
>
element
)
{
return
isSetterMethod
(
element
)
&&
!
isSubTypeOfCollection
(
element
)
&&
super
.
matches
(
element
)
;
}
private
boolean
isSubTypeOfCollection
(
CtMethod
<
?
>
element
)
{
final
CtTypeReference
<
?
>
type
=
element
.
getParameters
(
)
.
get
(
0
)
.
getType
(
)
;
for
(
CtTypeReference
<
?
>
aCollectionRef
:
collections
)
{
if
(
type
.
isSubtypeOf
(
aCollectionRef
)
||
type
.
equals
(
aCollectionRef
)
)
{
return
true
;
}
}
return
false
;
}
private
boolean
isSetterMethod
(
CtMethod
<
?
>
element
)
{
final
List
<
CtParameter
<
?
>
>
parameters
=
element
.
getParameters
(
)
;
if
(
parameters
.
size
(
)
!=
1
)
{
return
false
;
}
final
CtTypeReference
<
?
>
typeParameter
=
parameters
.
get
(
0
)
.
getType
(
)
;
final
CtTypeReference
<
CtElement
>
ctElementRef
=
element
.
getFactory
(
)
.
Type
(
)
.
createReference
(
CtElement
.
class
)
;
if
(
!
typeParameter
.
isSubtypeOf
(
ctElementRef
)
||
!
typeParameter
.
equals
(
ctElementRef
)
)
{
return
false
;
}
return
element
.
getSimpleName
(
)
.
startsWith
(
"set"
)
&&
element
.
getDeclaringType
(
)
.
getSimpleName
(
)
.
startsWith
(
"Ct"
)
&&
element
.
getBody
(
)
!=
null
;
}
}
class
CheckNotNullToSetParentMatcher
extends
CtElementImpl
{
public
TemplateParameter
<
CtVariableAccess
<
?
>
>
_parameter_access_
;
public
void
matcher
(
)
{
if
(
_parameter_access_
.
S
(
)
!=
null
)
{
_parameter_access_
.
S
(
)
.
setParent
(
this
)
;
}
}
@Override
@Local
public
void
accept
(
CtVisitor
visitor
)
{
}
}
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
}
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/reflect/code"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/reflect/declaration"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/reflect/reference"
)
;
launcher
.
addInputResource
(
"./src/test/java/"
+
this
.
getClass
(
)
.
getCanonicalName
(
)
.
replace
(
"."
,
"/"
)
+
".java"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/"
)
;
launcher
.
buildModel
(
)
;
CtClass
<
CheckNotNullToSetParentMatcher
>
matcherCtClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
CheckNotNullToSetParentMatcher
.
class
)
;
CtIf
templateRoot
=
matcherCtClass
.
getMethod
(
"matcher"
)
.
getBody
(
)
.
getStatement
(
0
)
;
final
List
<
CtMethod
<
?
>
>
setters
=
Query
.
getElements
(
launcher
.
getFactory
(
)
,
new
SetterMethodWithoutCollectionsFilter
(
launcher
.
getFactory
(
)
)
)
;
for
(
CtStatement
statement
:
setters
.
stream
(
)
.
map
(
(
Function
<
CtMethod
<
?
>
,
CtStatement
>
)
ctMethod
->
ctMethod
.
getBody
(
)
.
getStatement
(
0
)
)
.
collect
(
Collectors
.
toList
(
)
)
)
{
assertTrue
(
"Check the method "
+
statement
.
getParent
(
CtMethod
.
class
)
.
getSignature
(
)
+
" in the declaring class "
+
statement
.
getParent
(
CtType
.
class
)
.
getQualifiedName
(
)
,
statement
instanceof
CtIf
)
;
CtIf
ifCondition
=
(
CtIf
)
statement
;
TemplateMatcher
matcher
=
new
TemplateMatcher
(
templateRoot
)
;
assertEquals
(
1
,
matcher
.
find
(
ifCondition
)
.
size
(
)
)
;
}
}
