private
void
assertConceptsEqual
(
MetamodelConcept
expectedConcept
,
MetamodelConcept
runtimeConcept
)
{
assertEquals
(
expectedConcept
.
getName
(
)
,
runtimeConcept
.
getName
(
)
)
;
if
(
expectedConcept
.
getImplementationClass
(
)
==
null
)
{
assertNull
(
runtimeConcept
.
getImplementationClass
(
)
)
;
}
else
{
assertNotNull
(
runtimeConcept
.
getImplementationClass
(
)
)
;
assertEquals
(
expectedConcept
.
getImplementationClass
(
)
.
getActualClass
(
)
,
runtimeConcept
.
getImplementationClass
(
)
.
getActualClass
(
)
)
;
}
assertEquals
(
expectedConcept
.
getMetamodelInterface
(
)
.
getActualClass
(
)
,
runtimeConcept
.
getMetamodelInterface
(
)
.
getActualClass
(
)
)
;
assertEquals
(
expectedConcept
.
getKind
(
)
,
runtimeConcept
.
getKind
(
)
)
;
assertEquals
(
expectedConcept
.
getSuperConcepts
(
)
.
size
(
)
,
runtimeConcept
.
getSuperConcepts
(
)
.
size
(
)
)
;
for
(
int
i
=
0
;
i
<
expectedConcept
.
getSuperConcepts
(
)
.
size
(
)
;
i
++
)
{
assertConceptsEqual
(
expectedConcept
.
getSuperConcepts
(
)
.
get
(
i
)
,
runtimeConcept
.
getSuperConcepts
(
)
.
get
(
i
)
)
;
}
Map
<
CtRole
,
MetamodelProperty
>
expectedRoleToProperty
=
new
HashMap
(
expectedConcept
.
getRoleToProperty
(
)
)
;
for
(
Map
.
Entry
<
CtRole
,
MetamodelProperty
>
e
:
runtimeConcept
.
getRoleToProperty
(
)
.
entrySet
(
)
)
{
MetamodelProperty
runtimeProperty
=
e
.
getValue
(
)
;
MetamodelProperty
expectedProperty
=
expectedRoleToProperty
.
remove
(
e
.
getKey
(
)
)
;
assertPropertiesEqual
(
expectedProperty
,
runtimeProperty
)
;
}
assertEquals
(
0
,
expectedRoleToProperty
.
size
(
)
)
;
}
