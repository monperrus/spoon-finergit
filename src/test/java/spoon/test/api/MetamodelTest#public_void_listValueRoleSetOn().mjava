@Test
public
void
listValueRoleSetOn
(
)
{
Launcher
launcher
=
new
Launcher
(
)
;
Factory
factory
=
launcher
.
getFactory
(
)
;
CtClass
<
?
>
ctClass
=
factory
.
Class
(
)
.
create
(
"some.test.TestClass"
)
;
RoleHandler
rh
=
RoleHandlerHelper
.
getRoleHandler
(
ctClass
.
getClass
(
)
,
CtRole
.
TYPE_MEMBER
)
;
List
<
CtTypeMember
>
typeMembers
=
rh
.
asList
(
ctClass
)
;
assertEquals
(
0
,
typeMembers
.
size
(
)
)
;
CtField
<
?
>
field1
=
createField
(
factory
,
"field1"
)
;
CtField
<
?
>
field2
=
createField
(
factory
,
"field2"
)
;
CtField
<
?
>
field3
=
createField
(
factory
,
"field3"
)
;
assertEquals
(
0
,
typeMembers
.
size
(
)
)
;
typeMembers
.
add
(
field1
)
;
assertEquals
(
1
,
typeMembers
.
size
(
)
)
;
assertEquals
(
1
,
ctClass
.
getTypeMembers
(
)
.
size
(
)
)
;
assertSame
(
ctClass
,
field1
.
getDeclaringType
(
)
)
;
assertThat
(
Arrays
.
asList
(
"field1"
)
,
is
(
ctClass
.
filterChildren
(
new
TypeFilter
(
CtField
.
class
)
)
.
map
(
(
CtField
e
)
->
e
.
getSimpleName
(
)
)
.
list
(
)
)
)
;
typeMembers
.
add
(
field2
)
;
assertSame
(
ctClass
,
field2
.
getDeclaringType
(
)
)
;
assertThat
(
Arrays
.
asList
(
"field1"
,
"field2"
)
,
is
(
ctClass
.
filterChildren
(
new
TypeFilter
(
CtField
.
class
)
)
.
map
(
(
CtField
e
)
->
e
.
getSimpleName
(
)
)
.
list
(
)
)
)
;
typeMembers
.
set
(
0
,
field3
)
;
assertSame
(
ctClass
,
field3
.
getDeclaringType
(
)
)
;
assertThat
(
Arrays
.
asList
(
"field3"
,
"field2"
)
,
is
(
ctClass
.
filterChildren
(
new
TypeFilter
(
CtField
.
class
)
)
.
map
(
(
CtField
e
)
->
e
.
getSimpleName
(
)
)
.
list
(
)
)
)
;
typeMembers
.
set
(
1
,
field1
)
;
assertThat
(
Arrays
.
asList
(
"field3"
,
"field1"
)
,
is
(
ctClass
.
filterChildren
(
new
TypeFilter
(
CtField
.
class
)
)
.
map
(
(
CtField
e
)
->
e
.
getSimpleName
(
)
)
.
list
(
)
)
)
;
assertSame
(
field3
,
typeMembers
.
remove
(
0
)
)
;
assertThat
(
Arrays
.
asList
(
"field1"
)
,
is
(
ctClass
.
filterChildren
(
new
TypeFilter
(
CtField
.
class
)
)
.
map
(
(
CtField
e
)
->
e
.
getSimpleName
(
)
)
.
list
(
)
)
)
;
assertFalse
(
typeMembers
.
remove
(
field2
)
)
;
assertThat
(
Arrays
.
asList
(
"field1"
)
,
is
(
ctClass
.
filterChildren
(
new
TypeFilter
(
CtField
.
class
)
)
.
map
(
(
CtField
e
)
->
e
.
getSimpleName
(
)
)
.
list
(
)
)
)
;
assertTrue
(
typeMembers
.
remove
(
field1
)
)
;
assertThat
(
Arrays
.
asList
(
)
,
is
(
ctClass
.
filterChildren
(
new
TypeFilter
(
CtField
.
class
)
)
.
map
(
(
CtField
e
)
->
e
.
getSimpleName
(
)
)
.
list
(
)
)
)
;
}
