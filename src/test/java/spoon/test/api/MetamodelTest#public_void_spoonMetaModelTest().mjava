@Test
public
void
spoonMetaModelTest
(
)
{
Factory
factory
=
new
FactoryImpl
(
new
DefaultCoreFactory
(
)
,
new
StandardEnvironment
(
)
)
;
Metamodel
mm
=
Metamodel
.
getInstance
(
)
;
List
<
String
>
problems
=
new
ArrayList
<
>
(
)
;
Set
<
CtRole
>
unhandledRoles
=
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
values
(
)
)
)
;
mm
.
getConcepts
(
)
.
forEach
(
mmConcept
->
{
mmConcept
.
getRoleToProperty
(
)
.
forEach
(
(
role
,
mmField
)
->
{
unhandledRoles
.
remove
(
role
)
;
if
(
mmField
.
getMethod
(
MMMethodKind
.
GET
)
==
null
)
{
problems
.
add
(
"Missing getter for "
+
mmField
.
getOwner
(
)
.
getName
(
)
+
" and CtRole."
+
mmField
.
getRole
(
)
)
;
}
if
(
mmField
.
getMethod
(
MMMethodKind
.
SET
)
==
null
)
{
if
(
new
ClassTypingContext
(
mmConcept
.
getMetamodelInterface
(
)
)
.
isSubtypeOf
(
factory
.
Type
(
)
.
createReference
(
CtReference
.
class
)
)
==
false
&&
mmConcept
.
getName
(
)
.
equals
(
"CtTypeInformation"
)
==
false
)
{
problems
.
add
(
"Missing setter for "
+
mmField
.
getOwner
(
)
.
getName
(
)
+
" and CtRole."
+
mmField
.
getRole
(
)
)
;
}
}
assertFalse
(
"Value type of Field "
+
mmField
.
toString
(
)
+
" is implicit"
,
mmField
.
getTypeOfField
(
)
.
isImplicit
(
)
)
;
assertFalse
(
"Item value type of Field "
+
mmField
.
toString
(
)
+
" is implicit"
,
mmField
.
getTypeofItems
(
)
.
isImplicit
(
)
)
;
mmField
.
getMethods
(
MMMethodKind
.
OTHER
)
.
forEach
(
mmethod
->
mmethod
.
getDeclaredMethods
(
)
.
forEach
(
ctMethod
->
problems
.
add
(
"Unhandled method signature: "
+
ctMethod
.
getDeclaringType
(
)
.
getSimpleName
(
)
+
"#"
+
ctMethod
.
getSignature
(
)
)
)
)
;
}
)
;
}
)
;
unhandledRoles
.
forEach
(
it
->
problems
.
add
(
"Unused CtRole."
+
it
.
name
(
)
)
)
;
}
