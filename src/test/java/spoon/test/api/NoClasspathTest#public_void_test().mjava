@Test
public
void
test
(
)
throws
Exception
{
Launcher
spoon
=
new
Launcher
(
)
;
spoon
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
spoon
.
getEnvironment
(
)
.
setLevel
(
"OFF"
)
;
spoon
.
addInputResource
(
"./src/test/resources/spoon/test/noclasspath/fields"
)
;
spoon
.
getEnvironment
(
)
.
getDefaultFileGenerator
(
)
.
setOutputDirectory
(
new
File
(
"target/spooned/apitest"
)
)
;
spoon
.
run
(
)
;
Factory
factory
=
spoon
.
getFactory
(
)
;
CtClass
<
Object
>
clazz
=
factory
.
Class
(
)
.
get
(
"Foo"
)
;
assertEquals
(
"Foo"
,
clazz
.
getSimpleName
(
)
)
;
CtTypeReference
<
?
>
superclass
=
clazz
.
getSuperclass
(
)
;
assertEquals
(
"Unknown"
,
superclass
.
getSimpleName
(
)
)
;
try
{
superclass
.
getActualClass
(
)
;
fail
(
)
;
}
catch
(
SpoonClassNotFoundException
e
)
{
}
assertNull
(
superclass
.
getDeclaration
(
)
)
;
try
{
superclass
.
getActualClass
(
)
;
fail
(
)
;
}
catch
(
SpoonException
e
)
{
}
{
CtMethod
<
?
>
method
=
clazz
.
getMethod
(
"method"
,
new
CtTypeReference
[
]
)
;
assertNotNull
(
method
)
;
List
<
CtInvocation
<
?
>
>
invocations
=
method
.
getElements
(
new
TypeFilter
<
CtInvocation
<
?
>
>
(
CtInvocation
.
class
)
)
;
assertEquals
(
1
,
invocations
.
size
(
)
)
;
CtInvocation
<
?
>
c
=
invocations
.
get
(
0
)
;
assertEquals
(
"method"
,
c
.
getExecutable
(
)
.
getSimpleName
(
)
)
;
assertEquals
(
"x.method()"
,
method
.
getBody
(
)
.
getStatement
(
1
)
.
toString
(
)
)
;
}
{
CtMethod
<
?
>
method
=
clazz
.
getMethod
(
"m2"
,
new
CtTypeReference
[
]
)
;
assertNotNull
(
method
)
;
List
<
CtInvocation
<
?
>
>
invocations
=
method
.
getElements
(
new
TypeFilter
<
CtInvocation
<
?
>
>
(
CtInvocation
.
class
)
)
;
assertEquals
(
3
,
invocations
.
size
(
)
)
;
CtInvocation
<
?
>
c
=
invocations
.
get
(
1
)
;
assertEquals
(
"second"
,
c
.
getExecutable
(
)
.
getSimpleName
(
)
)
;
assertEquals
(
"x.first().second().third()"
,
method
.
getBody
(
)
.
getStatement
(
1
)
.
toString
(
)
)
;
}
{
CtMethod
<
?
>
method
=
clazz
.
getMethod
(
"m1"
,
new
CtTypeReference
[
]
)
;
assertNotNull
(
method
)
;
List
<
CtInvocation
<
?
>
>
invocations
=
method
.
getElements
(
new
TypeFilter
<
CtInvocation
<
?
>
>
(
CtInvocation
.
class
)
)
;
assertEquals
(
1
,
invocations
.
size
(
)
)
;
invocations
.
get
(
0
)
;
assertEquals
(
"x.y.z.method()"
,
method
.
getBody
(
)
.
getStatement
(
0
)
.
toString
(
)
)
;
}
{
CtMethod
<
?
>
method
=
clazz
.
getMethod
(
"m3"
,
new
CtTypeReference
[
]
)
;
assertNotNull
(
method
)
;
List
<
CtInvocation
<
?
>
>
invocations
=
method
.
getElements
(
new
TypeFilter
<
CtInvocation
<
?
>
>
(
CtInvocation
.
class
)
)
;
assertEquals
(
1
,
invocations
.
size
(
)
)
;
invocations
.
get
(
0
)
;
CtLocalVariable
<
?
>
statement
=
method
.
getBody
(
)
.
getStatement
(
0
)
;
CtFieldAccess
<
?
>
fa
=
(
CtFieldAccess
<
?
>
)
statement
.
getDefaultExpression
(
)
;
assertTrue
(
fa
.
getTarget
(
)
instanceof
CtInvocation
)
;
assertEquals
(
"field"
,
fa
.
getVariable
(
)
.
getSimpleName
(
)
)
;
assertEquals
(
"int x = first().field"
,
statement
.
toString
(
)
)
;
}
}
