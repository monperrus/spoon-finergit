@Test
public
void
statelessFactory
(
)
{
SpoonAPI
spoon
=
new
Launcher
(
)
;
spoon
.
addInputResource
(
"src/main/java/spoon/reflect/factory"
)
;
spoon
.
buildModel
(
)
;
for
(
CtType
t
:
spoon
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
getElements
(
new
AbstractFilter
<
CtType
>
(
)
{
@Override
public
boolean
matches
(
CtType
element
)
{
return
super
.
matches
(
element
)
&&
element
.
getSimpleName
(
)
.
contains
(
"Factory"
)
;
}
}
)
)
{
for
(
Object
o
:
t
.
getFields
(
)
)
{
CtField
f
=
(
CtField
)
o
;
if
(
f
.
getSimpleName
(
)
.
equals
(
"factory"
)
)
{
continue
;
}
if
(
f
.
hasModifier
(
ModifierKind
.
FINAL
)
||
f
.
hasModifier
(
ModifierKind
.
TRANSIENT
)
)
{
continue
;
}
fail
(
"architectural constraint: a factory must be stateless"
)
;
}
}
}
