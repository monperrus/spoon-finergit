@Test
public
void
testFactorySubFactory
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/factory"
)
;
class
SanityCheck
{
int
val
=
0
;
}
SanityCheck
sanityCheck
=
new
SanityCheck
(
)
;
launcher
.
addProcessor
(
new
AbstractManualProcessor
(
)
{
@Override
public
void
process
(
)
{
CtType
factoryImpl
=
getFactory
(
)
.
Interface
(
)
.
get
(
Factory
.
class
)
;
CtPackage
factoryPackage
=
getFactory
(
)
.
Package
(
)
.
getOrCreate
(
"spoon.reflect.factory"
)
;
CtInterface
itf
=
getFactory
(
)
.
Interface
(
)
.
create
(
"MegaFactoryItf"
)
;
CtClass
impl
=
getFactory
(
)
.
Class
(
)
.
create
(
"MegaFactory"
)
;
for
(
CtType
<
?
>
t
:
factoryPackage
.
getTypes
(
)
)
{
if
(
t
.
getSimpleName
(
)
.
startsWith
(
"Mega"
)
)
{
continue
;
}
for
(
CtMethod
<
?
>
m
:
t
.
getMethods
(
)
)
{
if
(
m
.
hasModifier
(
ModifierKind
.
PUBLIC
)
==
false
)
{
continue
;
}
if
(
!
m
.
getSimpleName
(
)
.
startsWith
(
"create"
)
)
{
continue
;
}
if
(
m
.
getSimpleName
(
)
.
equals
(
"create"
)
)
{
String
simpleNameType
=
m
.
getType
(
)
.
getSimpleName
(
)
.
replace
(
"Ct"
,
""
)
;
CtMethod
method
=
m
.
clone
(
)
;
method
.
setSimpleName
(
"create"
+
simpleNameType
)
;
assertTrue
(
method
.
getSignature
(
)
+
" (from "
+
t
.
getQualifiedName
(
)
+
") is not present in the main factory"
,
factoryImpl
.
hasMethod
(
method
)
)
;
continue
;
}
if
(
m
.
getSimpleName
(
)
.
equals
(
"createReference"
)
)
{
continue
;
}
if
(
m
.
getModifiers
(
)
.
contains
(
ModifierKind
.
ABSTRACT
)
)
{
continue
;
}
sanityCheck
.
val
++
;
assertTrue
(
m
.
getSignature
(
)
+
" is not present in the main factory"
,
factoryImpl
.
hasMethod
(
m
)
)
;
}
}
}
}
)
;
launcher
.
run
(
)
;
assertTrue
(
sanityCheck
.
val
>
100
)
;
}
