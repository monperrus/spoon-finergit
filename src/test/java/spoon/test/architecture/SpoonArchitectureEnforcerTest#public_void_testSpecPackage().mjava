@Test
public
void
testSpecPackage
(
)
{
Set
<
String
>
officialPackages
=
new
TreeSet
<
>
(
)
;
officialPackages
.
add
(
"spoon.compiler.builder"
)
;
officialPackages
.
add
(
"spoon.compiler"
)
;
officialPackages
.
add
(
"spoon.decompiler"
)
;
officialPackages
.
add
(
"spoon.support.modelobs.action"
)
;
officialPackages
.
add
(
"spoon.support.modelobs.context"
)
;
officialPackages
.
add
(
"spoon.support.modelobs"
)
;
officialPackages
.
add
(
"spoon.experimental"
)
;
officialPackages
.
add
(
"spoon.legacy"
)
;
officialPackages
.
add
(
"spoon.metamodel"
)
;
officialPackages
.
add
(
"spoon.pattern"
)
;
officialPackages
.
add
(
"spoon.pattern.internal"
)
;
officialPackages
.
add
(
"spoon.pattern.internal.matcher"
)
;
officialPackages
.
add
(
"spoon.pattern.internal.node"
)
;
officialPackages
.
add
(
"spoon.pattern.internal.parameter"
)
;
officialPackages
.
add
(
"spoon.processing"
)
;
officialPackages
.
add
(
"spoon.refactoring"
)
;
officialPackages
.
add
(
"spoon.reflect.annotations"
)
;
officialPackages
.
add
(
"spoon.reflect.code"
)
;
officialPackages
.
add
(
"spoon.reflect.cu.position"
)
;
officialPackages
.
add
(
"spoon.reflect.cu"
)
;
officialPackages
.
add
(
"spoon.reflect.declaration"
)
;
officialPackages
.
add
(
"spoon.reflect.eval"
)
;
officialPackages
.
add
(
"spoon.reflect.factory"
)
;
officialPackages
.
add
(
"spoon.reflect.path.impl"
)
;
officialPackages
.
add
(
"spoon.reflect.path"
)
;
officialPackages
.
add
(
"spoon.reflect.reference"
)
;
officialPackages
.
add
(
"spoon.reflect.visitor.chain"
)
;
officialPackages
.
add
(
"spoon.reflect.visitor.filter"
)
;
officialPackages
.
add
(
"spoon.reflect.visitor.printer"
)
;
officialPackages
.
add
(
"spoon.reflect.visitor"
)
;
officialPackages
.
add
(
"spoon.reflect"
)
;
officialPackages
.
add
(
"spoon.support.comparator"
)
;
officialPackages
.
add
(
"spoon.support.compiler.jdt"
)
;
officialPackages
.
add
(
"spoon.support.compiler"
)
;
officialPackages
.
add
(
"spoon.support.gui"
)
;
officialPackages
.
add
(
"spoon.support.sniper"
)
;
officialPackages
.
add
(
"spoon.support.sniper.internal"
)
;
officialPackages
.
add
(
"spoon.support.reflect.code"
)
;
officialPackages
.
add
(
"spoon.support.reflect.cu.position"
)
;
officialPackages
.
add
(
"spoon.support.reflect.cu"
)
;
officialPackages
.
add
(
"spoon.support.reflect.declaration"
)
;
officialPackages
.
add
(
"spoon.support.reflect.eval"
)
;
officialPackages
.
add
(
"spoon.reflect.meta"
)
;
officialPackages
.
add
(
"spoon.reflect.meta.impl"
)
;
officialPackages
.
add
(
"spoon.support.reflect.reference"
)
;
officialPackages
.
add
(
"spoon.support.reflect"
)
;
officialPackages
.
add
(
"spoon.support.template"
)
;
officialPackages
.
add
(
"spoon.support.util"
)
;
officialPackages
.
add
(
"spoon.support.visitor.clone"
)
;
officialPackages
.
add
(
"spoon.support.visitor.equals"
)
;
officialPackages
.
add
(
"spoon.support.visitor.java.internal"
)
;
officialPackages
.
add
(
"spoon.support.visitor.java.reflect"
)
;
officialPackages
.
add
(
"spoon.support.visitor.java"
)
;
officialPackages
.
add
(
"spoon.support.visitor.replace"
)
;
officialPackages
.
add
(
"spoon.support.visitor"
)
;
officialPackages
.
add
(
"spoon.support"
)
;
officialPackages
.
add
(
"spoon.template"
)
;
officialPackages
.
add
(
"spoon.testing.utils"
)
;
officialPackages
.
add
(
"spoon.testing"
)
;
officialPackages
.
add
(
"spoon"
)
;
officialPackages
.
add
(
""
)
;
SpoonAPI
spoon
=
new
Launcher
(
)
;
spoon
.
addInputResource
(
"src/main/java/"
)
;
spoon
.
buildModel
(
)
;
final
Set
<
String
>
currentPackages
=
new
TreeSet
<
>
(
)
;
spoon
.
getModel
(
)
.
processWith
(
new
AbstractProcessor
<
CtPackage
>
(
)
{
@Override
public
void
process
(
CtPackage
element
)
{
currentPackages
.
add
(
element
.
getQualifiedName
(
)
)
;
}
}
)
;
assertSetEquals
(
"you have created a new package or removed an existing one, please declare it explicitly in SpoonArchitectureEnforcerTest#testSpecPackage"
,
officialPackages
,
currentPackages
)
;
}
