@Test
public
void
testChangeCollector
(
)
throws
Exception
{
CtType
<
?
>
ctClass
=
ModelUtils
.
buildClass
(
SubjectOfChange
.
class
)
;
Factory
f
=
ctClass
.
getFactory
(
)
;
assertNull
(
ChangeCollector
.
getChangeCollector
(
f
.
getEnvironment
(
)
)
)
;
ChangeCollector
changeCollector
=
new
ChangeCollector
(
)
.
attachTo
(
f
.
getEnvironment
(
)
)
;
assertSame
(
changeCollector
,
ChangeCollector
.
getChangeCollector
(
f
.
getEnvironment
(
)
)
)
;
assertEquals
(
0
,
changeCollector
.
getChanges
(
f
.
getModel
(
)
.
getRootPackage
(
)
)
.
size
(
)
)
;
f
.
getModel
(
)
.
getRootPackage
(
)
.
filterChildren
(
null
)
.
forEach
(
(
CtElement
e
)
->
{
assertEquals
(
0
,
changeCollector
.
getDirectChanges
(
e
)
.
size
(
)
)
;
}
)
;
ctClass
.
setSimpleName
(
"aaa"
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
SUB_PACKAGE
)
)
,
changeCollector
.
getChanges
(
f
.
getModel
(
)
.
getRootPackage
(
)
)
)
;
assertEquals
(
new
HashSet
<
>
(
)
,
changeCollector
.
getDirectChanges
(
f
.
getModel
(
)
.
getRootPackage
(
)
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
CONTAINED_TYPE
)
)
,
changeCollector
.
getChanges
(
ctClass
.
getPackage
(
)
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
)
)
,
changeCollector
.
getDirectChanges
(
ctClass
.
getPackage
(
)
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
DECLARED_TYPE
)
)
,
changeCollector
.
getChanges
(
ctClass
.
getPosition
(
)
.
getCompilationUnit
(
)
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
)
)
,
changeCollector
.
getDirectChanges
(
ctClass
.
getPosition
(
)
.
getCompilationUnit
(
)
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
NAME
)
)
,
changeCollector
.
getChanges
(
ctClass
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
NAME
)
)
,
changeCollector
.
getDirectChanges
(
ctClass
)
)
;
CtField
<
?
>
field
=
ctClass
.
getField
(
"someField"
)
;
field
.
getDefaultExpression
(
)
.
delete
(
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
NAME
,
CtRole
.
TYPE_MEMBER
)
)
,
changeCollector
.
getChanges
(
ctClass
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
NAME
)
)
,
changeCollector
.
getDirectChanges
(
ctClass
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
DEFAULT_EXPRESSION
)
)
,
changeCollector
.
getChanges
(
field
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
DEFAULT_EXPRESSION
)
)
,
changeCollector
.
getDirectChanges
(
field
)
)
;
ctClass
.
removeTypeMember
(
field
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
NAME
,
CtRole
.
TYPE_MEMBER
)
)
,
changeCollector
.
getChanges
(
ctClass
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
NAME
,
CtRole
.
TYPE_MEMBER
)
)
,
changeCollector
.
getDirectChanges
(
ctClass
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
DEFAULT_EXPRESSION
)
)
,
changeCollector
.
getChanges
(
field
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
DEFAULT_EXPRESSION
)
)
,
changeCollector
.
getDirectChanges
(
field
)
)
;
}
