@Test
public
void
testCommentsInResourcesWithWindowsEOL
(
)
throws
IOException
{
try
(
InputStream
is
=
new
FileInputStream
(
new
File
(
"./src/test/java/spoon/test/comment/testclasses/WindowsEOL.java"
)
)
)
{
int
b
;
boolean
lastWasCR
=
false
;
while
(
(
b
=
is
.
read
(
)
)
!=
-
1
)
{
if
(
lastWasCR
)
{
assertEquals
(
b
,
'\n'
)
;
lastWasCR
=
false
;
}
if
(
b
==
'\r'
)
{
lastWasCR
=
true
;
}
}
}
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
run
(
new
String
[
]
{
"-i"
,
"./src/test/java/spoon/test/comment/testclasses/WindowsEOL.java"
,
"-o"
,
"./target/spooned/"
,
"-c"
}
)
;
Factory
f
=
launcher
.
getFactory
(
)
;
CtClass
<
?
>
type
=
(
CtClass
<
?
>
)
f
.
Type
(
)
.
get
(
WindowsEOL
.
class
)
;
CtJavaDoc
classJavaDoc
=
(
CtJavaDoc
)
type
.
getComments
(
)
.
get
(
0
)
;
String
str
=
classJavaDoc
.
toString
(
)
;
StringTokenizer
st
=
new
StringTokenizer
(
str
,
System
.
getProperty
(
"line.separator"
)
)
;
boolean
first
=
true
;
while
(
st
.
hasMoreTokens
(
)
)
{
String
line
=
st
.
nextToken
(
)
;
if
(
first
)
{
first
=
false
;
assertEquals
(
line
.
length
(
)
,
3
)
;
assertEquals
(
"/**"
,
line
)
;
}
else
{
if
(
st
.
hasMoreTokens
(
)
)
{
assertTrue
(
line
.
length
(
)
>=
2
)
;
assertEquals
(
" *"
,
line
.
substring
(
0
,
2
)
)
;
}
else
{
assertTrue
(
line
.
length
(
)
==
3
)
;
assertEquals
(
" */"
,
line
.
substring
(
0
,
3
)
)
;
}
}
}
assertEquals
(
"This file contains MS Windows EOL.\n"
+
"It is here to test whether comments are printed well\n"
+
"in this case"
,
classJavaDoc
.
getContent
(
)
)
;
}
