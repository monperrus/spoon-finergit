@Test
public
void
testInLineComment
(
)
{
Factory
f
=
getSpoonFactory
(
)
;
CtClass
<
?
>
type
=
(
CtClass
<
?
>
)
f
.
Type
(
)
.
get
(
InlineComment
.
class
)
;
String
strType
=
type
.
toString
(
)
;
List
<
CtComment
>
comments
=
type
.
getElements
(
new
TypeFilter
<
CtComment
>
(
CtComment
.
class
)
)
;
assertEquals
(
69
,
comments
.
size
(
)
)
;
for
(
CtComment
comment
:
comments
)
{
if
(
comment
.
getCommentType
(
)
==
CtComment
.
CommentType
.
FILE
)
{
continue
;
}
assertNotNull
(
comment
.
getParent
(
)
)
;
assertTrue
(
comment
.
toString
(
)
+
":"
+
comment
.
getParent
(
)
+
" is not printed"
,
strType
.
contains
(
comment
.
toString
(
)
)
)
;
}
assertEquals
(
6
,
type
.
getComments
(
)
.
size
(
)
)
;
assertEquals
(
CtComment
.
CommentType
.
FILE
,
type
.
getComments
(
)
.
get
(
0
)
.
getCommentType
(
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment class"
)
,
type
.
getComments
(
)
.
get
(
1
)
)
;
assertEquals
(
"Bottom File"
,
type
.
getComments
(
)
.
get
(
5
)
.
getContent
(
)
)
;
CtField
<
?
>
field
=
type
.
getField
(
"field"
)
;
assertEquals
(
4
,
field
.
getComments
(
)
.
size
(
)
)
;
assertEquals
(
createFakeComment
(
f
,
"Comment Field"
)
,
field
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// Comment Field"
+
newLine
+
"// comment field 2"
+
newLine
+
"// comment in field"
+
newLine
+
"private int field = 10;// after field"
+
newLine
,
field
.
toString
(
)
)
;
CtAnonymousExecutable
ctAnonymousExecutable
=
type
.
getAnonymousExecutables
(
)
.
get
(
0
)
;
assertEquals
(
1
,
ctAnonymousExecutable
.
getComments
(
)
.
size
(
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment static block"
)
,
ctAnonymousExecutable
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment inside static"
)
,
ctAnonymousExecutable
.
getBody
(
)
.
getStatement
(
0
)
)
;
assertEquals
(
"// comment static block"
+
newLine
+
"static {"
+
newLine
+
"    // comment inside static"
+
newLine
+
"}"
,
ctAnonymousExecutable
.
toString
(
)
)
;
CtConstructor
constructor
=
type
.
getConstructor
(
)
;
assertEquals
(
1
,
constructor
.
getComments
(
)
.
size
(
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment constructor"
)
,
constructor
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
createFakeComment
(
f
,
"Comment in constructor"
)
,
constructor
.
getBody
(
)
.
getStatement
(
1
)
)
;
assertEquals
(
"// comment constructor"
+
newLine
+
"public InlineComment() {"
+
newLine
+
"    // Comment in constructor"
+
newLine
+
"}"
,
constructor
.
toString
(
)
)
;
CtMethod
<
Object
>
m
=
type
.
getMethod
(
"m"
)
;
assertEquals
(
1
,
m
.
getComments
(
)
.
size
(
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment method"
)
,
m
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment empty method block"
)
,
m
.
getBody
(
)
.
getStatement
(
0
)
)
;
assertEquals
(
"// comment method"
+
newLine
+
"public void m() {"
+
newLine
+
"    // comment empty method block"
+
newLine
+
"}"
,
m
.
toString
(
)
)
;
CtMethod
<
Object
>
m1
=
type
.
getMethod
(
"m1"
)
;
CtSwitch
ctSwitch
=
m1
.
getBody
(
)
.
getStatement
(
0
)
;
assertEquals
(
createFakeComment
(
f
,
"comment switch"
)
,
ctSwitch
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment switch"
+
newLine
+
"switch (1) {"
+
newLine
+
"    // before first case"
+
newLine
+
"    case 0 :"
+
newLine
+
"        // comment case 0: empty case"
+
newLine
+
"    case 1 :"
+
newLine
+
"        // comment case 1"
+
newLine
+
"        int i = 0;"
+
newLine
+
"    default :"
+
newLine
+
"        // comment default"
+
newLine
+
"}"
,
ctSwitch
.
toString
(
)
)
;
CtFor
ctFor
=
m1
.
getBody
(
)
.
getStatement
(
1
)
;
assertEquals
(
createFakeComment
(
f
,
"comment for"
)
,
ctFor
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment for"
+
newLine
+
"for (int i = 0; i < 10; i++) {"
+
newLine
+
"    // comment for block"
+
newLine
+
"}"
,
ctFor
.
toString
(
)
)
;
CtIf
ctIf
=
m1
.
getBody
(
)
.
getStatement
(
2
)
;
assertEquals
(
createFakeComment
(
f
,
"comment if"
)
,
ctIf
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment if"
+
newLine
+
"if ((1 % 2) == 0) {"
+
newLine
+
"    // comment unary operator"
+
newLine
+
"    (field)++;"
+
newLine
+
"}"
,
ctIf
.
toString
(
)
)
;
CtConstructorCall
ctConstructorCall
=
m1
.
getBody
(
)
.
getStatement
(
3
)
;
assertEquals
(
createFakeComment
(
f
,
"comment constructor call"
)
,
ctConstructorCall
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment constructor call"
+
newLine
+
"new spoon.test.comment.testclasses.InlineComment()"
,
ctConstructorCall
.
toString
(
)
)
;
CtInvocation
ctInvocation
=
m1
.
getBody
(
)
.
getStatement
(
4
)
;
assertEquals
(
createFakeComment
(
f
,
"comment invocation"
)
,
ctInvocation
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment invocation"
+
newLine
+
"this.m()"
,
ctInvocation
.
toString
(
)
)
;
CtLocalVariable
ctLocalVariable
=
m1
.
getBody
(
)
.
getStatement
(
5
)
;
assertEquals
(
createFakeComment
(
f
,
"comment local variable"
)
,
ctLocalVariable
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment local variable"
+
newLine
+
"int i = 0"
,
ctLocalVariable
.
toString
(
)
)
;
CtLocalVariable
ctLocalVariable2
=
m1
.
getBody
(
)
.
getStatement
(
6
)
;
assertEquals
(
createFakeComment
(
f
,
"comment multi assignments"
)
,
ctLocalVariable2
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment multi assignments"
+
newLine
+
"int j = 2"
,
ctLocalVariable2
.
toString
(
)
)
;
CtDo
ctDo
=
m1
.
getBody
(
)
.
getStatement
(
7
)
;
assertEquals
(
createFakeComment
(
f
,
"comment dowhile"
)
,
ctDo
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment dowhile"
+
newLine
+
"do {"
+
newLine
+
"    // comment in do while"
+
newLine
+
"    i++;"
+
newLine
+
"    // comment end do while"
+
newLine
+
"} while (i < 10 )"
,
ctDo
.
toString
(
)
)
;
CtTry
ctTry
=
m1
.
getBody
(
)
.
getStatement
(
8
)
;
assertEquals
(
createFakeComment
(
f
,
"comment try"
)
,
ctTry
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment try"
+
newLine
+
"try {"
+
newLine
+
"    // comment in try"
+
newLine
+
"    i++;"
+
newLine
+
"}// between"
+
newLine
+
"// try/catch"
+
newLine
+
" catch (java.lang.Exception e) {"
+
newLine
+
"    // comment in catch"
+
newLine
+
"}"
,
ctTry
.
toString
(
)
)
;
CtSynchronized
ctSynchronized
=
m1
.
getBody
(
)
.
getStatement
(
9
)
;
assertEquals
(
createFakeComment
(
f
,
"comment synchronized"
)
,
ctSynchronized
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment synchronized"
+
newLine
+
"synchronized(this) {"
+
newLine
+
"    // comment in synchronized"
+
newLine
+
"}"
,
ctSynchronized
.
toString
(
)
)
;
CtLocalVariable
ctLocalVariable1
=
m1
.
getBody
(
)
.
getStatement
(
10
)
;
CtConditional
ctConditional
=
(
CtConditional
)
ctLocalVariable1
.
getDefaultExpression
(
)
;
assertEquals
(
createFakeComment
(
f
,
"comment after condition CtConditional"
)
,
ctConditional
.
getCondition
(
)
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment before then CtConditional"
)
,
ctConditional
.
getThenExpression
(
)
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment after then CtConditional"
)
,
ctConditional
.
getThenExpression
(
)
.
getComments
(
)
.
get
(
1
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment before else CtConditional"
)
,
ctConditional
.
getElseExpression
(
)
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment after else CtConditional"
)
,
ctLocalVariable1
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"java.lang.Double dou = (i == 1// comment after condition CtConditional"
+
newLine
+
") ? // comment before then CtConditional"
+
newLine
+
"null// comment after then CtConditional"
+
newLine
+
" : // comment before else CtConditional"
+
newLine
+
"new java.lang.Double((j / ((double) (i - 1))))"
,
ctLocalVariable1
.
toString
(
)
)
;
CtNewArray
ctNewArray
=
(
CtNewArray
)
(
(
CtLocalVariable
)
m1
.
getBody
(
)
.
getStatement
(
11
)
)
.
getDefaultExpression
(
)
;
assertEquals
(
createFakeComment
(
f
,
"last comment at the end of array"
)
,
ctNewArray
.
getComments
(
)
.
get
(
0
)
)
;
CtElement
arrayValue
=
(
CtElement
)
ctNewArray
.
getElements
(
)
.
get
(
0
)
;
assertEquals
(
createFakeComment
(
f
,
"comment before array value"
)
,
arrayValue
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
createFakeComment
(
f
,
"comment after array value"
)
,
arrayValue
.
getComments
(
)
.
get
(
1
)
)
;
CtLocalVariable
ctLocalVariableString
=
m1
.
getBody
(
)
.
getStatement
(
12
)
;
assertEquals
(
createFakeComment
(
f
,
"comment multi line string"
)
,
(
(
CtBinaryOperator
)
(
(
CtBinaryOperator
)
ctLocalVariableString
.
getDefaultExpression
(
)
)
.
getRightHandOperand
(
)
)
.
getLeftHandOperand
(
)
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"\"\" + (\"\"// comment multi line string"
+
newLine
+
" + \"\")"
,
ctLocalVariableString
.
getDefaultExpression
(
)
.
toString
(
)
)
;
ctLocalVariable1
=
m1
.
getBody
(
)
.
getStatement
(
13
)
;
ctConditional
=
(
CtConditional
)
ctLocalVariable1
.
getDefaultExpression
(
)
;
assertEquals
(
"boolean c = (i == 1) ? // comment before then boolean CtConditional"
+
newLine
+
"i == 1// comment after then boolean CtConditional"
+
newLine
+
" : i == 2"
,
ctLocalVariable1
.
toString
(
)
)
;
CtReturn
ctReturn
=
m1
.
getBody
(
)
.
getStatement
(
14
)
;
assertEquals
(
createFakeComment
(
f
,
"comment return"
)
,
ctReturn
.
getComments
(
)
.
get
(
0
)
)
;
assertEquals
(
"// comment return"
+
newLine
+
"return"
,
ctReturn
.
toString
(
)
)
;
CtMethod
m2
=
type
.
getMethodsByName
(
"m2"
)
.
get
(
0
)
;
assertEquals
(
6
,
m2
.
getComments
(
)
.
size
(
)
)
;
CtParameter
ctParameter
=
(
CtParameter
)
m2
.
getParameters
(
)
.
get
(
0
)
;
assertEquals
(
4
,
ctParameter
.
getComments
(
)
.
size
(
)
)
;
assertEquals
(
"// comment before type"
+
newLine
+
"// comment after parameter"
+
newLine
+
"// comment before throws"
+
newLine
+
"// comment before exception 1"
+
newLine
+
"// comment before exception 2"
+
newLine
+
"// comment before block"
+
newLine
+
"public void m2(// comment before name"
+
newLine
+
"// comment before parameters"
+
newLine
+
"// comment before type parameter"
+
newLine
+
"// comment before name parameter"
+
newLine
+
"int i) throws java.lang.Error, java.lang.Exception {"
+
newLine
+
"}"
,
m2
.
toString
(
)
)
;
}
