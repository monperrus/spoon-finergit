@Test
public
void
compileTest
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/resources/noclasspath/Simple.java"
)
;
File
outputBinDirectory
=
new
File
(
"./target/class-simple"
)
;
if
(
!
outputBinDirectory
.
exists
(
)
)
{
outputBinDirectory
.
mkdirs
(
)
;
}
launcher
.
setBinaryOutputDirectory
(
outputBinDirectory
)
;
launcher
.
getEnvironment
(
)
.
setShouldCompile
(
true
)
;
launcher
.
buildModel
(
)
;
Factory
factory
=
launcher
.
getFactory
(
)
;
CoreFactory
core
=
factory
.
Core
(
)
;
CodeFactory
code
=
factory
.
Code
(
)
;
CtClass
simple
=
factory
.
Class
(
)
.
get
(
"Simple"
)
;
CtMethod
method
=
core
.
createMethod
(
)
;
method
.
addModifier
(
ModifierKind
.
PUBLIC
)
;
method
.
setType
(
factory
.
Type
(
)
.
integerPrimitiveType
(
)
)
;
method
.
setSimpleName
(
"m"
)
;
CtBlock
block
=
core
.
createBlock
(
)
;
CtReturn
aReturn
=
core
.
createReturn
(
)
;
CtBinaryOperator
binaryOperator
=
code
.
createBinaryOperator
(
code
.
createLiteral
(
10
)
,
code
.
createLiteral
(
32
)
,
BinaryOperatorKind
.
PLUS
)
;
aReturn
.
setReturnedExpression
(
binaryOperator
)
;
block
.
addStatement
(
aReturn
)
;
method
.
setBody
(
block
)
;
simple
.
addMethod
(
method
)
;
launcher
.
getModelBuilder
(
)
.
compile
(
)
;
final
URLClassLoader
urlClassLoader
=
new
URLClassLoader
(
new
URL
[
]
{
outputBinDirectory
.
toURL
(
)
}
)
;
Class
<
?
>
aClass
=
urlClassLoader
.
loadClass
(
"Simple"
)
;
Method
m
=
aClass
.
getMethod
(
"m"
)
;
Assert
.
assertEquals
(
42
,
m
.
invoke
(
aClass
.
newInstance
(
)
)
)
;
}
