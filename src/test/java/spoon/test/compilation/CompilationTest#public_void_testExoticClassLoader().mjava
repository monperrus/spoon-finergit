@Test
public
void
testExoticClassLoader
(
)
throws
Exception
{
final
List
<
String
>
l
=
new
ArrayList
<
>
(
)
;
class
MyClassLoader
extends
ClassLoader
{
@Override
protected
Class
<
?
>
loadClass
(
String
name
,
boolean
resolve
)
throws
ClassNotFoundException
{
l
.
add
(
name
)
;
return
super
.
loadClass
(
name
,
resolve
)
;
}
}
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setInputClassLoader
(
new
MyClassLoader
(
)
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
addInputResource
(
"src/test/resources/reference-test/Foo.java"
)
;
launcher
.
buildModel
(
)
;
launcher
.
getModel
(
)
.
getRootPackage
(
)
.
accept
(
new
CtScanner
(
)
{
@Override
public
<
T
>
void
visitCtTypeReference
(
CtTypeReference
<
T
>
reference
)
{
try
{
reference
.
getTypeDeclaration
(
)
;
}
catch
(
SpoonClassNotFoundException
ignore
)
{
}
}
}
)
;
assertEquals
(
3
,
l
.
size
(
)
)
;
assertTrue
(
l
.
contains
(
"KJHKY"
)
)
;
}
