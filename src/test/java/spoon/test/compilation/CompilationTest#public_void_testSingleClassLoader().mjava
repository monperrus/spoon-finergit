@Test
public
void
testSingleClassLoader
(
)
throws
Exception
{
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
new
FileSystemFolder
(
"./src/test/resources/classloader-test"
)
)
;
File
outputBinDirectory
=
new
File
(
"./target/classloader-test"
)
;
if
(
!
outputBinDirectory
.
exists
(
)
)
{
outputBinDirectory
.
mkdirs
(
)
;
}
launcher
.
setBinaryOutputDirectory
(
outputBinDirectory
)
;
launcher
.
getModelBuilder
(
)
.
build
(
)
;
CtTypeReference
<
?
>
mIFoo
=
launcher
.
getFactory
(
)
.
Type
(
)
.
createReference
(
"spoontest.IFoo"
)
;
CtTypeReference
<
?
>
mFoo
=
launcher
.
getFactory
(
)
.
Type
(
)
.
createReference
(
"spoontest.Foo"
)
;
assertTrue
(
"Foo subtype of IFoo"
,
mFoo
.
isSubtypeOf
(
mIFoo
)
)
;
launcher
.
getModelBuilder
(
)
.
compile
(
SpoonModelBuilder
.
InputType
.
FILES
)
;
launcher
=
new
Launcher
(
)
;
try
{
Class
.
forName
(
"spoontest.IFoo"
)
;
fail
(
)
;
}
catch
(
ClassNotFoundException
expected
)
{
}
try
{
launcher
.
getEnvironment
(
)
.
getInputClassLoader
(
)
.
loadClass
(
"spoontest.IFoo"
)
;
fail
(
)
;
}
catch
(
ClassNotFoundException
expected
)
{
}
launcher
.
getEnvironment
(
)
.
setSourceClasspath
(
new
String
[
]
{
outputBinDirectory
.
getAbsolutePath
(
)
}
)
;
mIFoo
=
launcher
.
getFactory
(
)
.
Type
(
)
.
createReference
(
"spoontest.IFoo"
)
;
mFoo
=
launcher
.
getFactory
(
)
.
Type
(
)
.
createReference
(
"spoontest.Foo"
)
;
assertTrue
(
"Foo subtype of IFoo"
,
mFoo
.
isSubtypeOf
(
mIFoo
)
)
;
Class
<
?
>
ifoo
=
launcher
.
getEnvironment
(
)
.
getInputClassLoader
(
)
.
loadClass
(
"spoontest.IFoo"
)
;
Class
<
?
>
foo
=
launcher
.
getEnvironment
(
)
.
getInputClassLoader
(
)
.
loadClass
(
"spoontest.Foo"
)
;
assertTrue
(
ifoo
.
isAssignableFrom
(
foo
)
)
;
assertSame
(
ifoo
.
getClassLoader
(
)
,
foo
.
getClassLoader
(
)
)
;
}
