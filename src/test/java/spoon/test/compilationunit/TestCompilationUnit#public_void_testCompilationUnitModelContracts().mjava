@Test
public
void
testCompilationUnitModelContracts
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/api/testclasses/Bar.java"
)
;
launcher
.
buildModel
(
)
;
CtType
type
=
launcher
.
getFactory
(
)
.
Type
(
)
.
get
(
Bar
.
class
)
;
assertTrue
(
type
.
getPosition
(
)
instanceof
BodyHolderSourcePosition
)
;
CompilationUnit
compilationUnit
=
type
.
getPosition
(
)
.
getCompilationUnit
(
)
;
assertNull
(
compilationUnit
.
getParent
(
)
)
;
CtImport
anImport
=
compilationUnit
.
getImports
(
)
.
iterator
(
)
.
next
(
)
;
assertSame
(
compilationUnit
,
anImport
.
getParent
(
)
)
;
assertTrue
(
compilationUnit
.
getMainType
(
)
.
getParent
(
)
instanceof
CtPackage
)
;
assertNull
(
compilationUnit
.
getDeclaredModule
(
)
)
;
assertSame
(
type
.
getPackage
(
)
,
compilationUnit
.
getDeclaredPackage
(
)
)
;
assertEquals
(
type
.
getPackage
(
)
.
getReference
(
)
,
compilationUnit
.
getPackageDeclaration
(
)
.
getReference
(
)
)
;
assertSame
(
compilationUnit
,
compilationUnit
.
getPackageDeclaration
(
)
.
getParent
(
)
)
;
List
<
CtType
<
?
>
>
types
=
new
ArrayList
<
>
(
)
;
List
<
CtTypeReference
<
?
>
>
typeRefs
=
new
ArrayList
<
>
(
)
;
List
<
CtImport
>
imports
=
new
ArrayList
<
>
(
)
;
new
CtScanner
(
)
{
public
<
T
>
void
visitCtTypeReference
(
CtTypeReference
<
T
>
reference
)
{
typeRefs
.
add
(
reference
)
;
}
public
<
T
>
void
visitCtClass
(
CtClass
<
T
>
ctClass
)
{
types
.
add
(
ctClass
)
;
}
public
<
T
>
void
visitCtInterface
(
CtInterface
<
T
>
intrface
)
{
types
.
add
(
intrface
)
;
}
public
void
visitCtImport
(
CtImport
ctImport
)
{
imports
.
add
(
ctImport
)
;
assertSame
(
compilationUnit
,
ctImport
.
getParent
(
)
)
;
}
}
.
scan
(
compilationUnit
)
;
assertEquals
(
0
,
types
.
size
(
)
)
;
assertEquals
(
compilationUnit
.
getDeclaredTypeReferences
(
)
,
typeRefs
)
;
assertEquals
(
compilationUnit
.
getImports
(
)
,
imports
)
;
new
CtScanner
(
)
{
@Override
public
void
visitCtCompilationUnit
(
CtCompilationUnit
compilationUnit
)
{
fail
(
"CtCompilation unit must not be scanned when started from model unnamed module"
)
;
}
}
.
scan
(
type
.
getFactory
(
)
.
getModel
(
)
.
getUnnamedModule
(
)
)
;
new
CtScanner
(
)
{
@Override
public
void
visitCtCompilationUnit
(
CtCompilationUnit
compilationUnit
)
{
fail
(
"CtCompilation unit must not be scanned when started from model root package"
)
;
}
}
.
scan
(
type
.
getFactory
(
)
.
getModel
(
)
.
getRootPackage
(
)
)
;
}
