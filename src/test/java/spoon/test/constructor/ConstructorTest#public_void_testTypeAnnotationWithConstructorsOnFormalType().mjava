@Test
public
void
testTypeAnnotationWithConstructorsOnFormalType
(
)
throws
Exception
{
final
CtConstructor
<
?
>
aConstructor
=
aClass
.
getConstructor
(
factory
.
Type
(
)
.
OBJECT
)
;
assertEquals
(
1
,
aConstructor
.
getFormalTypeParameters
(
)
.
size
(
)
)
;
CtTypeParameterReference
genericT
=
aConstructor
.
getFormalTypeParameters
(
)
.
get
(
0
)
;
assertEquals
(
"T"
,
genericT
.
getSimpleName
(
)
)
;
assertEquals
(
1
,
genericT
.
getAnnotations
(
)
.
size
(
)
)
;
assertNotNull
(
genericT
.
getBoundingType
(
)
)
;
assertTrue
(
genericT
.
getBoundingType
(
)
instanceof
CtIntersectionTypeReference
)
;
CtIntersectionTypeReference
<
?
>
boundingType
=
genericT
.
getBoundingType
(
)
.
asCtIntersectionTypeReference
(
)
;
final
List
<
CtTypeReference
<
?
>
>
bounds
=
boundingType
.
getBounds
(
)
.
stream
(
)
.
collect
(
Collectors
.
toList
(
)
)
;
CtTypeReference
<
?
>
genericTacos
=
bounds
.
get
(
0
)
;
assertEquals
(
"Tacos"
,
genericTacos
.
getSimpleName
(
)
)
;
assertEquals
(
1
,
genericTacos
.
getAnnotations
(
)
.
size
(
)
)
;
assertEquals
(
1
,
genericTacos
.
getActualTypeArguments
(
)
.
size
(
)
)
;
CtTypeParameterReference
wildcard
=
(
CtTypeParameterReference
)
genericTacos
.
getActualTypeArguments
(
)
.
get
(
0
)
;
assertEquals
(
"?"
,
wildcard
.
getSimpleName
(
)
)
;
assertEquals
(
1
,
wildcard
.
getAnnotations
(
)
.
size
(
)
)
;
assertEquals
(
"C"
,
wildcard
.
getBoundingType
(
)
.
getSimpleName
(
)
)
;
assertEquals
(
1
,
wildcard
.
getBoundingType
(
)
.
getAnnotations
(
)
.
size
(
)
)
;
assertEquals
(
"Serializable"
,
bounds
.
get
(
1
)
.
getSimpleName
(
)
)
;
assertEquals
(
1
,
bounds
.
get
(
1
)
.
getAnnotations
(
)
.
size
(
)
)
;
}
