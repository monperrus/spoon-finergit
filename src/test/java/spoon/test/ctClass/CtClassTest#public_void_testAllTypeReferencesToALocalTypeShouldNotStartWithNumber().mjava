@Test
public
void
testAllTypeReferencesToALocalTypeShouldNotStartWithNumber
(
)
throws
Exception
{
final
CtType
<
Pozole
>
aPozole
=
buildClass
(
Pozole
.
class
)
;
final
CtClass
<
?
>
cook
=
aPozole
.
getNestedType
(
"1Cook"
)
;
assertEquals
(
"1Cook"
,
cook
.
getSimpleName
(
)
)
;
assertEquals
(
"spoon.test.ctClass.testclasses.Pozole$1Cook"
,
cook
.
getQualifiedName
(
)
)
;
final
Set
<
?
CtConstructor
<
?
>
>
constructors
=
cook
.
getConstructors
(
)
;
final
String
expectedConstructor
=
"public Cook() {"
+
System
.
lineSeparator
(
)
+
"}"
;
assertEquals
(
expectedConstructor
,
constructors
.
toArray
(
new
CtConstructor
[
]
)
[
0
]
.
toString
(
)
)
;
CtLocalVariable
m
=
cook
.
getMethod
(
"m"
)
.
getBody
(
)
.
getStatement
(
0
)
;
assertEquals
(
"final java.lang.Class<Cook> cookClass = Cook.class"
,
m
.
toString
(
)
)
;
CtFieldAccess
ac
=
(
CtFieldAccess
)
m
.
getAssignment
(
)
;
assertEquals
(
"class"
,
ac
.
getVariable
(
)
.
getSimpleName
(
)
)
;
assertEquals
(
true
,
ac
.
getTarget
(
)
instanceof
CtTypeAccess
)
;
assertEquals
(
0
,
ac
.
getVariable
(
)
.
getModifiers
(
)
.
size
(
)
)
;
Factory
factory
=
aPozole
.
getFactory
(
)
;
aPozole
.
removeModifier
(
ModifierKind
.
PUBLIC
)
;
factory
.
Code
(
)
.
createCodeSnippetStatement
(
aPozole
.
toString
(
)
)
.
compile
(
)
;
CtClass
internalClass
=
factory
.
Core
(
)
.
createClass
(
)
;
internalClass
.
setSimpleName
(
"Foo"
)
;
cook
.
getParent
(
CtBlock
.
class
)
.
addStatement
(
internalClass
)
;
assertEquals
(
"Foo"
,
internalClass
.
getSimpleName
(
)
)
;
assertEquals
(
"spoon.test.ctClass.testclasses.Pozole$Foo"
,
internalClass
.
getQualifiedName
(
)
)
;
internalClass
.
addConstructor
(
factory
.
Core
(
)
.
createConstructor
(
)
)
;
CtConstructor
cons
=
(
CtConstructor
)
internalClass
.
getConstructors
(
)
.
toArray
(
new
CtConstructor
[
]
)
[
0
]
;
cons
.
setBody
(
factory
.
Core
(
)
.
createBlock
(
)
)
;
CtConstructorCall
call
=
cook
.
getFactory
(
)
.
Core
(
)
.
createConstructorCall
(
)
;
call
.
setExecutable
(
cons
.
getReference
(
)
)
;
assertEquals
(
internalClass
,
internalClass
.
getReference
(
)
.
getDeclaration
(
)
)
;
assertEquals
(
"new Foo()"
,
call
.
toString
(
)
)
;
internalClass
.
insertAfter
(
call
)
;
factory
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
factory
.
Code
(
)
.
createCodeSnippetStatement
(
aPozole
.
toString
(
)
)
.
compile
(
)
;
factory
.
getEnvironment
(
)
.
setAutoImports
(
false
)
;
factory
.
Code
(
)
.
createCodeSnippetStatement
(
aPozole
.
toString
(
)
)
.
compile
(
)
;
}
