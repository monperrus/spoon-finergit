@Test
public
void
testIsSubTypeOfonTypeReferences
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"-c"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/ctType/testclasses/SubtypeModel.java"
)
;
launcher
.
buildModel
(
)
;
Factory
factory
=
launcher
.
getFactory
(
)
;
CtType
<
?
>
oCtType
=
factory
.
Class
(
)
.
get
(
"spoon.test.ctType.testclasses.SubtypeModel"
)
;
CtMethod
<
?
>
O_FooMethod
=
oCtType
.
filterChildren
(
new
NameFilter
<
>
(
"foo"
)
)
.
first
(
)
;
Map
<
String
,
CtTypeReference
<
?
>
>
nameToTypeRef
=
new
HashMap
<
>
(
)
;
O_FooMethod
.
filterChildren
(
new
TypeFilter
<
>
(
CtLocalVariable
.
class
)
)
.
forEach
(
(
CtLocalVariable
var
)
->
{
nameToTypeRef
.
put
(
var
.
getSimpleName
(
)
,
var
.
getType
(
)
)
;
}
)
;
int
[
]
count
=
new
int
[
]
;
O_FooMethod
.
filterChildren
(
new
TypeFilter
<
>
(
CtAssignment
.
class
)
)
.
forEach
(
(
CtAssignment
ass
)
->
{
for
(
CtComment
comment
:
ass
.
getComments
(
)
)
{
checkIsNotSubtype
(
comment
,
nameToTypeRef
)
;
count
[
0
]
++
;
}
;
count
[
0
]
++
;
checkIsSubtype
(
(
(
CtVariableAccess
)
ass
.
getAssigned
(
)
)
.
getVariable
(
)
.
getType
(
)
,
(
(
CtVariableAccess
)
ass
.
getAssignment
(
)
)
.
getVariable
(
)
.
getType
(
)
,
nameToTypeRef
)
;
}
)
;
assertTrue
(
count
[
0
]
>
(
9
*
8
)
)
;
}
