@Test
public
void
factoryTest
(
)
throws
Exception
{
Launcher
spoon
=
new
Launcher
(
)
;
spoon
.
addInputResource
(
"src/main/java/spoon/reflect/factory/Factory.java"
)
;
spoon
.
buildModel
(
)
;
for
(
CtMethod
<
?
>
m
:
spoon
.
getFactory
(
)
.
Type
(
)
.
get
(
"spoon.reflect.factory.Factory"
)
.
getMethods
(
)
)
{
if
(
!
m
.
getSimpleName
(
)
.
startsWith
(
"create"
)
||
"createSourcePosition"
.
equals
(
m
.
getSimpleName
(
)
)
||
"createBodyHolderSourcePosition"
.
equals
(
m
.
getSimpleName
(
)
)
||
"createDeclarationSourcePosition"
.
equals
(
m
.
getSimpleName
(
)
)
||
"createNewClass"
.
equals
(
m
.
getSimpleName
(
)
)
)
{
continue
;
}
Object
[
]
args
=
new
Object
[
]
;
Class
[
]
argsClass
=
new
Class
[
]
;
for
(
int
i
=
0
;
i
<
args
.
length
;
i
++
)
{
CtTypeReference
<
?
>
type
=
m
.
getParameters
(
)
.
get
(
i
)
.
getType
(
)
;
args
[
i
]
=
createCompatibleObject
(
type
)
;
argsClass
[
i
]
=
type
.
getActualClass
(
)
;
if
(
!
type
.
isPrimitive
(
)
)
{
assertTrue
(
args
[
i
]
.
getClass
(
)
.
toString
(
)
+
" != "
+
argsClass
[
i
]
.
toString
(
)
,
argsClass
[
i
]
.
isAssignableFrom
(
args
[
i
]
.
getClass
(
)
)
)
;
}
}
Method
rm
;
rm
=
m
.
getReference
(
)
.
getActualMethod
(
)
;
Object
res
=
rm
.
invoke
(
spoon
.
getFactory
(
)
,
args
)
;
assertNotNull
(
res
)
;
}
}
