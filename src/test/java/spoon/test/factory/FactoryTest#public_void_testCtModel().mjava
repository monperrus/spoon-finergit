@Test
public
void
testCtModel
(
)
throws
Exception
{
SpoonAPI
spoon
=
new
Launcher
(
)
;
spoon
.
addInputResource
(
"src/test/java/spoon/test/factory/testclasses"
)
;
spoon
.
buildModel
(
)
;
CtModel
model
=
spoon
.
getModel
(
)
;
assertEquals
(
1
,
model
.
getAllTypes
(
)
.
size
(
)
)
;
assertEquals
(
5
,
model
.
getAllPackages
(
)
.
size
(
)
)
;
model
.
getRootPackage
(
)
.
addPackage
(
model
.
getRootPackage
(
)
)
;
assertEquals
(
1
,
model
.
getAllTypes
(
)
.
size
(
)
)
;
assertEquals
(
5
,
model
.
getAllPackages
(
)
.
size
(
)
)
;
model
.
getRootPackage
(
)
.
getPackage
(
"spoon"
)
.
addPackage
(
model
.
getRootPackage
(
)
.
getPackage
(
"spoon"
)
)
;
assertEquals
(
1
,
model
.
getAllTypes
(
)
.
size
(
)
)
;
assertEquals
(
5
,
model
.
getAllPackages
(
)
.
size
(
)
)
;
model
.
getRootPackage
(
)
.
addPackage
(
model
.
getRootPackage
(
)
.
getPackage
(
"spoon"
)
)
;
assertEquals
(
1
,
model
.
getAllTypes
(
)
.
size
(
)
)
;
assertEquals
(
5
,
model
.
getAllPackages
(
)
.
size
(
)
)
;
CtPackage
p
=
model
.
getElements
(
new
NamedElementFilter
<
>
(
CtPackage
.
class
,
"spoon"
)
)
.
get
(
0
)
.
clone
(
)
;
CtField
f
=
spoon
.
getFactory
(
)
.
Core
(
)
.
createField
(
)
;
f
.
setSimpleName
(
"foo"
)
;
f
.
setType
(
spoon
.
getFactory
(
)
.
Type
(
)
.
BYTE
)
;
p
.
getElements
(
new
NamedElementFilter
<
>
(
CtPackage
.
class
,
"testclasses"
)
)
.
get
(
0
)
.
getType
(
"Foo"
)
.
addField
(
f
)
;
try
{
model
.
getRootPackage
(
)
.
addPackage
(
p
)
;
fail
(
"no exception thrown"
)
;
}
catch
(
IllegalStateException
success
)
{
}
model
.
processWith
(
new
AbstractProcessor
<
CtType
>
(
)
{
@Override
public
void
process
(
CtType
element
)
{
element
.
delete
(
)
;
}
}
)
;
assertEquals
(
0
,
model
.
getAllTypes
(
)
.
size
(
)
)
;
}
