@Test
public
void
bugAfterRefactoringImports
(
)
{
Launcher
launcher
=
new
Launcher
(
)
;
Factory
factory
=
launcher
.
getFactory
(
)
;
final
CtClass
<
?
>
klass
=
factory
.
createClass
(
"foo.A"
)
;
final
CtFieldRead
<
Object
>
fieldRead
=
factory
.
createFieldRead
(
)
;
final
CtField
<
Object
>
negative_infinity
=
(
CtField
<
Object
>
)
factory
.
Class
(
)
.
get
(
Double
.
class
)
.
getField
(
"NEGATIVE_INFINITY"
)
;
fieldRead
.
setVariable
(
negative_infinity
.
getReference
(
)
)
;
launcher
.
getEnvironment
(
)
.
setAutoImports
(
false
)
;
assertEquals
(
"java.lang.Double.NEGATIVE_INFINITY"
,
fieldRead
.
toString
(
)
)
;
launcher
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
assertEquals
(
"Double.NEGATIVE_INFINITY"
,
fieldRead
.
toString
(
)
)
;
final
CtField
<
Object
>
field
=
(
CtField
<
Object
>
)
factory
.
Class
(
)
.
get
(
File
.
class
)
.
getField
(
"separator"
)
;
fieldRead
.
setVariable
(
field
.
getReference
(
)
)
;
field
.
setDefaultExpression
(
fieldRead
)
;
klass
.
addField
(
field
)
;
launcher
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
assertEquals
(
"package foo;\n"
+
"import java.io.File;\n"
+
"class A {\n"
+
"    public static final String separator = File.separator;\n"
+
"}"
,
klass
.
toStringWithImports
(
)
)
;
}
