@Test
public
void
testClassCastExceptionOnForEach
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
run
(
)
;
class
Context
{
int
count
=
0
;
}
{
Context
context
=
new
Context
(
)
;
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
null
)
.
forEach
(
(
CtType
t
)
->
{
context
.
count
++
;
}
)
;
assertTrue
(
context
.
count
>
0
)
;
}
{
Context
context
=
new
Context
(
)
;
try
{
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
null
)
.
forEach
(
(
CtType
t
)
->
{
context
.
count
++
;
throw
new
ClassCastException
(
"TEST"
)
;
}
)
;
fail
(
"It must fail, because body of forEach should be called and thrown CCE"
)
;
}
catch
(
ClassCastException
e
)
{
assertTrue
(
context
.
count
>
0
)
;
assertEquals
(
"TEST"
,
e
.
getMessage
(
)
)
;
}
}
{
Context
context
=
new
Context
(
)
;
try
{
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
null
)
.
forEach
(
new
CtConsumer
<
CtType
>
(
)
{
@Override
public
void
accept
(
CtType
t
)
{
context
.
count
++
;
throw
new
ClassCastException
(
"TEST"
)
;
}
}
)
;
fail
(
"It must fail, because body of forEach should be called and thrown CCE"
)
;
}
catch
(
ClassCastException
e
)
{
assertTrue
(
context
.
count
>
0
)
;
assertEquals
(
"TEST"
,
e
.
getMessage
(
)
)
;
}
}
{
Context
context
=
new
Context
(
)
;
try
{
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
null
)
.
select
(
new
Filter
<
CtType
>
(
)
{
@Override
public
boolean
matches
(
CtType
element
)
{
context
.
count
++
;
throw
new
ClassCastException
(
"TEST"
)
;
}
}
)
.
list
(
)
;
fail
(
"It must fail, because body of select thrown CCE"
)
;
}
catch
(
ClassCastException
e
)
{
assertTrue
(
context
.
count
>
0
)
;
assertEquals
(
"TEST"
,
e
.
getMessage
(
)
)
;
}
}
{
Context
context
=
new
Context
(
)
;
try
{
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
null
)
.
select
(
(
CtType
element
)
->
{
context
.
count
++
;
throw
new
ClassCastException
(
"TEST"
)
;
}
)
.
list
(
)
;
fail
(
"It must fail, because body of select thrown CCE"
)
;
}
catch
(
ClassCastException
e
)
{
assertTrue
(
context
.
count
>
0
)
;
assertEquals
(
"TEST"
,
e
.
getMessage
(
)
)
;
}
}
{
Context
context
=
new
Context
(
)
;
try
{
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
null
)
.
map
(
new
CtFunction
<
CtType
,
Object
>
(
)
{
@Override
public
Object
apply
(
CtType
input
)
{
context
.
count
++
;
throw
new
ClassCastException
(
"TEST"
)
;
}
}
)
.
failurePolicy
(
QueryFailurePolicy
.
IGNORE
)
.
list
(
)
;
fail
(
"It must fail, because body of map thrown CCE"
)
;
}
catch
(
ClassCastException
e
)
{
assertTrue
(
context
.
count
>
0
)
;
assertEquals
(
"TEST"
,
e
.
getMessage
(
)
)
;
}
}
{
Context
context
=
new
Context
(
)
;
try
{
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
null
)
.
map
(
(
CtType
input
)
->
{
context
.
count
++
;
throw
new
ClassCastException
(
"TEST"
)
;
}
)
.
failurePolicy
(
QueryFailurePolicy
.
IGNORE
)
.
list
(
)
;
fail
(
"It must fail, because body of map thrown CCE"
)
;
}
catch
(
ClassCastException
e
)
{
assertTrue
(
context
.
count
>
0
)
;
assertEquals
(
"TEST"
,
e
.
getMessage
(
)
)
;
}
}
{
Context
context
=
new
Context
(
)
;
try
{
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
null
)
.
map
(
new
CtConsumableFunction
<
CtType
>
(
)
{
@Override
public
void
apply
(
CtType
input
,
CtConsumer
<
Object
>
outputConsumer
)
{
context
.
count
++
;
throw
new
ClassCastException
(
"TEST"
)
;
}
}
)
.
failurePolicy
(
QueryFailurePolicy
.
IGNORE
)
.
list
(
)
;
fail
(
"It must fail, because body of map thrown CCE"
)
;
}
catch
(
ClassCastException
e
)
{
assertTrue
(
context
.
count
>
0
)
;
assertEquals
(
"TEST"
,
e
.
getMessage
(
)
)
;
}
}
{
Context
context
=
new
Context
(
)
;
try
{
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
null
)
.
map
(
(
CtType
input
,
CtConsumer
<
Object
>
outputConsumer
)
->
{
context
.
count
++
;
throw
new
ClassCastException
(
"TEST"
)
;
}
)
.
failurePolicy
(
QueryFailurePolicy
.
IGNORE
)
.
list
(
)
;
fail
(
"It must fail, because body of map thrown CCE"
)
;
}
catch
(
ClassCastException
e
)
{
assertTrue
(
context
.
count
>
0
)
;
assertEquals
(
"TEST"
,
e
.
getMessage
(
)
)
;
}
}
}
