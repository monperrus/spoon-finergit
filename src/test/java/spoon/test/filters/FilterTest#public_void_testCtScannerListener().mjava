@Test
public
void
testCtScannerListener
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
,
"--level"
,
"info"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
run
(
)
;
class
Context
{
long
nrOfEnter
=
0
;
long
nrOfEnterRetTrue
=
0
;
long
nrOfExit
=
0
;
long
nrOfResults
=
0
;
}
Context
context1
=
new
Context
(
)
;
List
<
CtElement
>
result1
=
launcher
.
getFactory
(
)
.
getModel
(
)
.
map
(
new
CtScannerFunction
(
)
.
setListener
(
new
CtScannerListener
(
)
{
@Override
public
ScanningMode
enter
(
CtElement
element
)
{
context1
.
nrOfEnter
++
;
if
(
element
instanceof
CtType
)
{
return
ScanningMode
.
SKIP_CHILDREN
;
}
return
ScanningMode
.
NORMAL
;
}
@Override
public
void
exit
(
CtElement
element
)
{
context1
.
nrOfExit
++
;
}
}
)
)
.
list
(
)
;
assertTrue
(
context1
.
nrOfEnter
>
0
)
;
assertFalse
(
result1
.
isEmpty
(
)
)
;
assertEquals
(
context1
.
nrOfEnter
,
context1
.
nrOfExit
)
;
Context
context2
=
new
Context
(
)
;
Iterator
iter
=
result1
.
iterator
(
)
;
launcher
.
getFactory
(
)
.
getModel
(
)
.
map
(
new
CtScannerFunction
(
)
.
setListener
(
new
CtScannerListener
(
)
{
int
inClass
=
0
;
@Override
public
ScanningMode
enter
(
CtElement
element
)
{
context2
.
nrOfEnter
++
;
if
(
inClass
>
0
)
{
return
ScanningMode
.
SKIP_ALL
;
}
if
(
element
instanceof
CtType
)
{
inClass
++
;
}
context2
.
nrOfEnterRetTrue
++
;
return
ScanningMode
.
NORMAL
;
}
@Override
public
void
exit
(
CtElement
element
)
{
context2
.
nrOfExit
++
;
if
(
element
instanceof
CtType
)
{
inClass
--
;
}
assertTrue
(
inClass
==
0
||
inClass
==
1
)
;
}
}
)
)
.
forEach
(
ele
->
{
context2
.
nrOfResults
++
;
assertTrue
(
"ele instanceof "
+
ele
.
getClass
(
)
,
ele
instanceof
CtPackage
||
ele
instanceof
CtType
||
ele
instanceof
CtModule
)
;
assertSame
(
ele
,
iter
.
next
(
)
)
;
}
)
;
assertTrue
(
context2
.
nrOfEnter
>
0
)
;
assertTrue
(
context2
.
nrOfEnter
>
context2
.
nrOfEnterRetTrue
)
;
assertEquals
(
result1
.
size
(
)
,
context2
.
nrOfResults
)
;
assertEquals
(
context2
.
nrOfEnterRetTrue
,
context2
.
nrOfExit
)
;
}
