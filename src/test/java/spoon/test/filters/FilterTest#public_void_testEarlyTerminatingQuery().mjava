@Test
public
void
testEarlyTerminatingQuery
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
,
"--level"
,
"info"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
run
(
)
;
class
Context
{
boolean
wasTerminated
=
false
;
void
failIfTerminated
(
String
place
)
{
assertTrue
(
"The "
+
place
+
" is called after query was terminated."
,
wasTerminated
==
false
)
;
}
}
Context
context
=
new
Context
(
)
;
CtMethod
firstMethod
=
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
e
->
{
context
.
failIfTerminated
(
"Filter#match of filterChildren"
)
;
return
true
;
}
)
.
map
(
(
CtElement
e
)
->
{
context
.
failIfTerminated
(
"Array returning CtFunction#apply of map"
)
;
return
new
CtElement
[
]
{
e
,
e
}
;
}
)
.
map
(
(
CtElement
e
)
->
{
context
.
failIfTerminated
(
"List returning CtFunction#apply of map"
)
;
return
Arrays
.
asList
(
new
CtElement
[
]
{
e
,
e
}
)
;
}
)
.
map
(
(
CtElement
e
,
CtConsumer
<
Object
>
out
)
->
{
context
.
failIfTerminated
(
"CtConsumableFunction#apply of map"
)
;
if
(
e
instanceof
CtMethod
)
{
out
.
accept
(
e
)
;
context
.
wasTerminated
=
true
;
}
out
.
accept
(
e
)
;
}
)
.
map
(
e
->
{
context
.
failIfTerminated
(
"CtFunction#apply of map after CtConsumableFunction"
)
;
return
e
;
}
)
.
first
(
CtMethod
.
class
)
;
assertTrue
(
firstMethod
!=
null
)
;
assertTrue
(
context
.
wasTerminated
)
;
}
