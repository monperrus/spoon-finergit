@Test
public
void
testFunctionQueryStep
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
,
"--level"
,
"info"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
run
(
)
;
class
Context
{
int
count
=
0
;
}
Context
context
=
new
Context
(
)
;
CtQuery
query
=
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
(
CtClass
<
?
>
c
)
->
{
return
true
;
}
)
.
name
(
"filter CtClass only"
)
.
map
(
(
CtClass
<
?
>
c
)
->
c
.
getSuperInterfaces
(
)
)
.
name
(
"super interfaces"
)
.
map
(
(
CtTypeReference
<
?
>
iface
)
->
iface
.
getTypeDeclaration
(
)
)
.
map
(
(
CtType
<
?
>
iface
)
->
iface
.
getAllMethods
(
)
)
.
name
(
"allMethods if interface"
)
.
map
(
(
CtMethod
<
?
>
method
)
->
"make"
.
equals
(
method
.
getSimpleName
(
)
)
)
.
map
(
(
CtMethod
<
?
>
m
)
->
m
.
getType
(
)
)
.
map
(
(
CtTypeReference
<
?
>
t
)
->
t
.
getTypeDeclaration
(
)
)
;
(
(
CtQueryImpl
)
query
)
.
logging
(
true
)
;
query
.
forEach
(
(
CtInterface
<
?
>
c
)
->
{
assertEquals
(
"ITostada"
,
c
.
getSimpleName
(
)
)
;
context
.
count
++
;
}
)
;
assertTrue
(
context
.
count
>
0
)
;
}
