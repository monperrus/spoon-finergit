@Test
public
void
testInvocationFilterWithExecutableInLibrary
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
setSourceOutputDirectory
(
"./target/trash"
)
;
launcher
.
run
(
)
;
final
CtClass
<
Tacos
>
aTacos
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Tacos
.
class
)
;
final
CtInvocation
<
?
>
invSize
=
aTacos
.
getElements
(
new
TypeFilter
<
CtInvocation
<
?
>
>
(
CtInvocation
.
class
)
{
@Override
public
boolean
matches
(
CtInvocation
<
?
>
element
)
{
if
(
element
.
getExecutable
(
)
==
null
)
{
return
false
;
}
return
"size"
.
equals
(
element
.
getExecutable
(
)
.
getSimpleName
(
)
)
&&
super
.
matches
(
element
)
;
}
}
)
.
get
(
0
)
;
final
List
<
CtInvocation
<
?
>
>
invocations
=
aTacos
.
getElements
(
new
InvocationFilter
(
invSize
.
getExecutable
(
)
)
)
;
assertEquals
(
1
,
invocations
.
size
(
)
)
;
final
CtInvocation
<
?
>
expectedInv
=
invocations
.
get
(
0
)
;
assertNotNull
(
expectedInv
)
;
final
CtExecutableReference
<
?
>
expectedExecutable
=
expectedInv
.
getExecutable
(
)
;
assertNotNull
(
expectedExecutable
)
;
assertEquals
(
"size"
,
expectedExecutable
.
getSimpleName
(
)
)
;
assertNull
(
expectedExecutable
.
getDeclaration
(
)
)
;
final
CtExecutable
<
?
>
declaration
=
expectedExecutable
.
getExecutableDeclaration
(
)
;
assertNotNull
(
declaration
)
;
assertEquals
(
"size"
,
declaration
.
getSimpleName
(
)
)
;
}
