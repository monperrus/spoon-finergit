@Test
public
void
testOverriddenMethodFromSubClassOfInterface
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
run
(
)
;
final
CtClass
<
AbstractTostada
>
anAbstractTostada
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
AbstractTostada
.
class
)
;
final
List
<
CtMethod
<
?
>
>
overriddenMethods
=
Query
.
getElements
(
launcher
.
getFactory
(
)
,
new
OverriddenMethodFilter
(
anAbstractTostada
.
getMethodsByName
(
"make"
)
.
get
(
0
)
)
)
;
assertEquals
(
1
,
overriddenMethods
.
size
(
)
)
;
assertEquals
(
ITostada
.
class
,
overriddenMethods
.
get
(
0
)
.
getParent
(
CtInterface
.
class
)
.
getActualClass
(
)
)
;
final
CtClass
<
Tostada
>
aTostada
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Tostada
.
class
)
;
OverriddenMethodFilter
filter
=
new
OverriddenMethodFilter
(
aTostada
.
getMethodsByName
(
"make"
)
.
get
(
0
)
)
;
final
List
<
CtMethod
<
?
>
>
overriddenMethodsFromSub
=
Query
.
getElements
(
launcher
.
getFactory
(
)
,
filter
)
;
assertEquals
(
2
,
overriddenMethodsFromSub
.
size
(
)
)
;
assertEquals
(
AbstractTostada
.
class
,
overriddenMethodsFromSub
.
get
(
0
)
.
getParent
(
CtType
.
class
)
.
getActualClass
(
)
)
;
assertEquals
(
ITostada
.
class
,
overriddenMethodsFromSub
.
get
(
1
)
.
getParent
(
CtType
.
class
)
.
getActualClass
(
)
)
;
}
