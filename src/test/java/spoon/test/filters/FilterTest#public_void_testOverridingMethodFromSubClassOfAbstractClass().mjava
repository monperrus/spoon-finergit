@Test
public
void
testOverridingMethodFromSubClassOfAbstractClass
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
run
(
)
;
final
CtClass
<
Tostada
>
aTostada
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Tostada
.
class
)
;
TreeSet
<
CtMethod
<
?
>
>
ts
=
new
TreeSet
<
CtMethod
<
?
>
>
(
new
DeepRepresentationComparator
(
)
)
;
List
<
CtMethod
<
?
>
>
elements
=
Query
.
getElements
(
launcher
.
getFactory
(
)
,
new
OverridingMethodFilter
(
aTostada
.
getMethodsByName
(
"prepare"
)
.
get
(
0
)
)
)
;
ts
.
addAll
(
elements
)
;
final
List
<
CtMethod
<
?
>
>
overridingMethods
=
Arrays
.
asList
(
ts
.
toArray
(
new
CtMethod
[
]
)
)
;
assertEquals
(
3
,
overridingMethods
.
size
(
)
)
;
assertEquals
(
"spoon.test.filters.testclasses.AbstractTostada$1"
,
overridingMethods
.
get
(
2
)
.
getParent
(
CtClass
.
class
)
.
getQualifiedName
(
)
)
;
assertEquals
(
SubTostada
.
class
,
overridingMethods
.
get
(
1
)
.
getParent
(
CtClass
.
class
)
.
getActualClass
(
)
)
;
assertEquals
(
"spoon.test.filters.testclasses.Tostada$1"
,
overridingMethods
.
get
(
0
)
.
getParent
(
CtClass
.
class
)
.
getQualifiedName
(
)
)
;
final
CtClass
<
SubTostada
>
aSubTostada
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
SubTostada
.
class
)
;
assertEquals
(
0
,
Query
.
getElements
(
launcher
.
getFactory
(
)
,
new
OverridingMethodFilter
(
aSubTostada
.
getMethodsByName
(
"prepare"
)
.
get
(
0
)
)
)
.
size
(
)
)
;
}
