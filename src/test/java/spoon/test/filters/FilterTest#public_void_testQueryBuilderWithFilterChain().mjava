@Test
public
void
testQueryBuilderWithFilterChain
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
run
(
)
;
class
Context
{
CtMethod
<
?
>
method
;
int
count
=
0
;
}
Context
context
=
new
Context
(
)
;
CtQuery
q
=
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
new
TypeFilter
<
CtMethod
<
?
>
>
(
CtMethod
.
class
)
)
.
map
(
(
CtMethod
<
?
>
method
)
->
{
context
.
method
=
method
;
return
method
;
}
)
.
map
(
new
OverriddenMethodQuery
(
)
)
;
q
.
forEach
(
(
CtMethod
<
?
>
method
)
->
{
assertTrue
(
context
.
method
.
getReference
(
)
.
isOverriding
(
method
.
getReference
(
)
)
)
;
assertTrue
(
context
.
method
.
isOverriding
(
method
)
)
;
context
.
count
++
;
}
)
;
assertTrue
(
context
.
count
>
0
)
;
}
