@Test
public
void
testQueryWithOptionalNumberOfInputs
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
,
"--level"
,
"info"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
run
(
)
;
CtClass
<
?
>
cls
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Tacos
.
class
)
;
CtClass
<
?
>
cls2
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Tostada
.
class
)
;
CtClass
<
?
>
cls3
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Antojito
.
class
)
;
CtQuery
q1
=
launcher
.
getFactory
(
)
.
Query
(
)
.
createQuery
(
cls
,
cls2
)
.
map
(
(
CtClass
c
)
->
c
.
getSimpleName
(
)
)
;
assertArrayEquals
(
new
String
[
]
{
"Tacos"
,
"Tostada"
}
,
q1
.
list
(
)
.
toArray
(
)
)
;
CtQuery
q1b
=
launcher
.
getFactory
(
)
.
Query
(
)
.
createQuery
(
Arrays
.
asList
(
cls
,
cls2
)
)
.
map
(
(
CtClass
c
)
->
c
.
getSimpleName
(
)
)
;
assertArrayEquals
(
new
String
[
]
{
"Tacos"
,
"Tostada"
}
,
q1b
.
list
(
)
.
toArray
(
)
)
;
CtQuery
q2
=
launcher
.
getFactory
(
)
.
Query
(
)
.
createQuery
(
cls
,
cls3
)
.
map
(
(
CtClass
c
)
->
c
.
getSimpleName
(
)
)
;
assertArrayEquals
(
new
String
[
]
{
"Tacos"
,
"Antojito"
}
,
q2
.
list
(
)
.
toArray
(
)
)
;
CtQuery
q2b
=
launcher
.
getFactory
(
)
.
Query
(
)
.
createQuery
(
Arrays
.
asList
(
cls
,
cls3
)
)
.
map
(
(
CtClass
c
)
->
c
.
getSimpleName
(
)
)
;
assertArrayEquals
(
new
String
[
]
{
"Tacos"
,
"Antojito"
}
,
q2b
.
list
(
)
.
toArray
(
)
)
;
CtQuery
q3
=
launcher
.
getFactory
(
)
.
Query
(
)
.
createQuery
(
cls
,
cls2
,
cls3
)
.
map
(
(
CtClass
c
)
->
c
.
getSimpleName
(
)
)
;
assertArrayEquals
(
new
String
[
]
{
"Tacos"
,
"Tostada"
,
"Antojito"
}
,
q3
.
list
(
)
.
toArray
(
)
)
;
CtQuery
q3b
=
launcher
.
getFactory
(
)
.
Query
(
)
.
createQuery
(
Arrays
.
asList
(
cls
,
cls2
,
cls3
)
)
.
map
(
(
CtClass
c
)
->
c
.
getSimpleName
(
)
)
;
assertArrayEquals
(
new
String
[
]
{
"Tacos"
,
"Tostada"
,
"Antojito"
}
,
q3b
.
list
(
)
.
toArray
(
)
)
;
}
