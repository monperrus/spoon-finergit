@Test
public
void
testReflectionBasedTypeFilter
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
run
(
)
;
List
<
CtClass
<
?
>
>
allClasses
=
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
getElements
(
new
TypeFilter
<
>
(
CtClass
.
class
)
)
;
assertTrue
(
allClasses
.
size
(
)
>
0
)
;
allClasses
.
forEach
(
result
->
{
assertTrue
(
result
instanceof
CtClass
)
;
}
)
;
List
<
CtClass
<
?
>
>
allClasses2
=
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
getElements
(
new
Filter
<
CtClass
<
?
>
>
(
)
{
@Override
public
boolean
matches
(
CtClass
<
?
>
element
)
{
return
true
;
}
}
)
;
assertArrayEquals
(
allClasses
.
toArray
(
)
,
allClasses2
.
toArray
(
)
)
;
List
<
CtClass
<
?
>
>
allClasses3
=
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
getElements
(
(
CtClass
<
?
>
element
)
->
true
)
;
assertArrayEquals
(
allClasses
.
toArray
(
)
,
allClasses3
.
toArray
(
)
)
;
final
CtClass
<
Tacos
>
aTacos
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Tacos
.
class
)
;
final
CtInvocation
<
?
>
invSize
=
aTacos
.
getElements
(
new
AbstractFilter
<
CtInvocation
<
?
>
>
(
)
{
@Override
public
boolean
matches
(
CtInvocation
<
?
>
element
)
{
if
(
element
.
getExecutable
(
)
==
null
)
{
return
false
;
}
return
"size"
.
equals
(
element
.
getExecutable
(
)
.
getSimpleName
(
)
)
&&
super
.
matches
(
element
)
;
}
}
)
.
get
(
0
)
;
assertNotNull
(
invSize
)
;
}
