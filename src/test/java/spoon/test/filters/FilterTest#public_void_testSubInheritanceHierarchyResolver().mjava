@Test
public
void
testSubInheritanceHierarchyResolver
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
,
"--level"
,
"info"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/filters/testclasses"
)
;
launcher
.
buildModel
(
)
;
SubInheritanceHierarchyResolver
resolver
=
new
SubInheritanceHierarchyResolver
(
launcher
.
getModel
(
)
.
getRootPackage
(
)
)
;
resolver
.
forEachSubTypeInPackage
(
new
CtConsumer
<
CtTypeInformation
>
(
)
{
@Override
public
void
accept
(
CtTypeInformation
ctTypeInformation
)
{
fail
(
)
;
}
}
)
;
resolver
.
addSuperType
(
launcher
.
getFactory
(
)
.
Type
(
)
.
createReference
(
AbstractTostada
.
class
)
)
;
class
Counter
{
int
counter
=
0
;
}
Counter
c
=
new
Counter
(
)
;
resolver
.
forEachSubTypeInPackage
(
new
CtConsumer
<
CtTypeInformation
>
(
)
{
@Override
public
void
accept
(
CtTypeInformation
ctTypeInformation
)
{
c
.
counter
++
;
}
}
)
;
assertEquals
(
5
,
c
.
counter
)
;
resolver
.
addSuperType
(
launcher
.
getFactory
(
)
.
Type
(
)
.
createReference
(
Tostada
.
class
)
)
;
resolver
.
forEachSubTypeInPackage
(
new
CtConsumer
<
CtTypeInformation
>
(
)
{
@Override
public
void
accept
(
CtTypeInformation
ctTypeInformation
)
{
fail
(
)
;
}
}
)
;
resolver
.
addSuperType
(
launcher
.
getFactory
(
)
.
Type
(
)
.
createReference
(
ITostada
.
class
)
)
;
Counter
c2
=
new
Counter
(
)
;
resolver
.
forEachSubTypeInPackage
(
new
CtConsumer
<
CtTypeInformation
>
(
)
{
@Override
public
void
accept
(
CtTypeInformation
ctTypeInformation
)
{
c2
.
counter
++
;
assertEquals
(
"spoon.test.filters.testclasses.Tacos"
,
ctTypeInformation
.
getQualifiedName
(
)
)
;
}
}
)
;
assertEquals
(
1
,
c2
.
counter
)
;
}
