@Test
public
void
testAccessToGenerics
(
)
throws
Exception
{
Launcher
spoon
=
new
Launcher
(
)
;
Factory
factory
=
spoon
.
createFactory
(
)
;
SpoonCompiler
compiler
=
spoon
.
createCompiler
(
factory
,
SpoonResourceHelper
.
resources
(
"./src/test/java/spoon/test/generics/Foo.java"
,
"./src/test/java/spoon/test/generics/Bar.java"
)
)
;
compiler
.
build
(
)
;
CtClass
<
?
>
foo
=
(
CtClass
<
?
>
)
factory
.
Type
(
)
.
get
(
Foo
.
class
)
;
CtInterface
<
?
>
bar
=
(
CtInterface
<
?
>
)
factory
.
Type
(
)
.
get
(
Bar
.
class
)
;
final
CtNewClass
<
?
>
newAnonymousBar
=
foo
.
getElements
(
new
AbstractFilter
<
CtNewClass
<
?
>
>
(
CtNewClass
.
class
)
{
@Override
public
boolean
matches
(
CtNewClass
<
?
>
element
)
{
return
element
.
getAnonymousClass
(
)
.
isAnonymous
(
)
;
}
}
)
.
get
(
0
)
;
final
List
<
CtTypeReference
<
?
>
>
barGenerics
=
bar
.
getFormalTypeParameters
(
)
;
final
CtClass
<
?
>
anonymousBar
=
newAnonymousBar
.
getAnonymousClass
(
)
;
assertEquals
(
1
,
anonymousBar
.
getSuperInterfaces
(
)
.
size
(
)
)
;
assertEquals
(
Bar
.
class
,
anonymousBar
.
getSuperInterfaces
(
)
.
toArray
(
new
CtTypeReference
[
]
)
[
0
]
.
getActualClass
(
)
)
;
final
List
<
CtTypeReference
<
?
>
>
newClassBarGenerics
=
anonymousBar
.
getSuperclass
(
)
.
getActualTypeArguments
(
)
;
assertEquals
(
"Name of the first generic parameter in Bar interface must to be I."
,
"I"
,
barGenerics
.
get
(
0
)
.
getSimpleName
(
)
)
;
assertEquals
(
"Name of the first generic parameter in Bar usage must to be K."
,
"K"
,
newClassBarGenerics
.
get
(
0
)
.
getSimpleName
(
)
)
;
assertEquals
(
"Name of the second generic parameter in Bar interface must to be O."
,
"O"
,
barGenerics
.
get
(
1
)
.
getSimpleName
(
)
)
;
assertEquals
(
"Name of the second generic parameter in Bar usage must to be V."
,
"V"
,
newClassBarGenerics
.
get
(
1
)
.
getSimpleName
(
)
)
;
}
