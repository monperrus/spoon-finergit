@Test
public
void
testClassTypingContext
(
)
throws
Exception
{
Factory
factory
=
build
(
new
File
(
"src/test/java/spoon/test/generics/testclasses"
)
)
;
CtClass
<
?
>
ctClassCelebrationLunch
=
factory
.
Class
(
)
.
get
(
CelebrationLunch
.
class
)
;
CtTypeReference
<
?
>
typeReferenceOfDisgust
=
ctClassCelebrationLunch
.
filterChildren
(
new
NamedElementFilter
<
>
(
CtNamedElement
.
class
,
"disgust"
)
)
.
map
(
(
CtTypedElement
te
)
->
{
return
te
.
getType
(
)
;
}
)
.
first
(
)
;
assertEquals
(
"spoon.test.generics.testclasses.CelebrationLunch<java.lang.Integer, java.lang.Long, java.lang.Double>.WeddingLunch<spoon.test.generics.testclasses.Mole>"
,
typeReferenceOfDisgust
.
toString
(
)
)
;
CtMethod
<
?
>
tWeddingLunch_eatMe
=
typeReferenceOfDisgust
.
getDeclaration
(
)
.
filterChildren
(
(
CtNamedElement
e
)
->
"eatMe"
.
equals
(
e
.
getSimpleName
(
)
)
)
.
first
(
)
;
CtClass
<
?
>
ctClassLunch
=
factory
.
Class
(
)
.
get
(
Lunch
.
class
)
;
CtMethod
<
?
>
ctClassLunch_eatMe
=
ctClassLunch
.
filterChildren
(
(
CtNamedElement
e
)
->
"eatMe"
.
equals
(
e
.
getSimpleName
(
)
)
)
.
first
(
)
;
CtTypeReference
<
?
>
ctWeddingLunch_X
=
tWeddingLunch_eatMe
.
getParameters
(
)
.
get
(
0
)
.
getType
(
)
;
assertEquals
(
"X"
,
ctWeddingLunch_X
.
getSimpleName
(
)
)
;
CtTypeReference
<
?
>
ctClassLunch_A
=
ctClassLunch_eatMe
.
getParameters
(
)
.
get
(
0
)
.
getType
(
)
;
assertEquals
(
"A"
,
ctClassLunch_A
.
getSimpleName
(
)
)
;
ClassTypingContext
typingContextOfDisgust
=
new
ClassTypingContext
(
typeReferenceOfDisgust
)
;
assertSame
(
typeReferenceOfDisgust
.
getTypeDeclaration
(
)
,
typingContextOfDisgust
.
getAdaptationScope
(
)
)
;
assertEquals
(
"spoon.test.generics.testclasses.Mole"
,
typingContextOfDisgust
.
adaptType
(
ctWeddingLunch_X
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"spoon.test.generics.testclasses.Mole"
,
typingContextOfDisgust
.
adaptType
(
ctClassLunch_A
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"java.lang.Double"
,
typingContextOfDisgust
.
getEnclosingGenericTypeAdapter
(
)
.
adaptType
(
ctClassLunch_A
)
.
getQualifiedName
(
)
)
;
ClassTypingContext
sthOftWeddingLunch_X
=
new
ClassTypingContext
(
typeReferenceOfDisgust
.
getDeclaration
(
)
)
;
assertSame
(
typeReferenceOfDisgust
.
getDeclaration
(
)
,
sthOftWeddingLunch_X
.
getAdaptationScope
(
)
)
;
assertEquals
(
"X"
,
sthOftWeddingLunch_X
.
adaptType
(
ctWeddingLunch_X
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"X"
,
sthOftWeddingLunch_X
.
adaptType
(
ctClassLunch_A
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"M"
,
sthOftWeddingLunch_X
.
getEnclosingGenericTypeAdapter
(
)
.
adaptType
(
ctClassLunch_A
)
.
getQualifiedName
(
)
)
;
}
