@Test
public
void
testMethodTypingContext
(
)
throws
Exception
{
Factory
factory
=
build
(
new
File
(
"src/test/java/spoon/test/generics/testclasses"
)
)
;
CtClass
<
?
>
ctClassWeddingLunch
=
factory
.
Class
(
)
.
get
(
WeddingLunch
.
class
)
;
CtMethod
<
?
>
trWeddingLunch_eatMe
=
ctClassWeddingLunch
.
filterChildren
(
new
NameFilter
<
>
(
"eatMe"
)
)
.
first
(
)
;
MethodTypingContext
methodSTH
=
new
MethodTypingContext
(
)
.
setMethod
(
trWeddingLunch_eatMe
)
;
assertSame
(
trWeddingLunch_eatMe
,
methodSTH
.
getAdaptationScope
(
)
)
;
CtClass
<
?
>
ctClassLunch
=
factory
.
Class
(
)
.
get
(
Lunch
.
class
)
;
CtMethod
<
?
>
trLunch_eatMe
=
ctClassLunch
.
filterChildren
(
new
NameFilter
<
>
(
"eatMe"
)
)
.
first
(
)
;
CtInvocation
<
?
>
invokeReserve
=
factory
.
Class
(
)
.
get
(
CelebrationLunch
.
class
)
.
filterChildren
(
new
TypeFilter
<
>
(
CtInvocation
.
class
)
)
.
select
(
(
CtInvocation
i
)
->
"reserve"
.
equals
(
i
.
getExecutable
(
)
.
getSimpleName
(
)
)
)
.
first
(
)
;
MethodTypingContext
methodReserveTC
=
new
MethodTypingContext
(
)
.
setInvocation
(
invokeReserve
)
;
assertSame
(
invokeReserve
.
getExecutable
(
)
.
getDeclaration
(
)
,
methodReserveTC
.
getAdaptationScope
(
)
)
;
CtMethod
<
?
>
methodReserve
=
(
CtMethod
<
?
>
)
invokeReserve
.
getExecutable
(
)
.
getDeclaration
(
)
;
CtTypeParameter
methodReserve_S
=
methodReserve
.
getFormalCtTypeParameters
(
)
.
get
(
0
)
;
assertEquals
(
"S"
,
methodReserve_S
.
getSimpleName
(
)
)
;
assertEquals
(
"spoon.test.generics.testclasses.Tacos"
,
methodReserveTC
.
adaptType
(
methodReserve_S
)
.
getQualifiedName
(
)
)
;
CtClass
classSection
=
(
CtClass
)
methodReserve
.
getDeclaringType
(
)
;
assertEquals
(
"spoon.test.generics.testclasses.CelebrationLunch$WeddingLunch$Section"
,
classSection
.
getQualifiedName
(
)
)
;
CtTypeParameter
classSection_Y
=
classSection
.
getFormalCtTypeParameters
(
)
.
get
(
0
)
;
assertEquals
(
"Y"
,
classSection_Y
.
getSimpleName
(
)
)
;
assertEquals
(
"spoon.test.generics.testclasses.Paella"
,
methodReserveTC
.
adaptType
(
classSection_Y
)
.
getQualifiedName
(
)
)
;
CtClass
classWeddingLunch
=
(
CtClass
)
classSection
.
getDeclaringType
(
)
;
assertEquals
(
"spoon.test.generics.testclasses.CelebrationLunch$WeddingLunch"
,
classWeddingLunch
.
getQualifiedName
(
)
)
;
CtTypeParameter
classWeddingLunch_X
=
classWeddingLunch
.
getFormalCtTypeParameters
(
)
.
get
(
0
)
;
assertEquals
(
"X"
,
classWeddingLunch_X
.
getSimpleName
(
)
)
;
assertEquals
(
"spoon.test.generics.testclasses.Mole"
,
methodReserveTC
.
adaptType
(
classWeddingLunch_X
)
.
getQualifiedName
(
)
)
;
CtClass
classCelebrationLunch
=
(
CtClass
)
classWeddingLunch
.
getDeclaringType
(
)
;
assertEquals
(
"spoon.test.generics.testclasses.CelebrationLunch"
,
classCelebrationLunch
.
getQualifiedName
(
)
)
;
CtTypeParameter
classCelebrationLunch_K
=
classCelebrationLunch
.
getFormalCtTypeParameters
(
)
.
get
(
0
)
;
CtTypeParameter
classCelebrationLunch_L
=
classCelebrationLunch
.
getFormalCtTypeParameters
(
)
.
get
(
1
)
;
CtTypeParameter
classCelebrationLunch_M
=
classCelebrationLunch
.
getFormalCtTypeParameters
(
)
.
get
(
2
)
;
assertEquals
(
"K"
,
classCelebrationLunch_K
.
getSimpleName
(
)
)
;
assertEquals
(
"L"
,
classCelebrationLunch_L
.
getSimpleName
(
)
)
;
assertEquals
(
"M"
,
classCelebrationLunch_M
.
getSimpleName
(
)
)
;
assertEquals
(
"spoon.test.generics.testclasses.Tacos"
,
methodReserveTC
.
adaptType
(
classCelebrationLunch_K
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"spoon.test.generics.testclasses.Paella"
,
methodReserveTC
.
adaptType
(
classCelebrationLunch_L
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"spoon.test.generics.testclasses.Mole"
,
methodReserveTC
.
adaptType
(
classCelebrationLunch_M
)
.
getQualifiedName
(
)
)
;
GenericTypeAdapter
celebrationLunchTC
=
methodReserveTC
.
getEnclosingGenericTypeAdapter
(
)
.
getEnclosingGenericTypeAdapter
(
)
.
getEnclosingGenericTypeAdapter
(
)
;
assertEquals
(
"java.lang.Integer"
,
celebrationLunchTC
.
adaptType
(
classCelebrationLunch_K
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"java.lang.Long"
,
celebrationLunchTC
.
adaptType
(
classCelebrationLunch_L
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"java.lang.Double"
,
celebrationLunchTC
.
adaptType
(
classCelebrationLunch_M
)
.
getQualifiedName
(
)
)
;
}
