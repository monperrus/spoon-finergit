@Test
public
void
testMethodTypingContextAdaptMethod
(
)
throws
Exception
{
Factory
factory
=
build
(
new
File
(
"src/test/java/spoon/test/generics/testclasses"
)
)
;
CtClass
<
?
>
ctClassLunch
=
factory
.
Class
(
)
.
get
(
Lunch
.
class
)
;
CtMethod
<
?
>
trLunch_eatMe
=
ctClassLunch
.
filterChildren
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"eatMe"
)
)
.
first
(
)
;
CtClass
<
?
>
ctClassWeddingLunch
=
factory
.
Class
(
)
.
get
(
WeddingLunch
.
class
)
;
ClassTypingContext
ctcWeddingLunch
=
new
ClassTypingContext
(
ctClassWeddingLunch
)
;
final
MethodTypingContext
methodSTH
=
new
MethodTypingContext
(
)
.
setClassTypingContext
(
ctcWeddingLunch
)
;
methodSTH
.
setMethod
(
trLunch_eatMe
)
;
CtMethod
<
?
>
adaptedLunchEatMe
=
(
CtMethod
<
?
>
)
methodSTH
.
getAdaptationScope
(
)
;
assertTrue
(
adaptedLunchEatMe
!=
trLunch_eatMe
)
;
assertSame
(
ctClassWeddingLunch
,
adaptedLunchEatMe
.
getDeclaringType
(
)
)
;
for
(
CtTypeMember
typeMember
:
ctClassWeddingLunch
.
getTypeMembers
(
)
)
{
assertFalse
(
adaptedLunchEatMe
==
typeMember
)
;
}
assertEquals
(
"eatMe"
,
adaptedLunchEatMe
.
getSimpleName
(
)
)
;
assertEquals
(
1
,
adaptedLunchEatMe
.
getFormalCtTypeParameters
(
)
.
size
(
)
)
;
assertEquals
(
"C"
,
adaptedLunchEatMe
.
getFormalCtTypeParameters
(
)
.
get
(
0
)
.
getQualifiedName
(
)
)
;
assertEquals
(
3
,
adaptedLunchEatMe
.
getParameters
(
)
.
size
(
)
)
;
assertEquals
(
"X"
,
adaptedLunchEatMe
.
getParameters
(
)
.
get
(
0
)
.
getType
(
)
.
getQualifiedName
(
)
)
;
assertEquals
(
Tacos
.
class
.
getName
(
)
,
adaptedLunchEatMe
.
getParameters
(
)
.
get
(
1
)
.
getType
(
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"C"
,
adaptedLunchEatMe
.
getParameters
(
)
.
get
(
2
)
.
getType
(
)
.
getQualifiedName
(
)
)
;
methodSTH
.
setMethod
(
adaptedLunchEatMe
)
;
assertSame
(
adaptedLunchEatMe
,
methodSTH
.
getAdaptationScope
(
)
)
;
}
