@Test
public
void
testTypeParameterReferenceAsActualTypeArgument
(
)
throws
Exception
{
CtType
<
Tacos
>
aTacos
=
buildNoClasspath
(
ClassThatDefinesANewTypeArgument
.
class
)
.
Type
(
)
.
get
(
ClassThatDefinesANewTypeArgument
.
class
)
;
CtTypeReference
<
?
>
typeRef
=
aTacos
.
getReference
(
)
;
assertSame
(
aTacos
,
typeRef
.
getDeclaration
(
)
)
;
CtTypeParameter
typeParam
=
aTacos
.
getFormalCtTypeParameters
(
)
.
get
(
0
)
;
CtTypeParameterReference
typeParamRef
=
typeParam
.
getReference
(
)
;
assertSame
(
typeParam
,
typeParamRef
.
getDeclaration
(
)
)
;
assertEquals
(
"spoon.test.generics.ClassThatDefinesANewTypeArgument"
,
typeRef
.
toString
(
)
)
;
typeRef
.
addActualTypeArgument
(
typeParamRef
)
;
assertEquals
(
"spoon.test.generics.ClassThatDefinesANewTypeArgument<T>"
,
typeRef
.
toString
(
)
)
;
assertSame
(
aTacos
,
typeRef
.
getDeclaration
(
)
)
;
assertSame
(
typeParamRef
,
typeRef
.
getActualTypeArguments
(
)
.
get
(
0
)
)
;
assertSame
(
typeRef
,
typeParamRef
.
getParent
(
)
)
;
assertEquals
(
null
,
typeParamRef
.
getDeclaration
(
)
)
;
assertEquals
(
typeParam
,
typeParamRef
.
getTypeParameterDeclaration
(
)
)
;
typeParamRef
.
setSimpleName
(
"Y"
)
;
assertEquals
(
typeParam
,
typeParamRef
.
getTypeParameterDeclaration
(
)
)
;
}
