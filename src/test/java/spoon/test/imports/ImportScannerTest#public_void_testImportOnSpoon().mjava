@Test
public
void
testImportOnSpoon
(
)
throws
IOException
{
File
targetDir
=
new
File
(
"./target/import-test"
)
;
Launcher
spoon
=
new
Launcher
(
)
;
spoon
.
addInputResource
(
"./src/main/java/spoon/"
)
;
spoon
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
spoon
.
getEnvironment
(
)
.
setCommentEnabled
(
true
)
;
spoon
.
getEnvironment
(
)
.
setSourceOutputDirectory
(
targetDir
)
;
spoon
.
getEnvironment
(
)
.
setLevel
(
"warn"
)
;
spoon
.
buildModel
(
)
;
PrettyPrinter
prettyPrinter
=
new
DefaultJavaPrettyPrinter
(
spoon
.
getEnvironment
(
)
)
;
Map
<
CtType
,
List
<
String
>
>
missingImports
=
new
HashMap
<
>
(
)
;
Map
<
CtType
,
List
<
String
>
>
unusedImports
=
new
HashMap
<
>
(
)
;
JavaOutputProcessor
outputProcessor
;
for
(
CtType
<
?
>
ctType
:
spoon
.
getModel
(
)
.
getAllTypes
(
)
)
{
if
(
!
ctType
.
isTopLevel
(
)
)
{
continue
;
}
outputProcessor
=
new
JavaOutputProcessor
(
prettyPrinter
)
;
outputProcessor
.
setFactory
(
spoon
.
getFactory
(
)
)
;
outputProcessor
.
init
(
)
;
Set
<
String
>
computedTypeImports
=
new
HashSet
<
>
(
)
;
Set
<
String
>
computedStaticImports
=
new
HashSet
<
>
(
)
;
outputProcessor
.
createJavaFile
(
ctType
)
;
assertEquals
(
1
,
outputProcessor
.
getCreatedFiles
(
)
.
size
(
)
)
;
List
<
String
>
content
=
Files
.
readAllLines
(
outputProcessor
.
getCreatedFiles
(
)
.
get
(
0
)
.
toPath
(
)
)
;
for
(
String
computedImport
:
content
)
{
if
(
computedImport
.
startsWith
(
"import"
)
)
{
String
computedImportStr
=
computedImport
.
replace
(
"import "
,
""
)
.
replace
(
";"
,
""
)
.
trim
(
)
;
if
(
computedImportStr
.
contains
(
"static "
)
)
{
computedStaticImports
.
add
(
computedImportStr
.
replace
(
"static "
,
""
)
.
trim
(
)
)
;
}
else
if
(
!
""
.
equals
(
computedImportStr
)
)
{
computedTypeImports
.
add
(
computedImportStr
)
;
}
}
}
List
<
String
>
typeImports
=
getTypeImportsFromSourceCode
(
ctType
.
getPosition
(
)
.
getCompilationUnit
(
)
.
getOriginalSourceCode
(
)
)
;
List
<
String
>
staticImports
=
getStaticImportsFromSourceCode
(
ctType
.
getPosition
(
)
.
getCompilationUnit
(
)
.
getOriginalSourceCode
(
)
)
;
for
(
String
computedImport
:
computedTypeImports
)
{
if
(
!
typeImports
.
contains
(
computedImport
)
&&
!
isTypePresentInStaticImports
(
computedImport
,
staticImports
)
)
{
if
(
!
unusedImports
.
containsKey
(
ctType
)
)
{
unusedImports
.
put
(
ctType
,
new
ArrayList
<
>
(
)
)
;
}
unusedImports
.
get
(
ctType
)
.
add
(
computedImport
)
;
}
}
for
(
String
computedImport
:
computedStaticImports
)
{
String
typeOfStatic
=
computedImport
.
substring
(
0
,
computedImport
.
lastIndexOf
(
"."
)
)
;
if
(
!
staticImports
.
contains
(
computedImport
)
&&
!
typeImports
.
contains
(
typeOfStatic
)
)
{
if
(
!
unusedImports
.
containsKey
(
ctType
)
)
{
unusedImports
.
put
(
ctType
,
new
ArrayList
<
>
(
)
)
;
}
unusedImports
.
get
(
ctType
)
.
add
(
computedImport
)
;
}
}
for
(
String
anImport
:
typeImports
)
{
if
(
!
computedTypeImports
.
contains
(
anImport
)
)
{
if
(
!
missingImports
.
containsKey
(
ctType
)
)
{
missingImports
.
put
(
ctType
,
new
ArrayList
<
>
(
)
)
;
}
missingImports
.
get
(
ctType
)
.
add
(
anImport
)
;
}
}
for
(
String
anImport
:
staticImports
)
{
String
typeOfStatic
=
anImport
.
substring
(
0
,
anImport
.
lastIndexOf
(
"."
)
)
;
if
(
!
computedStaticImports
.
contains
(
anImport
)
&&
!
computedTypeImports
.
contains
(
typeOfStatic
)
)
{
if
(
!
missingImports
.
containsKey
(
ctType
)
)
{
missingImports
.
put
(
ctType
,
new
ArrayList
<
>
(
)
)
;
}
missingImports
.
get
(
ctType
)
.
add
(
anImport
)
;
}
}
}
if
(
!
missingImports
.
isEmpty
(
)
||
!
unusedImports
.
isEmpty
(
)
)
{
int
countUnusedImports
=
0
;
for
(
List
<
String
>
imports
:
unusedImports
.
values
(
)
)
{
countUnusedImports
=
imports
.
size
(
)
;
}
int
countMissingImports
=
0
;
for
(
List
<
String
>
imports
:
missingImports
.
values
(
)
)
{
countMissingImports
=
imports
.
size
(
)
;
}
Launcher
.
LOGGER
.
warn
(
"ImportScannerTest: Import scanner imports "
+
countUnusedImports
+
" unused imports and misses "
+
countMissingImports
+
" imports"
)
;
assertEquals
(
"Import scanner missed "
+
countMissingImports
+
" imports"
,
0
,
countMissingImports
)
;
}
}
