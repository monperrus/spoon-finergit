private
void
assertImportVisitor
(
CtImport
imprt
)
{
class
ImportInfo
{
CtImportKind
kind
;
void
setKind
(
CtImportKind
kind
)
{
if
(
this
.
kind
!=
null
)
{
fail
(
)
;
}
this
.
kind
=
kind
;
}
}
ImportInfo
info
=
new
ImportInfo
(
)
;
imprt
.
accept
(
new
CtImportVisitor
(
)
{
@Override
public
<
T
>
void
visitTypeImport
(
CtTypeReference
<
T
>
typeReference
)
{
info
.
setKind
(
CtImportKind
.
TYPE
)
;
assertSame
(
imprt
.
getReference
(
)
,
typeReference
)
;
}
@Override
public
<
T
>
void
visitMethodImport
(
CtExecutableReference
<
T
>
executableReference
)
{
info
.
setKind
(
CtImportKind
.
METHOD
)
;
assertSame
(
imprt
.
getReference
(
)
,
executableReference
)
;
}
@Override
public
<
T
>
void
visitFieldImport
(
CtFieldReference
<
T
>
fieldReference
)
{
info
.
setKind
(
CtImportKind
.
FIELD
)
;
assertSame
(
imprt
.
getReference
(
)
,
fieldReference
)
;
}
@Override
public
void
visitAllTypesImport
(
CtPackageReference
packageReference
)
{
info
.
setKind
(
CtImportKind
.
ALL_TYPES
)
;
assertSame
(
imprt
.
getReference
(
)
,
packageReference
)
;
}
@Override
public
<
T
>
void
visitAllStaticMembersImport
(
CtTypeMemberWildcardImportReference
typeReference
)
{
info
.
setKind
(
CtImportKind
.
ALL_STATIC_MEMBERS
)
;
assertSame
(
imprt
.
getReference
(
)
,
typeReference
)
;
}
}
)
;
assertSame
(
imprt
.
getImportKind
(
)
,
info
.
kind
)
;
}
