@Test
public
void
testAccessType
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"-i"
,
"./src/test/java/spoon/test/imports/testclasses"
}
)
;
launcher
.
buildModel
(
)
;
final
CtClass
<
ImportTest
>
aInnerClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
ClientClass
.
class
.
getName
(
)
+
"$InnerClass"
)
;
final
CtClass
<
ImportTest
>
aSuperClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
"spoon.test.imports.testclasses.internal.SuperClass"
)
;
assertEquals
(
ClientClass
.
class
.
getName
(
)
+
"$InnerClass"
,
aInnerClass
.
getQualifiedName
(
)
)
;
assertEquals
(
ClientClass
.
class
.
getName
(
)
,
aInnerClass
.
getReference
(
)
.
getAccessType
(
)
.
getQualifiedName
(
)
)
;
final
CtTypeReference
<
?
>
innerClassProtectedByGetSuperClass
=
aInnerClass
.
getSuperclass
(
)
;
final
CtTypeReference
<
?
>
innerClassProtectedByQualifiedName
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
"spoon.test.imports.testclasses.internal.SuperClass$InnerClassProtected"
)
.
getReference
(
)
;
assertEquals
(
"spoon.test.imports.testclasses.internal.SuperClass$InnerClassProtected"
,
innerClassProtectedByGetSuperClass
.
getQualifiedName
(
)
)
;
assertEquals
(
"spoon.test.imports.testclasses.internal.SuperClass$InnerClassProtected"
,
innerClassProtectedByQualifiedName
.
getQualifiedName
(
)
)
;
assertEquals
(
"spoon.test.imports.testclasses.internal.ChildClass"
,
innerClassProtectedByGetSuperClass
.
getAccessType
(
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"spoon.test.imports.testclasses.internal.SuperClass"
,
innerClassProtectedByQualifiedName
.
getAccessType
(
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"spoon.test.imports.testclasses.internal.ChildClass.InnerClassProtected"
,
innerClassProtectedByGetSuperClass
.
toString
(
)
)
;
assertEquals
(
"spoon.test.imports.testclasses.internal.SuperClass.InnerClassProtected"
,
innerClassProtectedByQualifiedName
.
toString
(
)
)
;
}
