@Test
public
void
testCanAccess
(
)
{
class
Checker
{
final
Launcher
launcher
;
final
CtTypeReference
<
?
>
aClientClass
;
final
CtTypeReference
<
?
>
anotherClass
;
Checker
(
)
{
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"-i"
,
"./src/test/java/spoon/test/imports/testclasses"
,
"--with-imports"
}
)
;
launcher
.
buildModel
(
)
;
aClientClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
ClientClass
.
class
)
.
getReference
(
)
;
anotherClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Tacos
.
class
)
.
getReference
(
)
;
}
void
checkCanAccess
(
String
aClassName
,
boolean
isInterface
,
boolean
canAccessClientClass
,
boolean
canAccessTacos
,
String
clientAccessType
,
String
anotherAccessType
)
{
CtTypeReference
<
?
>
target
;
if
(
isInterface
)
{
target
=
launcher
.
getFactory
(
)
.
Interface
(
)
.
create
(
aClassName
)
.
getReference
(
)
;
}
else
{
target
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
aClassName
)
.
getReference
(
)
;
}
boolean
isNested
=
target
.
getDeclaringType
(
)
!=
null
;
CtTypeReference
<
?
>
accessType
;
if
(
canAccessClientClass
)
{
assertTrue
(
"ClientClass should have access to "
+
aClassName
+
" but it has not"
,
aClientClass
.
canAccess
(
target
)
)
;
}
else
{
assertFalse
(
"ClientClass should have NO access to "
+
aClassName
+
" but it has"
,
aClientClass
.
canAccess
(
target
)
)
;
}
if
(
isNested
)
{
accessType
=
target
.
getAccessType
(
)
;
if
(
clientAccessType
!=
null
)
{
assertEquals
(
clientAccessType
,
accessType
.
getQualifiedName
(
)
)
;
}
else
if
(
accessType
!=
null
)
{
fail
(
"ClientClass should have NO accessType to "
+
aClassName
+
" but it has "
+
accessType
.
getQualifiedName
(
)
)
;
}
}
if
(
canAccessTacos
)
{
assertTrue
(
"Tacos class should have access to "
+
aClassName
+
" but it has not"
,
anotherClass
.
canAccess
(
target
)
)
;
}
else
{
assertFalse
(
"Tacos class should have NO access to "
+
aClassName
+
" but it has"
,
anotherClass
.
canAccess
(
target
)
)
;
}
if
(
isNested
)
{
if
(
anotherAccessType
!=
null
)
{
accessType
=
target
.
getAccessType
(
)
;
assertEquals
(
anotherAccessType
,
accessType
.
getQualifiedName
(
)
)
;
}
else
{
try
{
accessType
=
target
.
getAccessType
(
)
;
}
catch
(
SpoonException
e
)
{
if
(
!
e
.
getMessage
(
)
.
contains
(
"Cannot compute access path to type: "
)
)
{
throw
e
;
}
accessType
=
null
;
}
}
}
}
}
Checker
c
=
new
Checker
(
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.ClientClass"
,
false
,
true
,
true
,
null
,
null
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.ClientClass$InnerClass"
,
false
,
true
,
false
,
"spoon.test.imports.testclasses.ClientClass"
,
"spoon.test.imports.testclasses.ClientClass"
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.ChildClass"
,
false
,
true
,
true
,
null
,
null
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.PublicInterface2"
,
true
,
true
,
true
,
null
,
null
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.PublicInterface2$NestedInterface"
,
true
,
true
,
true
,
"spoon.test.imports.testclasses.internal.PublicInterface2"
,
"spoon.test.imports.testclasses.internal.PublicInterface2"
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.PublicInterface2$NestedClass"
,
true
,
true
,
true
,
"spoon.test.imports.testclasses.internal.PublicInterface2"
,
"spoon.test.imports.testclasses.internal.PublicInterface2"
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.SuperClass$PublicInterface"
,
true
,
true
,
true
,
"spoon.test.imports.testclasses.internal.SuperClass"
,
null
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.SuperClass$PackageProtectedInterface"
,
true
,
true
,
true
,
"spoon.test.imports.testclasses.internal.SuperClass"
,
null
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.SuperClass$ProtectedInterface"
,
true
,
true
,
true
,
"spoon.test.imports.testclasses.internal.SuperClass"
,
null
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.SuperClass$ProtectedInterface$NestedOfProtectedInterface"
,
true
,
true
,
true
,
"spoon.test.imports.testclasses.internal.SuperClass$ProtectedInterface"
,
null
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.SuperClass$ProtectedInterface$NestedPublicInterface"
,
true
,
true
,
true
,
"spoon.test.imports.testclasses.internal.SuperClass$ProtectedInterface"
,
null
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.SuperClass$PublicInterface"
,
true
,
true
,
true
,
"spoon.test.imports.testclasses.internal.SuperClass"
,
null
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.SuperClass$PublicInterface$NestedOfPublicInterface"
,
true
,
true
,
true
,
"spoon.test.imports.testclasses.internal.SuperClass$PublicInterface"
,
"spoon.test.imports.testclasses.internal.SuperClass$PublicInterface"
)
;
c
.
checkCanAccess
(
"spoon.test.imports.testclasses.internal.SuperClass$PublicInterface$NestedPublicInterface"
,
true
,
true
,
true
,
"spoon.test.imports.testclasses.internal.SuperClass$PublicInterface"
,
"spoon.test.imports.testclasses.internal.SuperClass$PublicInterface"
)
;
}
