@Test
public
void
testImportOfAnInnerClassInAClassPackage
(
)
throws
Exception
{
Launcher
spoon
=
new
Launcher
(
)
;
spoon
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
}
)
;
Factory
factory
=
spoon
.
createFactory
(
)
;
SpoonModelBuilder
compiler
=
spoon
.
createCompiler
(
factory
,
SpoonResourceHelper
.
resources
(
"./src/test/java/spoon/test/imports/testclasses/internal/PublicSuperClass.java"
,
"./src/test/java/spoon/test/imports/testclasses/DefaultClientClass.java"
)
)
;
compiler
.
build
(
)
;
final
CtClass
<
?
>
client
=
(
CtClass
<
?
>
)
factory
.
Type
(
)
.
get
(
"spoon.test.imports.testclasses.DefaultClientClass"
)
;
final
CtMethod
<
?
>
methodVisit
=
client
.
getMethodsByName
(
"visit"
)
.
get
(
0
)
;
final
CtType
<
Object
>
innerClass
=
factory
.
Type
(
)
.
get
(
"spoon.test.imports.testclasses.DefaultClientClass$InnerClass"
)
;
assertEquals
(
"Type of the method must to be InnerClass accessed via DefaultClientClass."
,
innerClass
,
methodVisit
.
getType
(
)
.
getDeclaration
(
)
)
;
}
