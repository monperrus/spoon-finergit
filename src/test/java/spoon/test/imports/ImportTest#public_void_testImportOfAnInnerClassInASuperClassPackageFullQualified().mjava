@Test
public
void
testImportOfAnInnerClassInASuperClassPackageFullQualified
(
)
throws
Exception
{
Launcher
spoon
=
new
Launcher
(
)
;
spoon
.
getEnvironment
(
)
.
setShouldCompile
(
true
)
;
spoon
.
getEnvironment
(
)
.
setAutoImports
(
false
)
;
spoon
.
addInputResource
(
"./src/test/java/spoon/test/imports/testclasses/internal/SuperClass.java"
)
;
spoon
.
addInputResource
(
"./src/test/java/spoon/test/imports/testclasses/internal/ChildClass.java"
)
;
spoon
.
addInputResource
(
"./src/test/java/spoon/test/imports/testclasses/ClientClass.java"
)
;
spoon
.
setBinaryOutputDirectory
(
"./target/spoon/super_imports/bin"
)
;
spoon
.
setSourceOutputDirectory
(
"./target/spoon/super_imports/src"
)
;
spoon
.
run
(
)
;
final
List
<
CtClass
<
?
>
>
classes
=
Query
.
getElements
(
spoon
.
getFactory
(
)
,
new
NameFilter
<
CtClass
<
?
>
>
(
"ClientClass"
)
)
;
final
CtClass
<
?
>
innerClass
=
classes
.
get
(
0
)
.
getNestedType
(
"InnerClass"
)
;
assertEquals
(
"spoon.test.imports.testclasses.ClientClass$InnerClass"
,
innerClass
.
getQualifiedName
(
)
)
;
String
expected
=
"spoon.test.imports.testclasses.ClientClass.InnerClass"
;
assertEquals
(
expected
,
innerClass
.
getReference
(
)
.
toString
(
)
)
;
assertEquals
(
"spoon.test.imports.testclasses.internal.SuperClass$InnerClassProtected"
,
innerClass
.
getSuperclass
(
)
.
getQualifiedName
(
)
)
;
expected
=
"spoon.test.imports.testclasses.internal.SuperClass.InnerClassProtected"
;
assertEquals
(
expected
,
innerClass
.
getSuperclass
(
)
.
toString
(
)
)
;
assertEquals
(
"SuperClass"
,
innerClass
.
getSuperclass
(
)
.
getDeclaringType
(
)
.
getSimpleName
(
)
)
;
assertEquals
(
spoon
.
getFactory
(
)
.
Class
(
)
.
get
(
"spoon.test.imports.testclasses.internal.SuperClass$InnerClassProtected"
)
,
innerClass
.
getSuperclass
(
)
.
getDeclaration
(
)
)
;
}
