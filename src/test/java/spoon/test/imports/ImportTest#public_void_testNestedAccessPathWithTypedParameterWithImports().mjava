@Test
public
void
testNestedAccessPathWithTypedParameterWithImports
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"-i"
,
"./src/test/resources/spoon/test/imports/testclasses2/AbstractMapBasedMultimap.java"
,
"--with-imports"
}
)
;
launcher
.
buildModel
(
)
;
launcher
.
prettyprint
(
)
;
try
{
launcher
.
getModelBuilder
(
)
.
compile
(
)
;
}
catch
(
Exception
e
)
{
fail
(
e
.
getMessage
(
)
)
;
}
CtClass
<
?
>
mm
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
"spoon.test.imports.testclasses2.AbstractMapBasedMultimap"
)
;
CtClass
<
?
>
mmwli
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
"spoon.test.imports.testclasses2.AbstractMapBasedMultimap$WrappedList$WrappedListIterator"
)
;
assertEquals
(
"private class WrappedListIterator extends AbstractMapBasedMultimap<K, V>.WrappedCollection.WrappedIterator {}"
,
mmwli
.
toString
(
)
)
;
assertTrue
(
mm
.
toString
(
)
.
indexOf
(
"AbstractMapBasedMultimap<K, V>.WrappedCollection.WrappedIterator"
)
>=
0
)
;
CtClass
<
?
>
mmwliother
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
"spoon.test.imports.testclasses2.AbstractMapBasedMultimap$OtherWrappedList$WrappedListIterator"
)
;
assertEquals
(
"private class WrappedListIterator extends AbstractMapBasedMultimap<K, V>.OtherWrappedList.WrappedIterator {}"
,
mmwliother
.
toString
(
)
)
;
}
