@Test
public
void
testSortImportPutStaticImportAfterTypeImport
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
launcher
.
getEnvironment
(
)
.
setShouldCompile
(
true
)
;
String
outputDir
=
"./target/spoon-sort-import"
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java"
)
;
launcher
.
setSourceOutputDirectory
(
outputDir
)
;
launcher
.
run
(
)
;
PrettyPrinter
prettyPrinter
=
launcher
.
createPrettyPrinter
(
)
;
CtType
element
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
StaticNoOrdered
.
class
)
;
List
<
CtType
<
?
>
>
toPrint
=
new
ArrayList
<
>
(
)
;
toPrint
.
add
(
element
)
;
prettyPrinter
.
calculate
(
element
.
getPosition
(
)
.
getCompilationUnit
(
)
,
toPrint
)
;
String
output
=
prettyPrinter
.
getResult
(
)
;
StringTokenizer
st
=
new
StringTokenizer
(
output
,
System
.
getProperty
(
"line.separator"
)
)
;
int
countImports
=
0
;
int
nbStaticImports
=
2
;
int
nbStandardImports
=
3
;
boolean
startStatic
=
false
;
while
(
st
.
hasMoreTokens
(
)
)
{
String
line
=
st
.
nextToken
(
)
;
if
(
line
.
startsWith
(
"import static"
)
)
{
if
(
!
startStatic
)
{
assertEquals
(
"Static import should start after exactly "
+
nbStandardImports
+
" standard imports"
,
nbStandardImports
,
countImports
)
;
}
else
{
assertTrue
(
"It will normally have only "
+
nbStaticImports
+
" static imports"
,
countImports
<=
nbStandardImports
+
nbStaticImports
)
;
}
startStatic
=
true
;
assertTrue
(
"Static import should be after normal import"
,
countImports
>=
nbStandardImports
)
;
}
if
(
line
.
startsWith
(
"import"
)
)
{
countImports
++
;
}
}
int
totalImports
=
nbStandardImports
+
nbStaticImports
;
assertEquals
(
"Exactly "
+
totalImports
+
" should have been counted."
,
(
nbStandardImports
+
nbStaticImports
)
,
countImports
)
;
}
