@Test
public
void
testSpoonWithImports
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
run
(
new
String
[
]
{
"-i"
,
"./src/test/java/spoon/test/imports/testclasses"
,
"--output-type"
,
"nooutput"
,
"--with-imports"
}
)
;
final
CtClass
<
ImportTest
>
aClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
ChildClass
.
class
)
;
final
CtClass
<
ImportTest
>
anotherClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
ClientClass
.
class
)
;
final
CtClass
<
ImportTest
>
classWithInvocation
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
ClassWithInvocation
.
class
)
;
ImportScanner
importScanner
=
new
ImportScannerImpl
(
)
;
importScanner
.
computeImports
(
aClass
)
;
assertEquals
(
2
,
importScanner
.
getAllImports
(
)
.
size
(
)
)
;
importScanner
=
new
ImportScannerImpl
(
)
;
importScanner
.
computeImports
(
anotherClass
)
;
Collection
<
CtImport
>
allImports
=
importScanner
.
getAllImports
(
)
;
assertEquals
(
2
,
allImports
.
size
(
)
)
;
assertTrue
(
anotherClass
.
toString
(
)
.
indexOf
(
"InnerClass extends ChildClass.InnerClassProtected"
)
>
0
)
;
importScanner
=
new
ImportScannerImpl
(
)
;
importScanner
.
computeImports
(
classWithInvocation
)
;
allImports
=
importScanner
.
getAllImports
(
)
;
assertEquals
(
"Spoon ignores the arguments of CtInvocations"
,
1
,
allImports
.
size
(
)
)
;
}
