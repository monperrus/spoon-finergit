@Test
public
void
testStaticImportForInvocationInNoClasspath
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
run
(
new
String
[
]
{
"-i"
,
"./src/test/resources/import-static"
,
"-o"
,
"./target/spoon"
,
"--noclasspath"
}
)
;
final
List
<
CtInvocation
<
?
>
>
elements
=
Query
.
getElements
(
launcher
.
getFactory
(
)
,
new
TypeFilter
<
CtInvocation
<
?
>
>
(
CtInvocation
.
class
)
{
@Override
public
boolean
matches
(
CtInvocation
<
?
>
element
)
{
return
!
element
.
getExecutable
(
)
.
isConstructor
(
)
&&
super
.
matches
(
element
)
;
}
}
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"staticMethod"
)
.
target
(
"A"
)
.
declaringType
(
"A"
)
.
typeIsNull
(
true
)
,
elements
.
get
(
0
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"staticMethod"
)
.
target
(
"pack1.A"
)
.
declaringType
(
"A"
)
.
typeIsNull
(
true
)
,
elements
.
get
(
1
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"staticMethod"
)
.
target
(
"A"
)
.
declaringType
(
"A"
)
.
typeIsNull
(
false
)
,
elements
.
get
(
2
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"staticMethod"
)
.
target
(
"pack1.A"
)
.
declaringType
(
"A"
)
.
typeIsNull
(
false
)
,
elements
.
get
(
3
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"makeBurritos"
)
.
target
(
"Tacos.Burritos"
)
.
declaringType
(
"Burritos"
)
.
typeIsNull
(
false
)
,
elements
.
get
(
4
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"makeBurritos"
)
.
target
(
"Tacos.Burritos"
)
.
declaringType
(
"Burritos"
)
.
typeIsNull
(
true
)
,
elements
.
get
(
5
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"makeBurritos"
)
.
target
(
"Tacos.Burritos"
)
.
declaringType
(
"Burritos"
)
.
typeIsNull
(
false
)
,
elements
.
get
(
6
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"makeBurritos"
)
.
target
(
"Tacos.Burritos"
)
.
declaringType
(
"Burritos"
)
.
typeIsNull
(
false
)
,
elements
.
get
(
7
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"staticD"
)
.
target
(
"C.D"
)
.
declaringType
(
"C.D"
)
.
typeIsNull
(
true
)
,
elements
.
get
(
8
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"staticD"
)
.
target
(
"pack2.C.D"
)
.
declaringType
(
"D"
)
.
typeIsNull
(
true
)
,
elements
.
get
(
9
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"staticD"
)
.
target
(
"C.D"
)
.
declaringType
(
"C.D"
)
.
typeIsNull
(
false
)
,
elements
.
get
(
10
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"staticD"
)
.
target
(
"pack2.C.D"
)
.
declaringType
(
"D"
)
.
typeIsNull
(
false
)
,
elements
.
get
(
11
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"staticE"
)
.
target
(
"E"
)
.
declaringType
(
"E"
)
.
typeIsNull
(
true
)
,
elements
.
get
(
12
)
)
;
assertCorrectInvocationWithLimit
(
new
Expected
(
)
.
name
(
"staticE"
)
.
typeIsNull
(
true
)
,
elements
.
get
(
13
)
)
;
assertCorrectInvocation
(
new
Expected
(
)
.
name
(
"staticE"
)
.
target
(
"E"
)
.
declaringType
(
"E"
)
.
typeIsNull
(
false
)
,
elements
.
get
(
14
)
)
;
assertCorrectInvocationWithLimit
(
new
Expected
(
)
.
name
(
"staticE"
)
.
typeIsNull
(
false
)
,
elements
.
get
(
15
)
)
;
}
