@Test
public
void
testSuperInheritanceHierarchyFunction
(
)
throws
Exception
{
CtType
<
?
>
clientClass
=
(
CtClass
<
?
>
)
ModelUtils
.
buildClass
(
ClientClass
.
class
)
;
CtTypeReference
<
?
>
childClass
=
clientClass
.
getSuperclass
(
)
;
CtTypeReference
<
?
>
superClass
=
childClass
.
getSuperclass
(
)
;
List
<
String
>
result
=
clientClass
.
map
(
new
SuperInheritanceHierarchyFunction
(
)
.
includingSelf
(
true
)
)
.
map
(
e
->
{
assertTrue
(
e
instanceof
CtType
)
;
return
(
(
CtType
)
e
)
.
getQualifiedName
(
)
;
}
)
.
list
(
)
;
assertTrue
(
result
.
contains
(
clientClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
childClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
superClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
Object
.
class
.
getName
(
)
)
)
;
result
=
clientClass
.
map
(
new
SuperInheritanceHierarchyFunction
(
)
.
includingSelf
(
false
)
)
.
map
(
e
->
{
assertTrue
(
e
instanceof
CtType
)
;
return
(
(
CtType
)
e
)
.
getQualifiedName
(
)
;
}
)
.
list
(
)
;
assertFalse
(
result
.
contains
(
clientClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
childClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
superClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
Object
.
class
.
getName
(
)
)
)
;
result
=
clientClass
.
map
(
new
SuperInheritanceHierarchyFunction
(
)
.
includingSelf
(
true
)
.
returnTypeReferences
(
true
)
)
.
map
(
e
->
{
assertTrue
(
e
instanceof
CtTypeReference
)
;
return
(
(
CtTypeReference
)
e
)
.
getQualifiedName
(
)
;
}
)
.
list
(
)
;
assertTrue
(
result
.
contains
(
clientClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
childClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
superClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
Object
.
class
.
getName
(
)
)
)
;
result
=
clientClass
.
getReference
(
)
.
map
(
new
SuperInheritanceHierarchyFunction
(
)
.
includingSelf
(
true
)
.
returnTypeReferences
(
true
)
)
.
map
(
e
->
{
assertTrue
(
e
instanceof
CtTypeReference
)
;
return
(
(
CtTypeReference
)
e
)
.
getQualifiedName
(
)
;
}
)
.
list
(
)
;
assertTrue
(
result
.
contains
(
clientClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
childClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
superClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
Object
.
class
.
getName
(
)
)
)
;
List
<
CtTypeReference
<
?
>
>
typeResult
=
clientClass
.
getFactory
(
)
.
Type
(
)
.
OBJECT
.
map
(
new
SuperInheritanceHierarchyFunction
(
)
.
includingSelf
(
false
)
.
returnTypeReferences
(
true
)
)
.
list
(
)
;
assertEquals
(
0
,
typeResult
.
size
(
)
)
;
typeResult
=
clientClass
.
getFactory
(
)
.
Type
(
)
.
OBJECT
.
map
(
new
SuperInheritanceHierarchyFunction
(
)
.
includingSelf
(
true
)
.
returnTypeReferences
(
true
)
)
.
list
(
)
;
assertEquals
(
1
,
typeResult
.
size
(
)
)
;
assertEquals
(
clientClass
.
getFactory
(
)
.
Type
(
)
.
OBJECT
,
typeResult
.
get
(
0
)
)
;
}
