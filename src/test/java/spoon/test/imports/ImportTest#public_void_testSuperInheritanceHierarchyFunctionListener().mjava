@Test
public
void
testSuperInheritanceHierarchyFunctionListener
(
)
throws
Exception
{
CtType
<
?
>
clientClass
=
(
CtClass
<
?
>
)
ModelUtils
.
buildClass
(
ClientClass
.
class
)
;
CtTypeReference
<
?
>
childClass
=
clientClass
.
getSuperclass
(
)
;
CtTypeReference
<
?
>
superClass
=
childClass
.
getSuperclass
(
)
;
List
<
String
>
result
=
clientClass
.
map
(
new
SuperInheritanceHierarchyFunction
(
)
.
includingSelf
(
true
)
.
setListener
(
new
CtScannerListener
(
)
{
@Override
public
ScanningMode
enter
(
CtElement
element
)
{
assertTrue
(
element
instanceof
CtTypeReference
)
;
return
ScanningMode
.
NORMAL
;
}
@Override
public
void
exit
(
CtElement
element
)
{
assertTrue
(
element
instanceof
CtTypeReference
)
;
}
}
)
)
.
map
(
e
->
{
assertTrue
(
e
instanceof
CtType
)
;
return
(
(
CtType
)
e
)
.
getQualifiedName
(
)
;
}
)
.
list
(
)
;
assertTrue
(
result
.
contains
(
clientClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
childClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
superClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
Object
.
class
.
getName
(
)
)
)
;
result
=
clientClass
.
map
(
new
SuperInheritanceHierarchyFunction
(
)
.
includingSelf
(
true
)
.
setListener
(
new
CtScannerListener
(
)
{
@Override
public
ScanningMode
enter
(
CtElement
element
)
{
assertTrue
(
element
instanceof
CtTypeReference
)
;
if
(
superClass
.
getQualifiedName
(
)
.
equals
(
(
(
CtTypeReference
<
?
>
)
element
)
.
getQualifiedName
(
)
)
)
{
return
ScanningMode
.
SKIP_ALL
;
}
return
ScanningMode
.
NORMAL
;
}
@Override
public
void
exit
(
CtElement
element
)
{
assertTrue
(
element
instanceof
CtTypeReference
)
;
}
}
)
)
.
map
(
e
->
{
assertTrue
(
e
instanceof
CtType
)
;
return
(
(
CtType
)
e
)
.
getQualifiedName
(
)
;
}
)
.
list
(
)
;
assertTrue
(
result
.
contains
(
clientClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
childClass
.
getQualifiedName
(
)
)
)
;
assertFalse
(
result
.
contains
(
superClass
.
getQualifiedName
(
)
)
)
;
assertFalse
(
result
.
contains
(
Object
.
class
.
getName
(
)
)
)
;
result
=
clientClass
.
map
(
new
SuperInheritanceHierarchyFunction
(
)
.
includingSelf
(
true
)
.
setListener
(
new
CtScannerListener
(
)
{
@Override
public
ScanningMode
enter
(
CtElement
element
)
{
assertTrue
(
element
instanceof
CtTypeReference
)
;
if
(
superClass
.
getQualifiedName
(
)
.
equals
(
(
(
CtTypeReference
<
?
>
)
element
)
.
getQualifiedName
(
)
)
)
{
return
ScanningMode
.
SKIP_CHILDREN
;
}
return
ScanningMode
.
NORMAL
;
}
@Override
public
void
exit
(
CtElement
element
)
{
assertTrue
(
element
instanceof
CtTypeReference
)
;
}
}
)
)
.
map
(
e
->
{
assertTrue
(
e
instanceof
CtType
)
;
return
(
(
CtType
)
e
)
.
getQualifiedName
(
)
;
}
)
.
list
(
)
;
assertTrue
(
result
.
contains
(
clientClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
childClass
.
getQualifiedName
(
)
)
)
;
assertTrue
(
result
.
contains
(
superClass
.
getQualifiedName
(
)
)
)
;
assertFalse
(
result
.
contains
(
Object
.
class
.
getName
(
)
)
)
;
}
