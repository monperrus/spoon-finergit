@Test
public
void
testVisitImportByKind
(
)
{
final
Launcher
spoon
=
new
Launcher
(
)
;
CtType
aType
=
spoon
.
getFactory
(
)
.
Type
(
)
.
get
(
Reflection
.
class
)
;
CtTypeReference
<
?
>
typeRef
;
CtImport
ctImport
=
spoon
.
getFactory
(
)
.
createImport
(
aType
.
getReference
(
)
)
;
assertImportVisitor
(
ctImport
)
;
ctImport
=
spoon
.
getFactory
(
)
.
createImport
(
spoon
.
getFactory
(
)
.
Type
(
)
.
createTypeMemberWildcardImportReference
(
aType
.
getReference
(
)
)
)
;
assertImportVisitor
(
ctImport
)
;
ctImport
=
spoon
.
getFactory
(
)
.
createImport
(
(
(
CtMethod
)
aType
.
getAllMethods
(
)
.
iterator
(
)
.
next
(
)
)
.
getReference
(
)
)
;
assertImportVisitor
(
ctImport
)
;
ctImport
=
spoon
.
getFactory
(
)
.
createImport
(
(
(
CtField
)
aType
.
getFields
(
)
.
get
(
0
)
)
.
getReference
(
)
)
;
assertImportVisitor
(
ctImport
)
;
ctImport
=
spoon
.
getFactory
(
)
.
createImport
(
aType
.
getPackage
(
)
.
getReference
(
)
)
;
assertImportVisitor
(
ctImport
)
;
}
