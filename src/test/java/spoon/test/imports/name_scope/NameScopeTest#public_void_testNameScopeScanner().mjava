@Test
public
void
testNameScopeScanner
(
)
throws
Exception
{
CtType
<
?
>
typeRenata
=
ModelUtils
.
buildClass
(
launcher
->
{
launcher
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
}
,
Renata
.
class
)
;
CtField
<
?
>
fieldMichal
=
typeRenata
.
getField
(
"michal"
)
;
CtType
<
?
>
typeTereza
=
typeRenata
.
getNestedType
(
"Tereza"
)
;
CtMethod
<
?
>
methodDraw
=
typeTereza
.
getMethodsByName
(
"draw"
)
.
get
(
0
)
;
CtType
<
?
>
typeFile
=
typeRenata
.
getFactory
(
)
.
Type
(
)
.
createReference
(
File
.
class
)
.
getTypeDeclaration
(
)
;
CtType
<
?
>
typeSystem
=
typeRenata
.
getFactory
(
)
.
Type
(
)
.
createReference
(
System
.
class
)
.
getTypeDeclaration
(
)
;
CtMethod
<
?
>
methodCurrentTimeMillis
=
typeSystem
.
getMethodsByName
(
"currentTimeMillis"
)
.
get
(
0
)
;
CtType
<
?
>
typeFiles
=
typeRenata
.
getFactory
(
)
.
Type
(
)
.
createReference
(
Files
.
class
)
.
getTypeDeclaration
(
)
;
CtMethod
<
?
>
methodsNewDirectoryStream
=
typeFiles
.
getMethodsByName
(
"newDirectoryStream"
)
.
get
(
0
)
;
LexicalScopeScanner
scanner
=
new
LexicalScopeScanner
(
)
;
scanner
.
setVisitCompilationUnitContent
(
true
)
;
final
LexicalScope
[
]
scopes
=
new
LexicalScope
[
]
;
scanner
.
setListener
(
new
CtScannerListener
(
)
{
@Override
public
ScanningMode
enter
(
CtElement
element
)
{
if
(
element
instanceof
CtBlock
)
{
scopes
[
0
]
=
scanner
.
getCurrentLexicalScope
(
)
;
}
if
(
element
instanceof
CtLiteral
&&
(
(
CtLiteral
)
element
)
.
getValue
(
)
.
equals
(
"2"
)
)
{
scopes
[
1
]
=
scanner
.
getCurrentLexicalScope
(
)
;
}
return
ScanningMode
.
NORMAL
;
}
}
)
;
scanner
.
scan
(
typeRenata
.
getPosition
(
)
.
getCompilationUnit
(
)
)
;
assertNotSame
(
scopes
[
0
]
,
scopes
[
1
]
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
)
,
"count"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
"java.lang.String theme"
)
,
"theme"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
methodDraw
)
,
"draw"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
typeTereza
)
,
"Tereza"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
fieldMichal
)
,
"michal"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
typeRenata
)
,
"Renata"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
typeFile
)
,
"File"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
methodCurrentTimeMillis
)
,
"currentTimeMillis"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
methodsNewDirectoryStream
)
,
"newDirectoryStream"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
)
,
"Michal"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
)
,
"void"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
)
,
"String"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
)
,
"setIn"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
)
,
"System"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
)
,
"Fields"
)
;
checkThatScopeContains
(
scopes
[
0
]
,
Arrays
.
asList
(
)
,
"count"
)
;
checkThatScopeContains
(
scopes
[
1
]
,
Arrays
.
asList
(
"int count"
)
,
"count"
)
;
}
