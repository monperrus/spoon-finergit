@Test
public
void
testSettersAreAllGood
(
)
throws
Exception
{
StringBuilder
classpath
=
new
StringBuilder
(
)
;
for
(
String
classpathEntry
:
System
.
getProperty
(
"java.class.path"
)
.
split
(
File
.
pathSeparator
)
)
{
if
(
!
classpathEntry
.
contains
(
"test-classes"
)
)
{
classpath
.
append
(
classpathEntry
)
;
classpath
.
append
(
File
.
pathSeparator
)
;
}
}
String
systemClassPath
=
classpath
.
substring
(
0
,
classpath
.
length
(
)
-
1
)
;
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
run
(
new
String
[
]
{
"-i"
,
"./src/main/java"
,
"-o"
,
"./target/spooned"
,
"--source-classpath"
,
systemClassPath
}
)
;
final
Factory
factory
=
launcher
.
getFactory
(
)
;
final
List
<
CtMethod
<
?
>
>
setters
=
Query
.
getElements
(
factory
,
new
AbstractFilter
<
CtMethod
<
?
>
>
(
CtMethod
.
class
)
{
@Override
public
boolean
matches
(
CtMethod
<
?
>
element
)
{
return
element
.
getDeclaringType
(
)
.
isInterface
(
)
&&
element
.
getDeclaringType
(
)
.
getSimpleName
(
)
.
startsWith
(
"Ct"
)
&&
(
element
.
getSimpleName
(
)
.
startsWith
(
"set"
)
||
element
.
getSimpleName
(
)
.
startsWith
(
"add"
)
)
;
}
}
)
;
for
(
CtMethod
<
?
>
setter
:
setters
)
{
final
String
methodLog
=
setter
.
getSimpleName
(
)
+
" in "
+
setter
.
getDeclaringType
(
)
.
getSimpleName
(
)
;
if
(
setter
.
getFormalTypeParameters
(
)
.
size
(
)
<=
0
)
{
fail
(
"Your setter "
+
methodLog
+
" don't have a generic type for its return type."
)
;
}
boolean
isMatch
=
false
;
for
(
CtTypeReference
<
?
>
ctTypeReference
:
setter
.
getFormalTypeParameters
(
)
)
{
if
(
setter
.
getType
(
)
.
getSimpleName
(
)
.
equals
(
ctTypeReference
.
getSimpleName
(
)
)
)
{
isMatch
=
true
;
if
(
setter
.
getAnnotation
(
Override
.
class
)
!=
null
)
{
continue
;
}
if
(
!
(
ctTypeReference
instanceof
CtTypeParameterReference
)
)
{
fail
(
"Malformed element."
)
;
}
if
(
!
setter
.
getDeclaringType
(
)
.
getSimpleName
(
)
.
equals
(
(
(
CtTypeParameterReference
)
ctTypeReference
)
.
getBoundingType
(
)
.
getSimpleName
(
)
)
)
{
fail
(
"Your setter "
+
methodLog
+
" has a type reference who don't extends "
+
setter
.
getDeclaringType
(
)
.
getSimpleName
(
)
)
;
}
}
}
assertTrue
(
"The type of "
+
methodLog
+
" don't match with generic types."
,
isMatch
)
;
}
}
