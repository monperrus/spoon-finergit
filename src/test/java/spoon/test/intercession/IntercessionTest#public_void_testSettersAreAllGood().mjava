@Test
public
void
testSettersAreAllGood
(
)
{
ArrayList
classpath
=
new
ArrayList
(
)
;
for
(
String
classpathEntry
:
System
.
getProperty
(
"java.class.path"
)
.
split
(
File
.
pathSeparator
)
)
{
if
(
!
classpathEntry
.
contains
(
"test-classes"
)
)
{
classpath
.
add
(
classpathEntry
)
;
}
}
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/reflect/"
)
;
launcher
.
addInputResource
(
"./src/main/java/spoon/support/"
)
;
launcher
.
getModelBuilder
(
)
.
setSourceClasspath
(
(
String
[
]
)
classpath
.
toArray
(
new
String
[
]
{
}
)
)
;
launcher
.
buildModel
(
)
;
final
Factory
factory
=
launcher
.
getFactory
(
)
;
final
List
<
CtMethod
<
?
>
>
setters
=
Query
.
getElements
(
factory
,
new
AbstractFilter
<
CtMethod
<
?
>
>
(
CtMethod
.
class
)
{
@Override
public
boolean
matches
(
CtMethod
<
?
>
element
)
{
CtType
<
?
>
declaringType
=
element
.
getDeclaringType
(
)
;
if
(
declaringType
.
getPackage
(
)
!=
null
&&
(
declaringType
.
getPackage
(
)
.
getQualifiedName
(
)
.
startsWith
(
"spoon.support.visitor"
)
||
declaringType
.
getPackage
(
)
.
getQualifiedName
(
)
.
startsWith
(
"spoon.reflect.visitor"
)
)
)
{
return
false
;
}
return
declaringType
.
isInterface
(
)
&&
declaringType
.
getSimpleName
(
)
.
startsWith
(
"Ct"
)
&&
(
element
.
getSimpleName
(
)
.
startsWith
(
"set"
)
||
element
.
getSimpleName
(
)
.
startsWith
(
"add"
)
)
;
}
}
)
;
for
(
CtMethod
<
?
>
setter
:
setters
)
{
final
String
methodLog
=
setter
.
getSimpleName
(
)
+
" in "
+
setter
.
getDeclaringType
(
)
.
getSimpleName
(
)
;
if
(
setter
.
getFormalCtTypeParameters
(
)
.
size
(
)
<=
0
)
{
fail
(
"Your setter "
+
methodLog
+
" don't have a generic type for its return type."
)
;
}
boolean
isMatch
=
false
;
for
(
CtTypeParameter
typeParameter
:
setter
.
getFormalCtTypeParameters
(
)
)
{
if
(
setter
.
getType
(
)
.
getSimpleName
(
)
.
equals
(
typeParameter
.
getSimpleName
(
)
)
)
{
isMatch
=
true
;
if
(
setter
.
getAnnotation
(
Override
.
class
)
!=
null
)
{
continue
;
}
if
(
!
setter
.
getDeclaringType
(
)
.
getSimpleName
(
)
.
equals
(
typeParameter
.
getSuperclass
(
)
.
getSimpleName
(
)
)
)
{
fail
(
"Your setter "
+
methodLog
+
" has a type reference who don't extends "
+
setter
.
getDeclaringType
(
)
.
getSimpleName
(
)
)
;
}
}
}
assertTrue
(
"The type of "
+
methodLog
+
" don't match with generic types."
,
isMatch
)
;
}
}
