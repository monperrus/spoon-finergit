@Test
public
void
testWithStaticStarredImportFromInterface
(
)
{
Launcher
spoon
=
new
Launcher
(
)
;
spoon
.
addInputResource
(
"./src/test/java/spoon/test/jdtimportbuilder/testclasses/StarredImport.java"
)
;
spoon
.
addInputResource
(
"./src/test/java/spoon/test/jdtimportbuilder/testclasses/fullpack/"
)
;
spoon
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
spoon
.
buildModel
(
)
;
CtClass
classA
=
spoon
.
getFactory
(
)
.
Class
(
)
.
get
(
StarredImport
.
class
)
;
CompilationUnit
unitA
=
spoon
.
getFactory
(
)
.
CompilationUnit
(
)
.
getMap
(
)
.
get
(
classA
.
getPosition
(
)
.
getFile
(
)
.
getPath
(
)
)
;
Collection
<
CtReference
>
imports
=
unitA
.
getImports
(
)
;
assertEquals
(
3
,
imports
.
size
(
)
)
;
Iterator
<
CtReference
>
iterator
=
imports
.
iterator
(
)
;
CtReference
firstRef
=
iterator
.
next
(
)
;
CtReference
secondRef
=
iterator
.
next
(
)
;
CtReference
thirdRef
=
iterator
.
next
(
)
;
assertTrue
(
firstRef
instanceof
CtTypeReference
)
;
assertTrue
(
secondRef
instanceof
CtTypeReference
)
;
assertTrue
(
thirdRef
instanceof
CtTypeReference
)
;
List
<
String
>
importNames
=
new
SortedList
<
String
>
(
new
Comparator
<
String
>
(
)
{
@Override
public
int
compare
(
String
o1
,
String
o2
)
{
return
o1
.
compareTo
(
o2
)
;
}
}
)
;
importNames
.
add
(
(
(
CtTypeReference
)
firstRef
)
.
getQualifiedName
(
)
)
;
importNames
.
add
(
(
(
CtTypeReference
)
secondRef
)
.
getQualifiedName
(
)
)
;
importNames
.
add
(
(
(
CtTypeReference
)
thirdRef
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"spoon.test.jdtimportbuilder.testclasses.fullpack.A"
,
importNames
.
get
(
0
)
)
;
assertEquals
(
"spoon.test.jdtimportbuilder.testclasses.fullpack.B"
,
importNames
.
get
(
1
)
)
;
assertEquals
(
"spoon.test.jdtimportbuilder.testclasses.fullpack.C"
,
importNames
.
get
(
2
)
)
;
}
