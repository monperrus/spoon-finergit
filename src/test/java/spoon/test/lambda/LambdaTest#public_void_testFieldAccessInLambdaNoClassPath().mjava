@Test
public
void
testFieldAccessInLambdaNoClassPath
(
)
{
final
Launcher
runLaunch
=
new
Launcher
(
)
;
runLaunch
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
runLaunch
.
addInputResource
(
"./src/test/resources/noclasspath/lambdas/FieldAccessInLambda.java"
)
;
runLaunch
.
addInputResource
(
"./src/test/resources/noclasspath/lambdas/imported/SeparateInterfaceWithField.java"
)
;
runLaunch
.
buildModel
(
)
;
final
List
<
CtFieldAccess
>
fieldAccesses
=
runLaunch
.
getModel
(
)
.
getElements
(
new
Filter
<
CtFieldAccess
>
(
)
{
@Override
public
boolean
matches
(
final
CtFieldAccess
element
)
{
final
String
name
=
element
.
getVariable
(
)
.
getSimpleName
(
)
;
return
"localField"
.
equals
(
name
)
||
"pathSeparator"
.
equals
(
name
)
||
"fieldInSeparateInterface"
.
equals
(
name
)
||
"fieldInClassBase"
.
equals
(
name
)
||
"fieldInClass"
.
equals
(
name
)
||
"fieldInInterfaceBase"
.
equals
(
name
)
||
"fieldInInterface"
.
equals
(
name
)
||
"iAmToLazyForAnotherFieldName"
.
equals
(
name
)
;
}
}
)
;
assertEquals
(
8
,
fieldAccesses
.
size
(
)
)
;
}
