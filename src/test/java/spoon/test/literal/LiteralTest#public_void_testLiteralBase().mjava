@Test
public
void
testLiteralBase
(
)
{
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/literal/testclasses/BasedLiteral.java"
)
;
launcher
.
buildModel
(
)
;
final
CtClass
<
?
>
ctClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
"spoon.test.literal.testclasses.BasedLiteral"
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"i1"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"i2"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
OCTAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"i3"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
OCTAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"i4"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
HEXADECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"i5"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
HEXADECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"i6"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
OCTAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"i7"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
BINARY
,
(
(
CtLiteral
)
ctClass
.
getField
(
"i8"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
BINARY
,
(
(
CtLiteral
)
ctClass
.
getField
(
"i9"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"l1"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"l2"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
OCTAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"l3"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
OCTAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"l4"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
HEXADECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"l5"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
HEXADECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"l6"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
BINARY
,
(
(
CtLiteral
)
ctClass
.
getField
(
"l7"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
BINARY
,
(
(
CtLiteral
)
ctClass
.
getField
(
"l8"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"f1"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"f2"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"f3"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"f4"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"f5"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
HEXADECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"f6"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
HEXADECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"f7"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"d1"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"d2"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertEquals
(
LiteralBase
.
DECIMAL
,
(
(
CtLiteral
)
ctClass
.
getField
(
"d3"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertNull
(
(
(
CtLiteral
)
ctClass
.
getField
(
"c1"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
assertNull
(
(
(
CtLiteral
)
ctClass
.
getField
(
"s1"
)
.
getDefaultExpression
(
)
)
.
getBase
(
)
)
;
}
