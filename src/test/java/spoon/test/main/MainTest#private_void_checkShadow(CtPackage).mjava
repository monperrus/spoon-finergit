private
void
checkShadow
(
CtPackage
pack
)
{
new
CtScanner
(
)
{
@Override
public
void
scan
(
CtElement
element
)
{
if
(
element
!=
null
&&
CtShadowable
.
class
.
isAssignableFrom
(
element
.
getClass
(
)
)
)
{
assertFalse
(
(
(
CtShadowable
)
element
)
.
isShadow
(
)
)
;
}
super
.
scan
(
element
)
;
}
@Override
public
<
T
>
void
visitCtTypeReference
(
CtTypeReference
<
T
>
reference
)
{
assertNotNull
(
reference
)
;
if
(
CtTypeReference
.
NULL_TYPE_NAME
.
equals
(
reference
.
getSimpleName
(
)
)
||
"?"
.
equals
(
reference
.
getSimpleName
(
)
)
)
{
super
.
visitCtTypeReference
(
reference
)
;
return
;
}
final
CtType
<
T
>
typeDeclaration
=
reference
.
getTypeDeclaration
(
)
;
assertNotNull
(
typeDeclaration
)
;
assertEquals
(
reference
.
getSimpleName
(
)
,
typeDeclaration
.
getSimpleName
(
)
)
;
assertEquals
(
reference
.
getQualifiedName
(
)
,
typeDeclaration
.
getQualifiedName
(
)
)
;
assertEquals
(
reference
,
typeDeclaration
.
getReference
(
)
)
;
if
(
reference
.
getDeclaration
(
)
==
null
)
{
assertTrue
(
typeDeclaration
.
isShadow
(
)
)
;
}
super
.
visitCtTypeReference
(
reference
)
;
}
@Override
public
<
T
>
void
visitCtExecutableReference
(
CtExecutableReference
<
T
>
reference
)
{
assertNotNull
(
reference
)
;
if
(
isLanguageExecutable
(
reference
)
||
isDeclaredInAnAnnotation
(
reference
)
)
{
super
.
visitCtExecutableReference
(
reference
)
;
return
;
}
final
CtExecutable
<
T
>
executableDeclaration
=
reference
.
getExecutableDeclaration
(
)
;
assertNotNull
(
executableDeclaration
)
;
assertEquals
(
reference
.
getSimpleName
(
)
,
executableDeclaration
.
getSimpleName
(
)
)
;
boolean
hasGeneric
=
false
;
for
(
int
i
=
0
;
i
<
reference
.
getParameters
(
)
.
size
(
)
;
i
++
)
{
if
(
reference
.
getParameters
(
)
.
get
(
i
)
instanceof
CtTypeParameterReference
)
{
hasGeneric
=
true
;
continue
;
}
if
(
reference
.
getParameters
(
)
.
get
(
i
)
instanceof
CtArrayTypeReference
&&
(
(
CtArrayTypeReference
)
reference
.
getParameters
(
)
.
get
(
i
)
)
.
getComponentType
(
)
instanceof
CtTypeParameterReference
)
{
hasGeneric
=
true
;
continue
;
}
assertEquals
(
reference
.
getParameters
(
)
.
get
(
i
)
,
executableDeclaration
.
getParameters
(
)
.
get
(
i
)
.
getType
(
)
)
;
}
if
(
!
hasGeneric
)
{
assertEquals
(
reference
,
executableDeclaration
.
getReference
(
)
)
;
}
if
(
reference
.
getDeclaration
(
)
==
null
&&
CtShadowable
.
class
.
isAssignableFrom
(
executableDeclaration
.
getClass
(
)
)
)
{
assertTrue
(
(
(
CtShadowable
)
executableDeclaration
)
.
isShadow
(
)
)
;
}
super
.
visitCtExecutableReference
(
reference
)
;
}
private
<
T
>
boolean
isLanguageExecutable
(
CtExecutableReference
<
T
>
reference
)
{
return
"values"
.
equals
(
reference
.
getSimpleName
(
)
)
;
}
private
<
T
>
boolean
isDeclaredInAnAnnotation
(
CtExecutableReference
<
T
>
reference
)
{
final
CtType
<
?
>
declaration
=
reference
.
getDeclaringType
(
)
.
getTypeDeclaration
(
)
;
return
declaration
!=
null
&&
declaration
instanceof
CtAnnotationType
;
}
@Override
public
<
T
>
void
visitCtFieldReference
(
CtFieldReference
<
T
>
reference
)
{
assertNotNull
(
reference
)
;
if
(
isLanguageField
(
reference
)
||
isDeclaredInSuperClass
(
reference
)
)
{
super
.
visitCtFieldReference
(
reference
)
;
return
;
}
final
CtField
<
T
>
fieldDeclaration
=
reference
.
getFieldDeclaration
(
)
;
assertNotNull
(
fieldDeclaration
)
;
assertEquals
(
reference
.
getSimpleName
(
)
,
fieldDeclaration
.
getSimpleName
(
)
)
;
assertEquals
(
reference
.
getType
(
)
,
fieldDeclaration
.
getType
(
)
)
;
assertEquals
(
reference
,
fieldDeclaration
.
getReference
(
)
)
;
if
(
reference
.
getDeclaration
(
)
==
null
)
{
assertTrue
(
fieldDeclaration
.
isShadow
(
)
)
;
}
super
.
visitCtFieldReference
(
reference
)
;
}
private
<
T
>
boolean
isLanguageField
(
CtFieldReference
<
T
>
reference
)
{
return
"class"
.
equals
(
reference
.
getSimpleName
(
)
)
||
"length"
.
equals
(
reference
.
getSimpleName
(
)
)
;
}
private
<
T
>
boolean
isDeclaredInSuperClass
(
CtFieldReference
<
T
>
reference
)
{
final
CtType
<
?
>
typeDeclaration
=
reference
.
getDeclaringType
(
)
.
getTypeDeclaration
(
)
;
return
typeDeclaration
!=
null
&&
typeDeclaration
.
getField
(
reference
.
getSimpleName
(
)
)
==
null
;
}
}
.
visitCtPackage
(
pack
)
;
}
