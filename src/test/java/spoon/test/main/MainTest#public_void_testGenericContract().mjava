@Test
public
void
testGenericContract
(
)
throws
IOException
{
Launcher
launcher
;
CtPackage
rootPackage
;
StringBuilder
classpath
=
new
StringBuilder
(
)
;
for
(
String
classpathEntry
:
System
.
getProperty
(
"java.class.path"
)
.
split
(
File
.
pathSeparator
)
)
{
if
(
!
classpathEntry
.
contains
(
"test-classes"
)
)
{
classpath
.
append
(
classpathEntry
)
;
classpath
.
append
(
File
.
pathSeparator
)
;
}
}
String
systemClassPath
=
classpath
.
substring
(
0
,
classpath
.
length
(
)
-
1
)
;
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"-o"
,
"target/spooned"
,
"--destination"
,
"target/spooned-build"
,
"--source-classpath"
,
systemClassPath
,
"--compile"
,
"--compliance"
,
"8"
,
"--level"
,
"OFF"
}
)
;
launcher
.
getEnvironment
(
)
.
setCommentEnabled
(
false
)
;
int
n
=
0
;
Files
.
walk
(
Paths
.
get
(
"src/test/java"
)
)
.
filter
(
path
->
path
.
toFile
(
)
.
getAbsolutePath
(
)
.
contains
(
"testclasses"
)
&&
path
.
toFile
(
)
.
isFile
(
)
)
.
filter
(
path
->
!
path
.
toFile
(
)
.
getAbsolutePath
(
)
.
contains
(
"fieldaccesses/testclasses/Tacos"
)
)
.
filter
(
path
->
!
path
.
toFile
(
)
.
getAbsolutePath
(
)
.
contains
(
"fieldaccesses/testclasses/internal/Bar"
)
)
.
filter
(
path
->
!
path
.
toFile
(
)
.
getAbsolutePath
(
)
.
contains
(
"fieldaccesses/testclasses/internal/Foo"
)
)
.
filter
(
path
->
!
path
.
toFile
(
)
.
getAbsolutePath
(
)
.
contains
(
"reference/testclasses/Stream"
)
)
.
filter
(
path
->
!
path
.
toFile
(
)
.
getAbsolutePath
(
)
.
contains
(
"AccessibleClassFromNonAccessibleInterf"
)
)
.
filter
(
path
->
!
path
.
toFile
(
)
.
getAbsolutePath
(
)
.
contains
(
"MethodeWithNonAccessibleTypeArgument"
)
)
.
filter
(
path
->
!
path
.
toFile
(
)
.
getAbsolutePath
(
)
.
contains
(
"lambda/testclasses/Bar"
)
)
.
filter
(
path
->
!
path
.
toFile
(
)
.
getAbsolutePath
(
)
.
contains
(
"LambdaRxJava"
)
)
.
filter
(
path
->
!
path
.
toFile
(
)
.
getAbsolutePath
(
)
.
contains
(
"Tapas"
)
)
.
forEach
(
x
->
{
launcher
.
addInputResource
(
x
.
toString
(
)
)
;
}
)
;
launcher
.
buildModel
(
)
;
rootPackage
=
launcher
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
;
new
ContractVerifier
(
rootPackage
)
.
verify
(
)
;
}
