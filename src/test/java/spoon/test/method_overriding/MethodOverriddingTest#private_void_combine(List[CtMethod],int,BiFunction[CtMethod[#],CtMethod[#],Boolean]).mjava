private
void
combine
(
List
<
CtMethod
>
value
,
int
start
,
BiFunction
<
CtMethod
<
?
>
,
CtMethod
<
?
>
,
Boolean
>
isOverriding
)
{
CtMethod
m1
=
value
.
get
(
start
)
;
if
(
start
+
1
<
value
.
size
(
)
)
{
for
(
CtMethod
m2
:
value
.
subList
(
start
+
1
,
value
.
size
(
)
)
)
{
if
(
m1
.
getDeclaringType
(
)
.
isSubtypeOf
(
m2
.
getDeclaringType
(
)
.
getReference
(
)
)
)
{
checkOverride
(
m1
,
m2
,
isOverriding
)
;
}
else
if
(
m2
.
getDeclaringType
(
)
.
isSubtypeOf
(
m1
.
getDeclaringType
(
)
.
getReference
(
)
)
)
{
checkOverride
(
m2
,
m1
,
isOverriding
)
;
}
else
{
checkNotOverride
(
m1
,
m2
,
isOverriding
)
;
}
}
combine
(
value
,
start
+
1
,
isOverriding
)
;
}
}
