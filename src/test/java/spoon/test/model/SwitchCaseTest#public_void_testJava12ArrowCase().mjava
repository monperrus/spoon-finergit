@Test
public
void
testJava12ArrowCase
(
)
{
String
arrow
=
"class A { public void f(int i) { int x; switch(i) { case 1 -> x = 10; case 2 -> x = 20; default -> x = 30; }; } }"
;
String
arrowWithBlock
=
"class B { public void f(int i) { int x; switch(i) { case 1 -> { x = 10; break; } case 2 -> x = 20; default -> x = 30; }; } }"
;
String
colon
=
"class C { public void f(int i) { int x; switch(i) { case 1: x = 10; x = 1; break; case 2: x = 20; break; default: x = 30; break; }; } }"
;
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setComplianceLevel
(
12
)
;
launcher
.
getEnvironment
(
)
.
setPreviewFeaturesEnabled
(
true
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
addInputResource
(
new
VirtualFile
(
arrow
)
)
;
launcher
.
addInputResource
(
new
VirtualFile
(
arrowWithBlock
)
)
;
launcher
.
addInputResource
(
new
VirtualFile
(
colon
)
)
;
CtModel
model
=
launcher
.
buildModel
(
)
;
CtType
<
?
>
classA
=
model
.
getAllTypes
(
)
.
stream
(
)
.
filter
(
c
->
c
.
getSimpleName
(
)
.
equals
(
"A"
)
)
.
findFirst
(
)
.
get
(
)
;
CtCase
caseA1
=
classA
.
getElements
(
new
TypeFilter
<
>
(
CtCase
.
class
)
)
.
get
(
0
)
;
CtCase
caseA2
=
classA
.
getElements
(
new
TypeFilter
<
>
(
CtCase
.
class
)
)
.
get
(
1
)
;
CtCase
caseA3
=
classA
.
getElements
(
new
TypeFilter
<
>
(
CtCase
.
class
)
)
.
get
(
2
)
;
assertEquals
(
"case 1 ->    x = 10;"
,
toSingleLineString
(
caseA1
)
)
;
assertEquals
(
"case 2 ->    x = 20;"
,
toSingleLineString
(
caseA2
)
)
;
assertEquals
(
"default ->    x = 30;"
,
toSingleLineString
(
caseA3
)
)
;
assertEquals
(
caseA1
.
getCaseKind
(
)
,
CaseKind
.
ARROW
)
;
assertEquals
(
caseA2
.
getCaseKind
(
)
,
CaseKind
.
ARROW
)
;
assertEquals
(
caseA3
.
getCaseKind
(
)
,
CaseKind
.
ARROW
)
;
assertTrue
(
caseA1
.
getElements
(
new
TypeFilter
<
>
(
CtBreak
.
class
)
)
.
get
(
0
)
.
isImplicit
(
)
)
;
assertEquals
(
"x = 10"
,
caseA1
.
getElements
(
new
TypeFilter
<
>
(
CtBreak
.
class
)
)
.
get
(
0
)
.
getExpression
(
)
.
toString
(
)
)
;
assertTrue
(
caseA2
.
getElements
(
new
TypeFilter
<
>
(
CtBreak
.
class
)
)
.
get
(
0
)
.
isImplicit
(
)
)
;
assertEquals
(
"x = 20"
,
caseA2
.
getElements
(
new
TypeFilter
<
>
(
CtBreak
.
class
)
)
.
get
(
0
)
.
getExpression
(
)
.
toString
(
)
)
;
assertTrue
(
caseA3
.
getElements
(
new
TypeFilter
<
>
(
CtBreak
.
class
)
)
.
get
(
0
)
.
isImplicit
(
)
)
;
assertEquals
(
"x = 30"
,
caseA3
.
getElements
(
new
TypeFilter
<
>
(
CtBreak
.
class
)
)
.
get
(
0
)
.
getExpression
(
)
.
toString
(
)
)
;
CtType
<
?
>
classB
=
model
.
getAllTypes
(
)
.
stream
(
)
.
filter
(
c
->
c
.
getSimpleName
(
)
.
equals
(
"B"
)
)
.
findFirst
(
)
.
get
(
)
;
CtCase
caseB1
=
classB
.
getElements
(
new
TypeFilter
<
>
(
CtCase
.
class
)
)
.
get
(
0
)
;
assertFalse
(
caseB1
.
getElements
(
new
TypeFilter
<
>
(
CtBreak
.
class
)
)
.
get
(
0
)
.
isImplicit
(
)
)
;
assertEquals
(
"break"
,
caseB1
.
getElements
(
new
TypeFilter
<
>
(
CtBreak
.
class
)
)
.
get
(
0
)
.
toString
(
)
)
;
CtType
<
?
>
classC
=
model
.
getAllTypes
(
)
.
stream
(
)
.
filter
(
c
->
c
.
getSimpleName
(
)
.
equals
(
"C"
)
)
.
findFirst
(
)
.
get
(
)
;
CtCase
caseC1
=
classC
.
getElements
(
new
TypeFilter
<
>
(
CtCase
.
class
)
)
.
get
(
0
)
;
CtCase
caseC2
=
classC
.
getElements
(
new
TypeFilter
<
>
(
CtCase
.
class
)
)
.
get
(
1
)
;
CtCase
caseC3
=
classC
.
getElements
(
new
TypeFilter
<
>
(
CtCase
.
class
)
)
.
get
(
2
)
;
assertEquals
(
"case 1 :    x = 10;    x = 1;    break;"
,
toSingleLineString
(
caseC1
)
)
;
assertEquals
(
"case 2 :    x = 20;    break;"
,
toSingleLineString
(
caseC2
)
)
;
assertEquals
(
"default :    x = 30;    break;"
,
toSingleLineString
(
caseC3
)
)
;
assertEquals
(
caseC1
.
getCaseKind
(
)
,
CaseKind
.
COLON
)
;
assertEquals
(
caseC2
.
getCaseKind
(
)
,
CaseKind
.
COLON
)
;
assertEquals
(
caseC3
.
getCaseKind
(
)
,
CaseKind
.
COLON
)
;
}
