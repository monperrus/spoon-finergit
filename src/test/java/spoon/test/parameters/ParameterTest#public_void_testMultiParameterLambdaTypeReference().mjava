@Test
@SuppressWarnings("unchecked")
public
void
testMultiParameterLambdaTypeReference
(
)
{
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/resources/noclasspath/lambdas/MultiParameterLambda.java"
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
buildModel
(
)
;
List
<
CtParameter
>
parameters
;
parameters
=
launcher
.
getModel
(
)
.
getElements
(
new
NameFilter
<
CtMethod
>
(
"stringLambda"
)
)
.
get
(
0
)
.
getElements
(
new
TypeFilter
<
>
(
CtParameter
.
class
)
)
;
assertEquals
(
2
,
parameters
.
size
(
)
)
;
for
(
final
CtParameter
param
:
parameters
)
{
for
(
final
CtTypeReference
refType
:
(
List
<
CtTypeReference
>
)
param
.
getReference
(
)
.
getDeclaringExecutable
(
)
.
getParameters
(
)
)
{
assertEquals
(
launcher
.
getFactory
(
)
.
Type
(
)
.
STRING
,
refType
)
;
}
}
parameters
=
launcher
.
getModel
(
)
.
getElements
(
new
NameFilter
<
CtMethod
>
(
"integerLambda"
)
)
.
get
(
0
)
.
getElements
(
new
TypeFilter
<
>
(
CtParameter
.
class
)
)
;
assertEquals
(
2
,
parameters
.
size
(
)
)
;
for
(
final
CtParameter
param
:
parameters
)
{
for
(
final
CtTypeReference
refType
:
(
List
<
CtTypeReference
>
)
param
.
getReference
(
)
.
getDeclaringExecutable
(
)
.
getParameters
(
)
)
{
assertEquals
(
launcher
.
getFactory
(
)
.
Type
(
)
.
INTEGER
,
refType
)
;
}
}
parameters
=
launcher
.
getModel
(
)
.
getElements
(
new
NameFilter
<
CtMethod
>
(
"unknownLambda"
)
)
.
get
(
0
)
.
getElements
(
new
TypeFilter
<
>
(
CtParameter
.
class
)
)
;
assertEquals
(
2
,
parameters
.
size
(
)
)
;
for
(
final
CtParameter
param
:
parameters
)
{
for
(
final
CtTypeReference
refType
:
(
List
<
CtTypeReference
>
)
param
.
getReference
(
)
.
getDeclaringExecutable
(
)
.
getParameters
(
)
)
{
assertEquals
(
launcher
.
getFactory
(
)
.
Type
(
)
.
OBJECT
,
refType
)
;
}
}
}
