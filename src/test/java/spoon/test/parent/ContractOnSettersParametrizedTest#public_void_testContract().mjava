@Test
public
void
testContract
(
)
throws
Throwable
{
factory
.
getEnvironment
(
)
.
setModelChangeListener
(
changeListener
)
;
int
nSetterCalls
=
0
;
int
nAssertsOnParent
=
0
;
int
nAssertsOnParentInList
=
0
;
Object
o
=
factory
.
Core
(
)
.
create
(
(
Class
<
?
CtElement
>
)
toTest
.
getActualClass
(
)
)
;
for
(
CtMethod
<
?
>
setter
:
SpoonTestHelpers
.
getAllSetters
(
toTest
)
)
{
Object
argument
=
createCompatibleObject
(
setter
.
getParameters
(
)
.
get
(
0
)
.
getType
(
)
)
;
try
{
CtElement
receiver
=
(
(
CtElement
)
o
)
.
clone
(
)
;
Method
actualMethod
=
setter
.
getReference
(
)
.
getActualMethod
(
)
;
int
nBefore
=
changeListener
.
nbCallsToOnAction
;
changeListener
.
changedElements
=
new
ArrayList
<
>
(
)
;
actualMethod
.
invoke
(
receiver
,
new
Object
[
]
{
argument
}
)
;
int
nAfter
=
changeListener
.
nbCallsToOnAction
;
assertTrue
(
actualMethod
.
getName
(
)
,
nBefore
<
nAfter
)
;
nSetterCalls
++
;
nTotalSetterCalls
++
;
if
(
argument
instanceof
CtElement
&&
setter
.
getAnnotation
(
UnsettableProperty
.
class
)
==
null
&&
setter
.
getAnnotation
(
DerivedProperty
.
class
)
==
null
)
{
nAssertsOnParent
++
;
assertTrue
(
setter
.
getDeclaringType
(
)
.
getQualifiedName
(
)
+
"#"
+
setter
.
getSignature
(
)
+
" doesn't initializes parent"
,
(
(
CtElement
)
argument
)
.
hasParent
(
receiver
)
)
;
}
if
(
argument
instanceof
Collection
&&
setter
.
getAnnotation
(
UnsettableProperty
.
class
)
==
null
&&
setter
.
getAnnotation
(
DerivedProperty
.
class
)
==
null
)
{
nAssertsOnParentInList
++
;
assertTrue
(
setter
.
getDeclaringType
(
)
.
getQualifiedName
(
)
+
"#"
+
setter
.
getSignature
(
)
+
" doesn't initializes parent"
,
(
(
CtElement
)
(
(
Collection
)
argument
)
.
iterator
(
)
.
next
(
)
)
.
hasParent
(
receiver
)
)
;
}
}
catch
(
AssertionError
e
)
{
System
.
err
.
println
(
"one contract failed for "
+
setter
.
toString
(
)
)
;
throw
e
;
}
catch
(
InvocationTargetException
e
)
{
if
(
e
.
getCause
(
)
instanceof
UnsupportedOperationException
)
{
throw
e
;
}
else
if
(
e
.
getCause
(
)
instanceof
RuntimeException
)
{
throw
e
.
getCause
(
)
;
}
else
{
throw
new
SpoonException
(
e
.
getCause
(
)
)
;
}
}
}
assertTrue
(
nSetterCalls
>
0
)
;
assertTrue
(
nAssertsOnParent
>
0
||
nAssertsOnParentInList
>
0
)
;
}
