/** 
 * Create the list of method we have to call for a class
 * @param entry
 * @return
 * @throws Exception
 */
private
List
<
Method
>
getMethodsToInvoke
(
Class
<
?
>
entry
)
throws
Exception
{
Queue
<
Class
<
?
>
>
tocheck
=
new
LinkedList
<
>
(
)
;
tocheck
.
add
(
entry
)
;
List
<
Method
>
toInvoke
=
new
ArrayList
<
>
(
)
;
while
(
!
tocheck
.
isEmpty
(
)
)
{
Class
<
?
>
intf
=
tocheck
.
poll
(
)
;
assertTrue
(
intf
.
isInterface
(
)
)
;
if
(
!
intf
.
getSimpleName
(
)
.
startsWith
(
"Ct"
)
)
{
continue
;
}
if
(
intf
.
getSimpleName
(
)
.
equals
(
"CtElement"
)
)
{
continue
;
}
for
(
Method
mth
:
intf
.
getDeclaredMethods
(
)
)
{
if
(
(
mth
.
getName
(
)
.
startsWith
(
"set"
)
||
mth
.
getName
(
)
.
startsWith
(
"add"
)
)
&&
mth
.
getParameterTypes
(
)
.
length
==
1
&&
CtElement
.
class
.
isAssignableFrom
(
mth
.
getParameterTypes
(
)
[
0
]
)
)
{
if
(
!
toInvoke
.
contains
(
mth
)
)
{
toInvoke
.
add
(
mth
)
;
}
}
}
for
(
Class
<
?
>
aClass
:
intf
.
getInterfaces
(
)
)
{
tocheck
.
add
(
aClass
)
;
}
}
return
toInvoke
;
}
