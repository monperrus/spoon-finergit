@Test
public
void
testContract
(
)
throws
Throwable
{
Object
o
=
instance
;
List
<
Method
>
methodsToInvoke
=
getMethodsToInvoke
(
toTest
)
;
for
(
Method
setter
:
methodsToInvoke
)
{
if
(
setter
.
getAnnotation
(
Deprecated
.
class
)
!=
null
)
continue
;
if
(
o
instanceof
CtAnnotationType
&&
"addMethod"
.
equals
(
setter
.
getName
(
)
)
)
continue
;
if
(
CtActualTypeContainer
.
class
.
isAssignableFrom
(
o
.
getClass
(
)
)
)
{
if
(
"setActualTypeArguments"
.
equals
(
setter
.
getName
(
)
)
)
continue
;
if
(
"addActualTypeArgument"
.
equals
(
setter
.
getName
(
)
)
)
continue
;
}
if
(
o
instanceof
CtInvocation
&&
"setType"
.
equals
(
setter
.
getName
(
)
)
)
continue
;
if
(
(
o
instanceof
CtConstructorCall
||
CtConstructorCall
.
class
.
isAssignableFrom
(
o
.
getClass
(
)
)
)
&&
"setType"
.
equals
(
setter
.
getName
(
)
)
)
continue
;
if
(
o
instanceof
CtTypeAccess
&&
"setType"
.
equals
(
setter
.
getName
(
)
)
)
continue
;
if
(
o
instanceof
CtType
&&
"setSuperclass"
.
equals
(
setter
.
getName
(
)
)
)
continue
;
CtElement
argument
=
createCompatibleObject
(
(
Class
<
?
CtElement
>
)
setter
.
getParameters
(
)
[
0
]
.
getType
(
)
)
;
if
(
argument
instanceof
CtPackage
)
{
(
(
CtPackage
)
argument
)
.
setSimpleName
(
"foobar"
)
;
}
try
{
CtElement
receiver
=
(
(
CtElement
)
o
)
.
clone
(
)
;
setter
.
invoke
(
receiver
,
new
Object
[
]
{
argument
}
)
;
assertTrue
(
argument
.
hasParent
(
receiver
)
)
;
}
catch
(
AssertionError
e
)
{
Assert
.
fail
(
"call setParent contract failed for "
+
setter
.
toString
(
)
+
" "
+
e
.
toString
(
)
)
;
}
catch
(
InvocationTargetException
e
)
{
if
(
e
.
getCause
(
)
instanceof
UnsupportedOperationException
)
{
}
else
if
(
e
.
getCause
(
)
instanceof
RuntimeException
)
{
throw
e
.
getCause
(
)
;
}
else
{
throw
new
SpoonException
(
e
.
getCause
(
)
)
;
}
}
}
}
