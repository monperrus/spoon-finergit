@Test
public
void
testContract
(
)
throws
Throwable
{
int
nSetterCalls
=
0
;
int
nAssertsOnParent
=
0
;
int
nAssertsOnParentInList
=
0
;
Object
o
=
factory
.
Core
(
)
.
create
(
(
Class
<
?
CtElement
>
)
toTest
.
getActualClass
(
)
)
;
for
(
CtMethod
<
?
>
setter
:
SpoonTestHelpers
.
getAllSetters
(
toTest
)
)
{
Object
argument
=
createCompatibleObject
(
setter
.
getParameters
(
)
.
get
(
0
)
.
getType
(
)
)
;
try
{
CtElement
receiver
=
(
(
CtElement
)
o
)
.
clone
(
)
;
Method
actualMethod
=
setter
.
getReference
(
)
.
getActualMethod
(
)
;
actualMethod
.
invoke
(
receiver
,
new
Object
[
]
{
argument
}
)
;
nSetterCalls
++
;
nTotalSetterCalls
++
;
if
(
CtElement
.
class
.
isInstance
(
argument
)
&&
setter
.
getAnnotation
(
UnsettableProperty
.
class
)
==
null
)
{
nAssertsOnParent
++
;
assertTrue
(
(
(
CtElement
)
argument
)
.
hasParent
(
receiver
)
)
;
}
if
(
Collection
.
class
.
isInstance
(
argument
)
&&
setter
.
getAnnotation
(
UnsettableProperty
.
class
)
==
null
)
{
nAssertsOnParentInList
++
;
assertTrue
(
(
(
CtElement
)
(
(
Collection
)
argument
)
.
iterator
(
)
.
next
(
)
)
.
hasParent
(
receiver
)
)
;
}
}
catch
(
AssertionError
e
)
{
Assert
.
fail
(
"call setParent contract failed for "
+
setter
.
toString
(
)
+
" "
+
e
.
toString
(
)
)
;
}
catch
(
InvocationTargetException
e
)
{
if
(
e
.
getCause
(
)
instanceof
UnsupportedOperationException
)
{
throw
e
;
}
else
if
(
e
.
getCause
(
)
instanceof
RuntimeException
)
{
throw
e
.
getCause
(
)
;
}
else
{
throw
new
SpoonException
(
e
.
getCause
(
)
)
;
}
}
}
assertTrue
(
nSetterCalls
>
0
)
;
assertTrue
(
nAssertsOnParent
>
0
||
nAssertsOnParentInList
>
0
)
;
}
