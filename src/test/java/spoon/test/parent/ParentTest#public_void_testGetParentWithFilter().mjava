@Test
public
void
testGetParentWithFilter
(
)
throws
Exception
{
CtClass
<
Foo
>
clazz
=
(
CtClass
<
Foo
>
)
factory
.
Class
(
)
.
getAll
(
)
.
get
(
0
)
;
CtMethod
<
Object
>
m
=
clazz
.
getMethod
(
"m"
)
;
CtExpression
statement
=
(
(
CtAssignment
)
(
(
CtAssignment
)
m
.
getBody
(
)
.
getStatement
(
3
)
)
.
getAssignment
(
)
)
.
getAssignment
(
)
;
CtPackage
ctPackage
=
statement
.
getParent
(
new
TypeFilter
<
CtPackage
>
(
CtPackage
.
class
)
)
;
assertEquals
(
Foo
.
class
.
getPackage
(
)
.
getName
(
)
,
ctPackage
.
getQualifiedName
(
)
)
;
CtStatement
ctStatement
=
statement
.
getParent
(
new
AbstractFilter
<
CtStatement
>
(
CtStatement
.
class
)
{
@Override
public
boolean
matches
(
CtStatement
element
)
{
return
element
.
getParent
(
)
instanceof
CtStatementList
&&
super
.
matches
(
element
)
;
}
}
)
;
assertEquals
(
m
.
getBody
(
)
.
getStatement
(
3
)
,
ctStatement
)
;
m
=
clazz
.
getMethod
(
"internalClass"
)
;
CtStatement
ctStatement1
=
m
.
getElements
(
new
AbstractFilter
<
CtStatement
>
(
CtStatement
.
class
)
{
@Override
public
boolean
matches
(
CtStatement
element
)
{
return
element
instanceof
CtLocalVariable
&&
super
.
matches
(
element
)
;
}
}
)
.
get
(
0
)
;
ctStatement1
.
getParent
(
CtType
.
class
)
;
CtType
parent
=
ctStatement1
.
getParent
(
new
AbstractFilter
<
CtType
>
(
CtType
.
class
)
{
@Override
public
boolean
matches
(
CtType
element
)
{
return
!
element
.
isAnonymous
(
)
&&
element
.
isTopLevel
(
)
&&
super
.
matches
(
element
)
;
}
}
)
;
assertEquals
(
clazz
,
parent
)
;
assertNotEquals
(
ctStatement1
.
getParent
(
CtType
.
class
)
,
parent
)
;
CtWhile
ctWhile
=
ctStatement1
.
getParent
(
new
TypeFilter
<
CtWhile
>
(
CtWhile
.
class
)
)
;
assertEquals
(
null
,
ctWhile
)
;
}
