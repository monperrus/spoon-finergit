@Test
public
void
testContract
(
)
throws
Throwable
{
Object
o
=
factory
.
Core
(
)
.
create
(
(
Class
<
?
CtElement
>
)
toTest
.
getActualClass
(
)
)
;
CtMethod
<
?
>
setter
=
factory
.
Type
(
)
.
get
(
CtElement
.
class
)
.
getMethodsByName
(
"setParent"
)
.
get
(
0
)
;
Object
argument
=
createCompatibleObject
(
setter
.
getParameters
(
)
.
get
(
0
)
.
getType
(
)
)
;
if
(
!
(
argument
instanceof
CtElement
)
)
{
throw
new
AssertionError
(
"impossible, setParent always takes an element"
)
;
}
CtElement
receiver
=
(
(
CtElement
)
o
)
.
clone
(
)
;
if
(
"CtClass"
.
equals
(
toTest
.
getSimpleName
(
)
)
||
"CtInterface"
.
equals
(
toTest
.
getSimpleName
(
)
)
||
"CtEnum"
.
equals
(
toTest
.
getSimpleName
(
)
)
||
"CtAnnotationType"
.
equals
(
toTest
.
getSimpleName
(
)
)
||
"CtPackage"
.
equals
(
toTest
.
getSimpleName
(
)
)
)
{
assertTrue
(
receiver
.
getParent
(
)
instanceof
CtModelImpl
.
CtRootPackage
)
;
}
else
if
(
"CtModule"
.
equals
(
toTest
.
getSimpleName
(
)
)
)
{
assertTrue
(
receiver
.
getParent
(
)
instanceof
ModuleFactory
.
CtUnnamedModule
)
;
}
else
{
try
{
receiver
.
getParent
(
)
.
hashCode
(
)
;
fail
(
receiver
.
getParent
(
)
.
getClass
(
)
.
getSimpleName
(
)
)
;
}
catch
(
ParentNotInitializedException
normal
)
{
}
}
Method
actualMethod
=
setter
.
getReference
(
)
.
getActualMethod
(
)
;
CtElement
argumentClone
=
(
(
CtElement
)
argument
)
.
clone
(
)
;
actualMethod
.
invoke
(
receiver
,
new
Object
[
]
{
argument
}
)
;
assertTrue
(
argument
.
equals
(
argumentClone
)
)
;
assertFalse
(
argument
==
argumentClone
)
;
}
