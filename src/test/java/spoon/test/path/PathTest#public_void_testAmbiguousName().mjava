@Test
public
void
testAmbiguousName
(
)
{
CtInvocation
<
?
>
inv
=
factory
.
Type
(
)
.
get
(
"spoon.test.path.testclasses.Foo"
)
.
getMethodsByName
(
"methodWithArgs"
)
.
get
(
0
)
.
getBody
(
)
.
getStatement
(
1
)
;
{
CtTypeReference
<
?
>
argType
=
inv
.
getExecutable
(
)
.
getParameters
(
)
.
get
(
0
)
;
CtPath
path
=
argType
.
getPath
(
)
;
assertEquals
(
"#subPackage[name=spoon]#subPackage[name=test]#subPackage[name=path]#subPackage[name=testclasses]#containedType[name=Foo]#method[signature=methodWithArgs(java.lang.String[])]#body#statement[index=1]#executableRef#argumentType[index=0;name=String]"
,
path
.
toString
(
)
)
;
CtPath
pathFromString
=
new
CtPathStringBuilder
(
)
.
fromString
(
path
.
toString
(
)
)
;
assertEquals
(
path
.
toString
(
)
,
pathFromString
.
toString
(
)
)
;
List
<
CtElement
>
result
=
pathFromString
.
evaluateOn
(
factory
.
getModel
(
)
.
getRootPackage
(
)
)
;
assertEquals
(
1
,
result
.
size
(
)
)
;
assertSame
(
argType
,
result
.
get
(
0
)
)
;
}
{
CtTypeReference
<
?
>
argType
=
inv
.
getExecutable
(
)
.
getParameters
(
)
.
get
(
1
)
;
CtPath
path
=
argType
.
getPath
(
)
;
assertEquals
(
"#subPackage[name=spoon]#subPackage[name=test]#subPackage[name=path]#subPackage[name=testclasses]#containedType[name=Foo]#method[signature=methodWithArgs(java.lang.String[])]#body#statement[index=1]#executableRef#argumentType[index=1;name=String]"
,
path
.
toString
(
)
)
;
CtPath
pathFromString
=
new
CtPathStringBuilder
(
)
.
fromString
(
path
.
toString
(
)
)
;
assertEquals
(
path
.
toString
(
)
,
pathFromString
.
toString
(
)
)
;
List
<
CtElement
>
result
=
pathFromString
.
evaluateOn
(
factory
.
getModel
(
)
.
getRootPackage
(
)
)
;
assertEquals
(
1
,
result
.
size
(
)
)
;
assertSame
(
argType
,
result
.
get
(
0
)
)
;
}
}
