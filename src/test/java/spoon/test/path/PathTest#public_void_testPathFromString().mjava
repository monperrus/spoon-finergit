@Test
public
void
testPathFromString
(
)
{
equals
(
new
CtPathStringBuilder
(
)
.
fromString
(
".spoon.test.path.testclasses.Foo.foo#body#statement[index=0]"
)
,
factory
.
Package
(
)
.
get
(
"spoon.test.path.testclasses"
)
.
getType
(
"Foo"
)
.
getMethod
(
"foo"
)
.
getBody
(
)
.
getStatement
(
0
)
)
;
equals
(
new
CtPathStringBuilder
(
)
.
fromString
(
".spoon.test.path.testclasses.Foo.bar/CtParameter"
)
,
factory
.
Package
(
)
.
get
(
"spoon.test.path.testclasses"
)
.
getType
(
"Foo"
)
.
filterChildren
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"bar"
)
)
.
filterChildren
(
new
TypeFilter
<
>
(
CtParameter
.
class
)
)
.
list
(
)
.
toArray
(
new
CtElement
[
]
)
)
;
equals
(
new
CtPathStringBuilder
(
)
.
fromString
(
".spoon.test.path.testclasses.Foo.bar(int,int)/CtParameter"
)
,
factory
.
Package
(
)
.
get
(
"spoon.test.path.testclasses"
)
.
getType
(
"Foo"
)
.
getMethod
(
"bar"
,
factory
.
Type
(
)
.
createReference
(
int
.
class
)
,
factory
.
Type
(
)
.
createReference
(
int
.
class
)
)
.
getParameters
(
)
.
toArray
(
new
CtElement
[
]
)
)
;
equals
(
new
CtPathStringBuilder
(
)
.
fromString
(
".spoon.test.path.testclasses.Foo.bar(int)/CtParameter"
)
,
factory
.
Package
(
)
.
get
(
"spoon.test.path.testclasses"
)
.
getType
(
"Foo"
)
.
getMethod
(
"bar"
,
factory
.
Type
(
)
.
createReference
(
int
.
class
)
)
.
getParameters
(
)
.
toArray
(
new
CtElement
[
]
)
)
;
CtLiteral
<
String
>
literal
=
factory
.
Core
(
)
.
createLiteral
(
)
;
literal
.
setValue
(
"salut"
)
;
literal
.
setType
(
literal
.
getFactory
(
)
.
Type
(
)
.
STRING
)
;
equals
(
new
CtPathStringBuilder
(
)
.
fromString
(
".spoon.test.path.testclasses.Foo.toto#defaultExpression"
)
,
literal
)
;
}
