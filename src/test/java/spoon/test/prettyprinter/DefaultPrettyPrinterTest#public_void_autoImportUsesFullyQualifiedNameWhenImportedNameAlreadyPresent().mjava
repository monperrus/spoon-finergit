@Test
public
void
autoImportUsesFullyQualifiedNameWhenImportedNameAlreadyPresent
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
final
Factory
factory
=
launcher
.
getFactory
(
)
;
factory
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
final
SpoonModelBuilder
compiler
=
launcher
.
createCompiler
(
)
;
compiler
.
addInputSource
(
new
File
(
"./src/test/java/spoon/test/prettyprinter/testclasses/sub/TypeIdentifierCollision.java"
)
)
;
compiler
.
addInputSource
(
new
File
(
"./src/test/java/spoon/test/prettyprinter/testclasses/TypeIdentifierCollision.java"
)
)
;
compiler
.
build
(
)
;
launcher
.
prettyprint
(
)
;
final
CtClass
<
?
>
aClass
=
(
CtClass
<
?
>
)
factory
.
Type
(
)
.
get
(
spoon
.
test
.
prettyprinter
.
testclasses
.
TypeIdentifierCollision
.
class
)
;
String
expected
=
"public void setFieldUsingExternallyDefinedEnumWithSameNameAsLocal() {"
+
nl
+
"    localField = spoon.test.prettyprinter.testclasses.sub.TypeIdentifierCollision.ENUM.E1.ordinal();"
+
nl
+
"}"
;
String
computed
=
aClass
.
getMethodsByName
(
"setFieldUsingExternallyDefinedEnumWithSameNameAsLocal"
)
.
get
(
0
)
.
toString
(
)
;
assertEquals
(
"We use FQN for E1"
,
expected
,
computed
)
;
expected
=
"public void setFieldUsingLocallyDefinedEnum() {"
+
nl
+
"    localField = ENUM.E1.ordinal();"
+
nl
+
"}"
;
computed
=
aClass
.
getMethodsByName
(
"setFieldUsingLocallyDefinedEnum"
)
.
get
(
0
)
.
prettyprint
(
)
;
assertEquals
(
expected
,
computed
)
;
expected
=
"public void setFieldOfClassWithSameNameAsTheCompilationUnitClass() {"
+
nl
+
"    spoon.test.prettyprinter.testclasses.sub.TypeIdentifierCollision.globalField = localField;"
+
nl
+
"}"
;
computed
=
aClass
.
getMethodsByName
(
"setFieldOfClassWithSameNameAsTheCompilationUnitClass"
)
.
get
(
0
)
.
prettyprint
(
)
;
assertEquals
(
"The static field of an external type with the same identifier as the compilation unit is printed with FQN"
,
expected
,
computed
)
;
expected
=
"public void referToTwoInnerClassesWithTheSameName() {"
+
nl
+
"    ClassA.VAR0 = ClassA.getNum();"
+
nl
+
"    Class1.ClassA.VAR1 = Class1.ClassA.getNum();"
+
nl
+
"}"
;
computed
=
aClass
.
getMethodsByName
(
"referToTwoInnerClassesWithTheSameName"
)
.
get
(
0
)
.
prettyprint
(
)
;
assertEquals
(
"where inner types have the same identifier only one may be shortened and the other should be fully qualified"
,
expected
,
computed
)
;
expected
=
"public enum ENUM {"
+
nl
+
nl
+
"    E1(spoon.test.prettyprinter.testclasses.sub.TypeIdentifierCollision.globalField, spoon.test.prettyprinter.testclasses.sub.TypeIdentifierCollision.ENUM.E1);"
+
nl
+
"    final int NUM;"
+
nl
+
nl
+
"    final Enum<?> e;"
+
nl
+
nl
+
"    private ENUM(int num, Enum<?> e) {"
+
nl
+
"        NUM = num;"
+
nl
+
"        this.e = e;"
+
nl
+
"    }"
+
nl
+
"}"
;
computed
=
aClass
.
getNestedType
(
"ENUM"
)
.
prettyprint
(
)
;
assertEquals
(
expected
,
computed
)
;
}
