@Test
public
void
testPrintAClassWithImports
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
final
Factory
factory
=
launcher
.
getFactory
(
)
;
factory
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
final
SpoonModelBuilder
compiler
=
launcher
.
createCompiler
(
)
;
compiler
.
addInputSource
(
new
File
(
"./src/test/java/spoon/test/prettyprinter/testclasses/"
)
)
;
compiler
.
build
(
)
;
final
String
expected
=
"public class AClass {"
+
nl
+
"    public List<?> aMethod() {"
+
nl
+
"        return new ArrayList<>();"
+
nl
+
"    }"
+
nl
+
""
+
nl
+
"    public List<? extends ArrayList> aMethodWithGeneric() {"
+
nl
+
"        return new ArrayList<>();"
+
nl
+
"    }"
+
nl
+
"}"
;
final
CtClass
<
?
>
aClass
=
(
CtClass
<
?
>
)
factory
.
Type
(
)
.
get
(
AClass
.
class
)
;
assertTrue
(
factory
.
getEnvironment
(
)
.
createPrettyPrinter
(
)
.
printTypes
(
aClass
)
.
contains
(
expected
)
)
;
assertEquals
(
expected
,
aClass
.
prettyprint
(
)
)
;
final
CtConstructorCall
<
?
>
constructorCall
=
aClass
.
getElements
(
new
TypeFilter
<
CtConstructorCall
<
?
>
>
(
CtConstructorCall
.
class
)
)
.
get
(
0
)
;
final
CtTypeReference
<
?
>
ctTypeReference
=
constructorCall
.
getType
(
)
.
getActualTypeArguments
(
)
.
get
(
0
)
;
assertTrue
(
ctTypeReference
.
isImplicit
(
)
)
;
assertEquals
(
"Object"
,
ctTypeReference
.
getSimpleName
(
)
)
;
}
