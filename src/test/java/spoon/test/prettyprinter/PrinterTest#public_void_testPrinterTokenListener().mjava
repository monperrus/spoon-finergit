@Test
public
void
testPrinterTokenListener
(
)
throws
Exception
{
Launcher
spoon
=
new
Launcher
(
)
;
Factory
factory
=
spoon
.
createFactory
(
)
;
spoon
.
createCompiler
(
factory
,
SpoonResourceHelper
.
resources
(
"./src/test/java/spoon/test/annotation/testclasses/"
,
"./src/test/java/spoon/test/prettyprinter/"
)
)
.
build
(
)
;
assertTrue
(
factory
.
Type
(
)
.
getAll
(
)
.
size
(
)
>
0
)
;
for
(
CtType
<
?
>
t
:
factory
.
Type
(
)
.
getAll
(
)
)
{
DefaultJavaPrettyPrinter
pp
=
new
DefaultJavaPrettyPrinter
(
factory
.
getEnvironment
(
)
)
;
pp
.
calculate
(
t
.
getPosition
(
)
.
getCompilationUnit
(
)
,
Collections
.
singletonList
(
t
)
)
;
String
standardPrintedResult
=
pp
.
getResult
(
)
;
StringBuilder
allTokens
=
new
StringBuilder
(
)
;
pp
.
setPrinterTokenWriter
(
new
TokenWriter
(
)
{
String
lastToken
;
PrinterHelper
printerHelper
=
new
PrinterHelper
(
factory
.
getEnvironment
(
)
)
;
@Override
public
TokenWriter
writeSeparator
(
String
separator
)
{
checkRepeatingOfTokens
(
"writeSeparator"
)
;
checkTokenWhitespace
(
separator
,
false
)
;
assertTrue
(
"Unexpected separator: "
+
separator
,
separators
.
contains
(
separator
)
)
;
allTokens
.
append
(
separator
)
;
return
this
;
}
@Override
public
TokenWriter
writeOperator
(
String
operator
)
{
checkRepeatingOfTokens
(
"writeOperator"
)
;
checkTokenWhitespace
(
operator
,
false
)
;
assertTrue
(
"Unexpected operator: "
+
operator
,
operators
.
contains
(
operator
)
)
;
allTokens
.
append
(
operator
)
;
return
this
;
}
@Override
public
TokenWriter
writeLiteral
(
String
literal
)
{
checkRepeatingOfTokens
(
"writeLiteral"
)
;
assertTrue
(
literal
.
length
(
)
>
0
)
;
allTokens
.
append
(
literal
)
;
return
this
;
}
@Override
public
TokenWriter
writeKeyword
(
String
keyword
)
{
checkRepeatingOfTokens
(
"writeKeyword"
)
;
checkTokenWhitespace
(
keyword
,
false
)
;
assertTrue
(
"Unexpected java keyword: "
+
keyword
,
javaKeywords
.
contains
(
keyword
)
)
;
allTokens
.
append
(
keyword
)
;
return
this
;
}
@Override
public
TokenWriter
writeIdentifier
(
String
identifier
)
{
checkRepeatingOfTokens
(
"writeIdentifier"
)
;
checkTokenWhitespace
(
identifier
,
false
)
;
for
(
int
i
=
0
;
i
<
identifier
.
length
(
)
;
i
++
)
{
char
c
=
identifier
.
charAt
(
i
)
;
if
(
i
==
0
)
{
assertTrue
(
Character
.
isJavaIdentifierStart
(
c
)
)
;
}
else
{
assertTrue
(
Character
.
isJavaIdentifierPart
(
c
)
)
;
}
}
assertTrue
(
"Keyword found in Identifier: "
+
identifier
,
javaKeywords
.
contains
(
identifier
)
==
false
)
;
allTokens
.
append
(
identifier
)
;
return
this
;
}
@Override
public
TokenWriter
writeComment
(
CtComment
comment
)
{
checkRepeatingOfTokens
(
"writeComment"
)
;
DefaultTokenWriter
sptw
=
new
DefaultTokenWriter
(
new
PrinterHelper
(
factory
.
getEnvironment
(
)
)
)
;
PrinterHelper
ph
=
sptw
.
getPrinterHelper
(
)
;
ph
.
setLineSeparator
(
getPrinterHelper
(
)
.
getLineSeparator
(
)
)
;
ph
.
setTabCount
(
getPrinterHelper
(
)
.
getTabCount
(
)
)
;
sptw
.
writeComment
(
comment
)
;
allTokens
.
append
(
sptw
.
getPrinterHelper
(
)
.
toString
(
)
)
;
return
this
;
}
@Override
public
TokenWriter
writeln
(
)
{
checkRepeatingOfTokens
(
"writeln"
)
;
allTokens
.
append
(
getPrinterHelper
(
)
.
getLineSeparator
(
)
)
;
return
this
;
}
@Override
public
TokenWriter
writeTabs
(
)
{
checkRepeatingOfTokens
(
"writeTabs"
)
;
for
(
int
i
=
0
;
i
<
getPrinterHelper
(
)
.
getTabCount
(
)
;
i
++
)
{
if
(
factory
.
getEnvironment
(
)
.
isUsingTabulations
(
)
)
{
allTokens
.
append
(
'\t'
)
;
}
else
{
for
(
int
j
=
0
;
j
<
factory
.
getEnvironment
(
)
.
getTabulationSize
(
)
;
j
++
)
{
allTokens
.
append
(
' '
)
;
}
}
}
return
this
;
}
@Override
public
TokenWriter
writeCodeSnippet
(
String
token
)
{
checkRepeatingOfTokens
(
"writeCodeSnippet"
)
;
assertTrue
(
token
.
length
(
)
>
0
)
;
allTokens
.
append
(
token
)
;
return
this
;
}
@Override
public
TokenWriter
incTab
(
)
{
return
this
;
}
@Override
public
TokenWriter
decTab
(
)
{
return
this
;
}
@Override
public
PrinterHelper
getPrinterHelper
(
)
{
return
printerHelper
;
}
@Override
public
void
reset
(
)
{
printerHelper
.
reset
(
)
;
}
@Override
public
TokenWriter
writeSpace
(
)
{
checkRepeatingOfTokens
(
"writeWhitespace"
)
;
allTokens
.
append
(
' '
)
;
return
this
;
}
private
void
checkRepeatingOfTokens
(
String
tokenType
)
{
if
(
"writeln"
.
equals
(
tokenType
)
||
"writeIdentifier"
.
equals
(
tokenType
)
||
"writeSeparator"
.
equals
(
tokenType
)
||
"writeWhitespace"
.
equals
(
tokenType
)
)
{
}
else
{
assertTrue
(
"Two tokens of same type current:"
+
tokenType
+
" "
+
allTokens
.
toString
(
)
,
tokenType
.
equals
(
this
.
lastToken
)
==
false
)
;
}
this
.
lastToken
=
tokenType
;
}
}
)
;
pp
.
calculate
(
t
.
getPosition
(
)
.
getCompilationUnit
(
)
,
Collections
.
singletonList
(
t
)
)
;
String
withEmptyListenerResult
=
pp
.
getResult
(
)
;
assertEquals
(
0
,
withEmptyListenerResult
.
length
(
)
)
;
}
}
