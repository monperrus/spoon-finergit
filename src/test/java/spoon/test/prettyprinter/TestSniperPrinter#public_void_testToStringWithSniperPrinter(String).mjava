public
void
testToStringWithSniperPrinter
(
String
inputSourcePath
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
inputSourcePath
)
;
String
originalContent
=
fileAsString
(
inputSourcePath
,
StandardCharsets
.
UTF_8
)
.
replace
(
"\t"
,
""
)
;
CtModel
model
=
launcher
.
buildModel
(
)
;
new
SourceFragmentCreator
(
)
.
attachTo
(
launcher
.
getFactory
(
)
.
getEnvironment
(
)
)
;
final
SniperJavaPrettyPrinter
sp
=
new
SniperJavaPrettyPrinter
(
launcher
.
getEnvironment
(
)
)
;
launcher
.
getEnvironment
(
)
.
setPrettyPrinterCreator
(
(
)
->
{
return
sp
;
}
)
;
List
<
CtElement
>
ops
=
model
.
getElements
(
new
TypeFilter
<
>
(
CtElement
.
class
)
)
;
ops
.
stream
(
)
.
filter
(
el
->
!
(
el
instanceof
spoon
.
reflect
.
CtModelImpl
.
CtRootPackage
)
&&
!
(
el
instanceof
spoon
.
reflect
.
factory
.
ModuleFactory
.
CtUnnamedModule
)
)
.
forEach
(
el
->
{
try
{
sp
.
reset
(
)
;
sp
.
printElementSniper
(
el
)
;
String
result
=
sp
.
getResult
(
)
;
if
(
!
sp
.
hasImplicitAncestor
(
el
)
&&
!
(
el
instanceof
CtPackage
)
&&
!
(
el
instanceof
CtReference
)
)
{
assertTrue
(
result
.
length
(
)
>
0
)
;
}
assertTrue
(
"ToString() on element ("
+
el
.
getClass
(
)
.
getName
(
)
+
") =  \""
+
el
+
"\" is not in original content"
,
originalContent
.
contains
(
result
.
replace
(
"\t"
,
""
)
)
)
;
}
catch
(
UnsupportedOperationException
|
SpoonException
e
)
{
fail
(
"ToString() on Element ("
+
el
.
getClass
(
)
.
getName
(
)
+
"): at "
+
el
.
getPath
(
)
+
" lead to an exception: "
+
e
)
;
}
}
)
;
}
