@Test
public
void
testInitProperties
(
)
{
class
AProcessor
extends
AbstractManualProcessor
{
@Property
String
aString
;
@Property
int
anInt
;
@Property
Object
anObject
;
@Property
int
[
]
arrayInt
;
@Property
List
<
String
>
listString
;
@Property
boolean
[
]
arrayBoolean
;
@Property
Map
<
String
,
Double
>
mapStringDouble
;
@Override
public
void
process
(
)
{
}
}
;
AProcessor
p
=
new
AProcessor
(
)
;
Launcher
launcher
=
new
Launcher
(
)
;
p
.
setFactory
(
launcher
.
getFactory
(
)
)
;
ProcessorProperties
props
=
new
ProcessorPropertiesImpl
(
)
;
props
.
set
(
"aString"
,
"foo"
)
;
props
.
set
(
"anInt"
,
5
)
;
Object
o
=
new
Object
(
)
;
props
.
set
(
"anObject"
,
o
)
;
int
[
]
arrayInt
=
{
1
,
2
,
3
}
;
props
.
set
(
"arrayInt"
,
arrayInt
)
;
props
.
set
(
"listString"
,
Arrays
.
asList
(
new
String
[
]
{
"42"
}
)
)
;
boolean
[
]
arrayBoolean
=
{
true
}
;
props
.
set
(
"arrayBoolean"
,
arrayBoolean
)
;
HashMap
<
String
,
Double
>
mapTest
=
new
HashMap
<
>
(
)
;
mapTest
.
put
(
"foobar"
,
42.42
)
;
props
.
set
(
"mapStringDouble"
,
mapTest
)
;
ProcessorUtils
.
initProperties
(
p
,
props
)
;
assertEquals
(
"foo"
,
p
.
aString
)
;
assertEquals
(
5
,
p
.
anInt
)
;
assertSame
(
o
,
p
.
anObject
)
;
assertSame
(
arrayInt
,
p
.
arrayInt
)
;
assertEquals
(
Arrays
.
asList
(
new
String
[
]
{
"42"
}
)
,
p
.
listString
)
;
assertSame
(
arrayBoolean
,
p
.
arrayBoolean
)
;
assertSame
(
mapTest
,
p
.
mapStringDouble
)
;
}
