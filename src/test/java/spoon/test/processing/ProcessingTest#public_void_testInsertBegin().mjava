@Test
public
void
testInsertBegin
(
)
throws
Exception
{
CtClass
<
?
>
type
=
build
(
"spoon.test.processing.testclasses"
,
"SampleForInsertBefore"
)
;
for
(
CtMethod
<
?
>
meth
:
type
.
getMethods
(
)
)
{
int
i
=
meth
.
getBody
(
)
.
getStatements
(
)
.
size
(
)
;
meth
.
getBody
(
)
.
insertBegin
(
type
.
getFactory
(
)
.
Code
(
)
.
createCodeSnippetStatement
(
"int i = 0;"
)
)
;
assertEquals
(
"insert failed for method "
+
meth
.
getSimpleName
(
)
,
i
+
1
,
meth
.
getBody
(
)
.
getStatements
(
)
.
size
(
)
)
;
assertEquals
(
"insert failed for method "
+
meth
.
getSimpleName
(
)
,
"int i = 0;"
,
meth
.
getBody
(
)
.
getStatement
(
0
)
.
toString
(
)
)
;
}
for
(
CtConstructor
<
?
>
constructor
:
type
.
getConstructors
(
)
)
{
int
i
=
constructor
.
getBody
(
)
.
getStatements
(
)
.
size
(
)
;
constructor
.
getBody
(
)
.
insertBegin
(
type
.
getFactory
(
)
.
Code
(
)
.
createCodeSnippetStatement
(
"int i = 0;"
)
)
;
assertEquals
(
"insert failed for constructor "
+
constructor
.
getSimpleName
(
)
,
i
+
1
,
constructor
.
getBody
(
)
.
getStatements
(
)
.
size
(
)
)
;
assertEquals
(
"insert failed for constructor "
+
constructor
.
getSimpleName
(
)
,
"int i = 0;"
,
constructor
.
getBody
(
)
.
getStatement
(
1
)
.
toString
(
)
)
;
}
CtConstructor
<
?
>
constructor
=
type
.
getConstructor
(
type
.
getFactory
(
)
.
Type
(
)
.
INTEGER_PRIMITIVE
)
;
String
myBeforeStatementAsString
=
"int before"
;
for
(
CtSwitch
<
?
>
ctSwitch
:
constructor
.
getElements
(
new
TypeFilter
<
CtSwitch
<
?
>
>
(
CtSwitch
.
class
)
)
)
{
ctSwitch
.
insertBefore
(
type
.
getFactory
(
)
.
Code
(
)
.
createCodeSnippetStatement
(
myBeforeStatementAsString
)
)
;
}
assertEquals
(
"insert has not been done at the right position"
,
myBeforeStatementAsString
,
constructor
.
getBody
(
)
.
getStatement
(
3
)
.
toString
(
)
)
;
assertEquals
(
"insert has not been done at the right position"
,
myBeforeStatementAsString
,
constructor
.
getBody
(
)
.
getStatement
(
5
)
.
toString
(
)
)
;
assertEquals
(
"insert has not been done at the right position"
,
myBeforeStatementAsString
,
constructor
.
getBody
(
)
.
getStatement
(
7
)
.
toString
(
)
)
;
assertNotEquals
(
"switch should not be the same"
,
constructor
.
getBody
(
)
.
getStatement
(
6
)
,
constructor
.
getBody
(
)
.
getStatement
(
8
)
)
;
assertNotEquals
(
"switch should not be the same"
,
constructor
.
getBody
(
)
.
getStatement
(
6
)
.
toString
(
)
,
constructor
.
getBody
(
)
.
getStatement
(
8
)
.
toString
(
)
)
;
}
