@Test
public
void
compareWithSingleThreaded1
(
)
throws
IOException
{
AtomicReferenceArray
<
Integer
>
atomicCounter
=
createCounter
(
)
;
Processor
<
CtElement
>
p1
=
createProcessor
(
atomicCounter
,
0
)
;
Processor
<
CtElement
>
p2
=
createProcessor
(
atomicCounter
,
1
)
;
Processor
<
CtElement
>
p3
=
createProcessor
(
atomicCounter
,
2
)
;
Processor
<
CtElement
>
p4
=
createProcessor
(
atomicCounter
,
3
)
;
new
FluentLauncher
(
)
.
inputResource
(
INPUT_FILES
)
.
processor
(
new
AbstractParallelProcessor
<
CtElement
>
(
Arrays
.
asList
(
p1
,
p2
,
p3
,
p4
)
)
{
}
)
.
noClasspath
(
true
)
.
outputDirectory
(
folderFactory
.
newFolder
(
)
)
.
buildModel
(
)
;
AtomicInteger
singleThreadCounter
=
new
AtomicInteger
(
0
)
;
new
FluentLauncher
(
)
.
inputResource
(
INPUT_FILES
)
.
processor
(
new
AbstractProcessor
<
CtElement
>
(
)
{
@Override
public
void
process
(
CtElement
element
)
{
singleThreadCounter
.
incrementAndGet
(
)
;
}
}
)
.
noClasspath
(
true
)
.
outputDirectory
(
folderFactory
.
newFolder
(
)
)
.
buildModel
(
)
;
for
(
int
j
=
0
;
j
<
atomicCounter
.
length
(
)
;
j
++
)
{
singleThreadCounter
.
set
(
singleThreadCounter
.
get
(
)
-
atomicCounter
.
get
(
j
)
)
;
}
assertTrue
(
singleThreadCounter
.
get
(
)
==
0
)
;
}
