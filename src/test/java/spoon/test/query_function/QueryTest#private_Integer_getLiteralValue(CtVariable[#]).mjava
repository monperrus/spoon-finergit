private
Integer
getLiteralValue
(
CtVariable
<
?
>
var
)
{
CtExpression
<
?
>
exp
=
var
.
getDefaultExpression
(
)
;
if
(
exp
!=
null
)
{
return
getLiteralValue
(
exp
)
;
}
if
(
var
instanceof
CtParameter
)
{
CtParameter
param
=
(
CtParameter
)
var
;
CtExecutable
<
?
>
l_exec
=
param
.
getParent
(
CtExecutable
.
class
)
;
int
l_argIdx
=
l_exec
.
getParameters
(
)
.
indexOf
(
param
)
;
assertTrue
(
l_argIdx
>=
0
)
;
CtExecutableReference
<
?
>
l_execRef
=
l_exec
.
getReference
(
)
;
List
<
CtAbstractInvocation
<
?
>
>
list
=
l_exec
.
getFactory
(
)
.
Package
(
)
.
getRootPackage
(
)
.
filterChildren
(
(
CtAbstractInvocation
inv
)
->
{
return
inv
.
getExecutable
(
)
.
equals
(
l_execRef
)
;
}
)
.
list
(
)
;
assertEquals
(
1
,
list
.
size
(
)
)
;
CtAbstractInvocation
inv
=
list
.
get
(
0
)
;
return
getLiteralValue
(
(
CtExpression
<
?
>
)
inv
.
getArguments
(
)
.
get
(
l_argIdx
)
)
;
}
if
(
var
instanceof
CtCatchVariable
)
{
return
getCommentValue
(
var
)
;
}
throw
new
AssertionError
(
"Unexpected variable "
+
var
.
toString
(
)
)
;
}
