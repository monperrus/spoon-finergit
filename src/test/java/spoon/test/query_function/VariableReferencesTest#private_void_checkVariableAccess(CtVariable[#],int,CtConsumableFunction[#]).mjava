private
void
checkVariableAccess
(
CtVariable
<
?
>
var
,
int
value
,
CtConsumableFunction
<
?
>
query
)
{
class
Context
{
int
realCount
=
0
;
int
expectedCount
=
0
;
Set
<
String
>
unique
=
new
HashSet
<
>
(
)
;
}
try
{
Context
context
=
new
Context
(
)
;
var
.
map
(
query
)
.
forEach
(
(
CtVariableReference
<
?
>
fr
)
->
{
assertEquals
(
value
,
getVariableReferenceValue
(
fr
)
)
;
context
.
realCount
++
;
}
)
;
modelClass
.
filterChildren
(
new
TypeFilter
<
>
(
CtVariableReference
.
class
)
)
.
forEach
(
(
CtVariableReference
varRef
)
->
{
if
(
isTestFieldName
(
varRef
.
getSimpleName
(
)
)
==
false
)
{
return
;
}
int
refValue
=
getVariableReferenceValue
(
varRef
)
;
if
(
refValue
<
0
)
{
fail
(
"Variable reference has no value:\n"
+
varRef
)
;
}
if
(
refValue
==
value
)
{
context
.
expectedCount
++
;
}
}
)
;
assertEquals
(
"Number of references to field="
+
value
+
" does not match"
,
context
.
expectedCount
,
context
.
realCount
)
;
}
catch
(
Throwable
e
)
{
e
.
printStackTrace
(
)
;
throw
new
AssertionError
(
"Test failed on "
+
getParentMethodName
(
var
)
,
e
)
;
}
}
