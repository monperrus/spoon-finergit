@Test
public
void
testCheckModelConsistency
(
)
throws
Exception
{
class
Context
{
Map
<
Integer
,
CtElement
>
unique
=
new
HashMap
<
>
(
)
;
int
maxKey
=
0
;
void
checkKey
(
int
key
,
CtElement
ele
)
{
CtElement
ambiquous
=
unique
.
put
(
key
,
ele
)
;
if
(
ambiquous
!=
null
)
{
fail
(
"Two variables ["
+
ambiquous
.
toString
(
)
+
" in "
+
getParentMethodName
(
ambiquous
)
+
","
+
ele
.
toString
(
)
+
" in "
+
getParentMethodName
(
ele
)
+
"] has same value"
)
;
}
maxKey
=
Math
.
max
(
maxKey
,
key
)
;
}
}
Context
context
=
new
Context
(
)
;
modelClass
.
filterChildren
(
(
CtElement
e
)
->
{
if
(
e
instanceof
CtVariable
)
{
CtVariable
<
?
>
var
=
(
CtVariable
<
?
>
)
e
;
if
(
isTestFieldName
(
var
.
getSimpleName
(
)
)
==
false
)
{
return
false
;
}
Integer
val
=
getLiteralValue
(
var
)
;
context
.
checkKey
(
val
,
var
)
;
}
return
false
;
}
)
.
list
(
)
;
assertTrue
(
context
.
unique
.
size
(
)
>
0
)
;
assertEquals
(
"Only these keys were found: "
+
context
.
unique
.
keySet
(
)
,
context
.
maxKey
,
context
.
unique
.
size
(
)
)
;
assertEquals
(
"AllLocalVars#maxValue must be equal to maximum value number "
,
(
int
)
getLiteralValue
(
(
CtVariable
)
modelClass
.
filterChildren
(
new
NamedElementFilter
<
>
(
CtVariable
.
class
,
"maxValue"
)
)
.
first
(
)
)
,
context
.
maxKey
)
;
}
