@Test
public
void
testVariableScopeFunction
(
)
{
List
list
=
modelClass
.
filterChildren
(
(
CtVariable
<
?
>
var
)
->
{
if
(
var
.
getSimpleName
(
)
.
equals
(
"field"
)
)
{
if
(
var
instanceof
CtField
)
{
return
false
;
}
CtElement
[
]
real
=
var
.
map
(
new
VariableScopeFunction
(
)
)
.
list
(
)
.
toArray
(
new
CtElement
[
]
)
;
if
(
var
instanceof
CtLocalVariable
)
{
assertArrayEquals
(
var
.
map
(
new
LocalVariableScopeFunction
(
)
)
.
list
(
)
.
toArray
(
new
CtElement
[
]
)
,
real
)
;
}
else
if
(
var
instanceof
CtField
)
{
assertArrayEquals
(
var
.
map
(
new
FieldScopeFunction
(
)
)
.
list
(
)
.
toArray
(
new
CtElement
[
]
)
,
real
)
;
}
else
if
(
var
instanceof
CtParameter
)
{
assertArrayEquals
(
var
.
map
(
new
ParameterScopeFunction
(
)
)
.
list
(
)
.
toArray
(
new
CtElement
[
]
)
,
real
)
;
}
else
if
(
var
instanceof
CtCatchVariable
)
{
assertArrayEquals
(
var
.
map
(
new
CatchVariableScopeFunction
(
)
)
.
list
(
)
.
toArray
(
new
CtElement
[
]
)
,
real
)
;
}
else
{
fail
(
"Unexpected variable of type "
+
var
.
getClass
(
)
.
getName
(
)
)
;
}
return
true
;
}
return
false
;
}
)
.
list
(
)
;
assertFalse
(
list
.
isEmpty
(
)
)
;
}
