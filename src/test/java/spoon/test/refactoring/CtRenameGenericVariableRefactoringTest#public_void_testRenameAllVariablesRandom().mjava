/** 
 * Tests that all types of variables in a class can be renamed by the Generic refactoring class
 */
@Test
public
void
testRenameAllVariablesRandom
(
)
throws
Exception
{
CtClass
renamedClass
=
Launcher
.
parseClass
(
CLASS_STRING
)
;
renamedClass
.
getElements
(
a
->
a
.
getClass
(
)
==
spoon
.
support
.
reflect
.
declaration
.
CtFieldImpl
.
class
)
.
forEach
(
b
->
{
CtField
field
=
(
CtField
)
b
;
String
originalName
=
field
.
getSimpleName
(
)
;
renameVar
(
field
)
;
assertNotEquals
(
originalName
,
field
.
getSimpleName
(
)
)
;
}
)
;
for
(
Object
ctMethod
:
renamedClass
.
getMethods
(
)
)
{
CtMethod
method
=
(
CtMethod
)
ctMethod
;
method
.
getElements
(
a
->
a
.
getClass
(
)
==
spoon
.
support
.
reflect
.
declaration
.
CtParameterImpl
.
class
)
.
forEach
(
b
->
{
CtParameter
param
=
(
CtParameter
)
b
;
String
originalName
=
param
.
getSimpleName
(
)
;
renameVar
(
param
)
;
assertNotEquals
(
originalName
,
param
.
getSimpleName
(
)
)
;
}
)
;
method
.
getElements
(
a
->
a
.
getClass
(
)
==
spoon
.
support
.
reflect
.
code
.
CtLocalVariableImpl
.
class
)
.
forEach
(
b
->
{
CtLocalVariable
localVariable
=
(
CtLocalVariable
)
b
;
String
originalName
=
localVariable
.
getSimpleName
(
)
;
renameVar
(
localVariable
)
;
assertNotEquals
(
originalName
,
localVariable
.
getSimpleName
(
)
)
;
}
)
;
}
}
