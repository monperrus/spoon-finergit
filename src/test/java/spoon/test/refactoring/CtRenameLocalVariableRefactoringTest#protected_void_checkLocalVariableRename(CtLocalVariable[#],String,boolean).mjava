protected
void
checkLocalVariableRename
(
CtLocalVariable
<
?
>
targetVariable
,
String
newName
,
boolean
renameShouldPass
)
{
String
originName
=
targetVariable
.
getSimpleName
(
)
;
CtRenameLocalVariableRefactoring
refactor
=
new
CtRenameLocalVariableRefactoring
(
)
;
refactor
.
setTarget
(
targetVariable
)
;
refactor
.
setNewName
(
newName
)
;
if
(
renameShouldPass
)
{
try
{
refactor
.
refactor
(
)
;
}
catch
(
SpoonException
e
)
{
throw
new
AssertionError
(
getParentMethodName
(
targetVariable
)
+
" Rename of \""
+
originName
+
"\" should NOT fail when trying rename to \""
+
newName
+
"\"\n"
+
targetVariable
.
toString
(
)
,
e
)
;
}
assertEquals
(
getParentMethodName
(
targetVariable
)
+
" Rename of \""
+
originName
+
"\" to \""
+
newName
+
"\" passed, but the name of variable was not changed"
,
newName
,
targetVariable
.
getSimpleName
(
)
)
;
assertCorrectModel
(
getParentMethodName
(
targetVariable
)
+
" Rename of \""
+
originName
+
"\" to \""
+
newName
+
"\""
)
;
}
else
{
try
{
refactor
.
refactor
(
)
;
fail
(
getParentMethodName
(
targetVariable
)
+
" Rename of \""
+
originName
+
"\" should fail when trying rename to \""
+
newName
+
"\""
)
;
}
catch
(
SpoonException
e
)
{
}
assertEquals
(
getParentMethodName
(
targetVariable
)
+
" Rename of \""
+
originName
+
"\" failed when trying rename to \""
+
newName
+
"\" but the name of variable should not be changed"
,
originName
,
targetVariable
.
getSimpleName
(
)
)
;
}
if
(
renameShouldPass
)
{
rollback
(
targetVariable
,
originName
)
;
}
assertEquals
(
originName
,
targetVariable
.
getSimpleName
(
)
)
;
}
