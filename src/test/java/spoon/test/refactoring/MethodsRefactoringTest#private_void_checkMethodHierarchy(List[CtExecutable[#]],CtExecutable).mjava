private
void
checkMethodHierarchy
(
List
<
CtExecutable
<
?
>
>
expectedExecutables
,
CtExecutable
startExecutable
)
{
{
final
List
<
CtExecutable
<
?
>
>
executables
=
startExecutable
.
map
(
new
AllMethodsSameSignatureFunction
(
)
)
.
list
(
)
;
assertFalse
(
"Unexpected start executable "
+
startExecutable
,
containsSame
(
executables
,
startExecutable
)
)
;
assertTrue
(
executables
.
size
(
)
>
0
)
;
expectedExecutables
.
forEach
(
m
->
{
boolean
found
=
removeSame
(
executables
,
m
)
;
if
(
startExecutable
==
m
)
{
assertFalse
(
"The signature "
+
getQSignature
(
m
)
+
" was returned too"
,
found
)
;
}
else
{
assertTrue
(
"The signature "
+
getQSignature
(
m
)
+
" not found"
,
found
)
;
}
}
)
;
assertTrue
(
"Unexpected executables: "
+
executables
,
executables
.
isEmpty
(
)
)
;
}
{
final
List
<
CtExecutable
<
?
>
>
executables
=
startExecutable
.
map
(
new
AllMethodsSameSignatureFunction
(
)
.
includingSelf
(
true
)
)
.
list
(
)
;
assertTrue
(
"Missing start executable "
+
startExecutable
,
containsSame
(
executables
,
startExecutable
)
)
;
assertTrue
(
executables
.
size
(
)
>
0
)
;
expectedExecutables
.
forEach
(
m
->
{
assertTrue
(
"The signature "
+
getQSignature
(
m
)
+
" not found"
,
removeSame
(
executables
,
m
)
)
;
}
)
;
assertTrue
(
"Unexpected executables: "
+
executables
,
executables
.
isEmpty
(
)
)
;
}
{
final
List
<
CtExecutable
<
?
>
>
executables
=
startExecutable
.
map
(
new
AllMethodsSameSignatureFunction
(
)
.
includingSelf
(
true
)
.
includingLambdas
(
false
)
)
.
list
(
)
;
if
(
startExecutable
instanceof
CtLambda
)
{
assertFalse
(
"Unexpected start executable "
+
startExecutable
,
containsSame
(
executables
,
startExecutable
)
)
;
}
else
{
assertTrue
(
"Missing start executable "
+
startExecutable
,
containsSame
(
executables
,
startExecutable
)
)
;
}
assertTrue
(
executables
.
size
(
)
>
0
)
;
expectedExecutables
.
forEach
(
m
->
{
if
(
m
instanceof
CtLambda
)
{
return
;
}
assertTrue
(
"The signature "
+
getQSignature
(
m
)
+
" not found"
,
removeSame
(
executables
,
m
)
)
;
}
)
;
assertTrue
(
"Unexepcted executables "
+
executables
,
executables
.
isEmpty
(
)
)
;
}
CtExecutable
<
?
>
exec
=
startExecutable
.
map
(
new
AllMethodsSameSignatureFunction
(
)
.
includingSelf
(
true
)
)
.
first
(
)
;
assertSame
(
startExecutable
,
exec
)
;
exec
=
startExecutable
.
map
(
new
AllMethodsSameSignatureFunction
(
)
.
includingSelf
(
false
)
)
.
first
(
)
;
assertNotSame
(
startExecutable
,
exec
)
;
assertTrue
(
containsSame
(
expectedExecutables
,
exec
)
)
;
}
