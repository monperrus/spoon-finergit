@Test
public
void
testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned
(
)
throws
Exception
{
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"-i"
,
"src/test/java/spoon/test/refactoring/testclasses"
,
"-o"
,
"target/spooned/refactoring"
}
)
;
launcher
.
run
(
)
;
final
CtClass
<
?
>
aClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
AClass
.
class
)
;
assertNotNull
(
aClass
)
;
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"-i"
,
"src/test/java/spoon/test/refactoring/testclasses"
,
"-o"
,
"target/spooned/refactoring"
,
"-p"
,
ThisTransformationProcessor
.
class
.
getName
(
)
}
)
;
launcher
.
run
(
)
;
final
CtClass
<
?
>
classNotAccessible
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
AClass
.
class
)
;
assertNull
(
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
"spoon.test.refactoring.testclasses.AClass"
)
)
;
assertNotNull
(
classNotAccessible
)
;
final
CtClass
<
?
>
aClassX
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
"spoon.test.refactoring.testclasses.AClassX"
)
;
assertNotNull
(
aClassX
)
;
final
List
<
CtTypeReference
<
?
>
>
references
=
Query
.
getElements
(
aClassX
.
getFactory
(
)
,
new
AbstractReferenceFilter
<
CtTypeReference
<
?
>
>
(
CtTypeReference
.
class
)
{
@Override
public
boolean
matches
(
CtTypeReference
<
?
>
reference
)
{
return
aClassX
.
getQualifiedName
(
)
.
equals
(
reference
.
getQualifiedName
(
)
)
;
}
}
)
;
assertNotEquals
(
0
,
references
.
size
(
)
)
;
for
(
CtTypeReference
<
?
>
reference
:
references
)
{
assertEquals
(
"AClassX"
,
reference
.
getSimpleName
(
)
)
;
}
}
