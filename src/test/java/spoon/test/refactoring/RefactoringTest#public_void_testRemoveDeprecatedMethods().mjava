@Test
public
void
testRemoveDeprecatedMethods
(
)
{
if
(
checkJavaVersion
(
)
)
{
return
;
}
try
{
Files
.
walk
(
Paths
.
get
(
"target/deprecated-refactoring"
)
)
.
sorted
(
Comparator
.
reverseOrder
(
)
)
.
map
(
Path
::
toFile
)
.
forEach
(
File
::
delete
)
;
}
catch
(
Exception
e
)
{
}
String
input
=
"src/test/resources/deprecated/input"
;
String
resultPath
=
"target/deprecated-refactoring"
;
String
correctResultPath
=
"src/test/resources/deprecated/correctResult"
;
Launcher
spoon
=
new
Launcher
(
)
;
spoon
.
addInputResource
(
correctResultPath
)
;
List
<
CtMethod
<
?
>
>
correctResult
=
spoon
.
buildModel
(
)
.
getElements
(
new
TypeFilter
<
>
(
CtMethod
.
class
)
)
;
Refactoring
.
removeDeprecatedMethods
(
input
,
resultPath
)
;
spoon
=
new
Launcher
(
)
;
spoon
.
addInputResource
(
resultPath
)
;
List
<
CtMethod
<
?
>
>
calculation
=
spoon
.
buildModel
(
)
.
getElements
(
new
TypeFilter
<
>
(
CtMethod
.
class
)
)
;
assertTrue
(
calculation
.
stream
(
)
.
allMatch
(
correctResult
::
contains
)
)
;
assertTrue
(
correctResult
.
stream
(
)
.
allMatch
(
calculation
::
contains
)
)
;
try
{
Files
.
walk
(
Paths
.
get
(
"target/deprecated-refactoring"
)
)
.
sorted
(
Comparator
.
reverseOrder
(
)
)
.
map
(
Path
::
toFile
)
.
forEach
(
File
::
delete
)
;
}
catch
(
Exception
e
)
{
}
}
