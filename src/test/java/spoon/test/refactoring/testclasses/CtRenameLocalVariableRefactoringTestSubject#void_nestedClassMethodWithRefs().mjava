/** 
 * Tests nested class and conflict with field,  and nested local variable references, which must would be shadowed
 */
void
nestedClassMethodWithRefs
(
)
{
@TestTryRename({"-var2","-var3","-var4","-var5","-var6"})
int
var1
=
1
;
new
Consumer
<
Integer
>
(
)
{
@TestTryRename({"-var1","-var3","-var4","-var5","-var6"})
int
var2
=
2
;
@Override
public
void
accept
(
@TestTryRename({"-var1","var2","-var3","-var5","-var6"})
Integer
var4
)
{
@TestTryRename({"-var1","var2","-var4","-var5","-var6"})
int
var3
=
3
;
try
{
@TestTryRename({"-var1","var2","-var3","-var4","var6"})
int
var5
=
5
;
assertTrue
(
var1
==
1
)
;
assertTrue
(
var2
==
2
)
;
assertTrue
(
var3
==
3
)
;
assertTrue
(
var4
==
4
)
;
assertTrue
(
var5
==
5
)
;
throw
new
NumberFormatException
(
)
;
}
catch
(
@TestTryRename({"-var1","var2","-var3","-var4","var5"})
NumberFormatException
var6
)
{
assertTrue
(
var1
==
1
)
;
assertTrue
(
var2
==
2
)
;
assertTrue
(
var3
==
3
)
;
assertTrue
(
var4
==
4
)
;
}
}
}
.
accept
(
4
)
;
assertTrue
(
var1
==
1
)
;
}
