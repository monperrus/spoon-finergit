@SuppressWarnings("rawtypes")
@Test
public
void
loadReferencedClassFromClasspath
(
)
throws
Exception
{
SpoonModelBuilder
comp
=
new
Launcher
(
)
.
createCompiler
(
)
;
Factory
factory
=
comp
.
getFactory
(
)
;
String
packageName
=
"spoon.test.reference"
;
String
className
=
"ReferencingClass"
;
String
qualifiedName
=
packageName
+
"."
+
className
;
String
referencedQualifiedName
=
packageName
+
"."
+
"ReferencedClass"
;
List
<
SpoonResource
>
fileToBeSpooned
=
SpoonResourceHelper
.
resources
(
"./src/test/resources/reference-test/input/"
+
qualifiedName
.
replace
(
'.'
,
'/'
)
+
".java"
)
;
comp
.
addInputSources
(
fileToBeSpooned
)
;
assertEquals
(
1
,
fileToBeSpooned
.
size
(
)
)
;
List
<
SpoonResource
>
classpath
=
SpoonResourceHelper
.
resources
(
"./src/test/resources/reference-test/ReferenceTest.jar"
)
;
String
[
]
dependencyClasspath
=
new
String
[
]
{
classpath
.
get
(
0
)
.
getPath
(
)
}
;
factory
.
getEnvironment
(
)
.
setSourceClasspath
(
dependencyClasspath
)
;
assertEquals
(
1
,
classpath
.
size
(
)
)
;
comp
.
build
(
)
;
CtType
<
?
>
theClass
=
factory
.
Type
(
)
.
get
(
qualifiedName
)
;
CtTypeReference
referencedType
=
null
;
ReferenceTypeFilter
<
CtTypeReference
>
referenceTypeFilter
=
new
ReferenceTypeFilter
<
CtTypeReference
>
(
CtTypeReference
.
class
)
;
List
<
CtTypeReference
>
elements
=
Query
.
getElements
(
theClass
,
referenceTypeFilter
)
;
for
(
CtTypeReference
reference
:
elements
)
{
if
(
reference
.
getQualifiedName
(
)
.
equals
(
referencedQualifiedName
)
)
{
referencedType
=
reference
;
break
;
}
}
assertFalse
(
referencedType
==
null
)
;
Class
referencedClass
=
referencedType
.
getActualClass
(
)
;
assertEquals
(
referencedQualifiedName
,
referencedClass
.
getName
(
)
)
;
}
