@Test
public
void
testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/resources/noclasspath/A.java"
)
;
launcher
.
setSourceOutputDirectory
(
"./target/class-declaration"
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
run
(
)
;
final
CtClass
<
Object
>
aClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
"A"
)
;
final
CtClass
anonymousClass
=
aClass
.
getElements
(
new
TypeFilter
<
>
(
CtNewClass
.
class
)
)
.
get
(
0
)
.
getAnonymousClass
(
)
;
assertEquals
(
"1"
,
anonymousClass
.
getReference
(
)
.
getSimpleName
(
)
)
;
Set
<
CtTypeReference
<
?
>
>
referencedTypes
=
aClass
.
getReferencedTypes
(
)
;
List
<
String
>
referencedTypeNames
=
referencedTypes
.
stream
(
)
.
map
(
Object
::
toString
)
.
collect
(
Collectors
.
toList
(
)
)
;
assertEquals
(
7
,
referencedTypeNames
.
size
(
)
)
;
assertTrue
(
referencedTypeNames
.
contains
(
"A"
)
)
;
assertTrue
(
referencedTypeNames
.
contains
(
"example.B"
)
)
;
assertTrue
(
referencedTypeNames
.
contains
(
"java.lang.Runnable"
)
)
;
assertTrue
(
referencedTypeNames
.
contains
(
"java.lang.Override"
)
)
;
assertTrue
(
referencedTypeNames
.
contains
(
"java.lang.Object"
)
)
;
assertTrue
(
referencedTypeNames
.
contains
(
"A.1"
)
)
;
assertTrue
(
referencedTypeNames
.
contains
(
"void"
)
)
;
}
