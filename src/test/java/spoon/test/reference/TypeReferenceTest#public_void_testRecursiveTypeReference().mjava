@Test
public
void
testRecursiveTypeReference
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/reference/testclasses/Tacos.java"
)
;
launcher
.
setSourceOutputDirectory
(
"./target/spoon-test"
)
;
launcher
.
run
(
)
;
final
CtInvocation
<
?
>
inv
=
Query
.
getElements
(
launcher
.
getFactory
(
)
,
new
TypeFilter
<
CtInvocation
<
?
>
>
(
CtInvocation
.
class
)
{
@Override
public
boolean
matches
(
CtInvocation
<
?
>
element
)
{
return
!
element
.
getExecutable
(
)
.
isConstructor
(
)
&&
super
.
matches
(
element
)
;
}
}
)
.
get
(
0
)
;
assertNotNull
(
inv
.
getExecutable
(
)
)
;
final
CtTypeReference
<
?
>
returnType
=
inv
.
getExecutable
(
)
.
getType
(
)
;
assertNotNull
(
returnType
)
;
assertEquals
(
1
,
returnType
.
getActualTypeArguments
(
)
.
size
(
)
)
;
final
CtTypeParameterReference
genericType
=
(
CtTypeParameterReference
)
returnType
.
getActualTypeArguments
(
)
.
get
(
0
)
;
assertNotNull
(
genericType
)
;
assertNotNull
(
genericType
.
getBoundingType
(
)
)
;
CtTypeReference
<
?
>
extendsGeneric
=
genericType
.
getBoundingType
(
)
;
assertNotNull
(
extendsGeneric
)
;
assertEquals
(
1
,
extendsGeneric
.
getActualTypeArguments
(
)
.
size
(
)
)
;
CtTypeParameterReference
genericExtends
=
(
CtTypeParameterReference
)
extendsGeneric
.
getActualTypeArguments
(
)
.
get
(
0
)
;
assertNotNull
(
genericExtends
)
;
assertNotNull
(
genericExtends
.
getBoundingType
(
)
)
;
assertTrue
(
genericExtends
.
getBoundingType
(
)
instanceof
CtCircularTypeReference
)
;
}
