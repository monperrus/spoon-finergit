@Test
public
void
singleValueRoleAddSetRemove
(
)
{
Launcher
launcher
=
new
Launcher
(
)
;
Factory
factory
=
launcher
.
getFactory
(
)
;
CtTypeReference
<
?
>
typeRef
=
factory
.
Type
(
)
.
createReference
(
"some.test.package.TestType"
)
;
RoleHandler
rh
=
RoleHandlerHelper
.
getRoleHandler
(
typeRef
.
getClass
(
)
,
CtRole
.
PACKAGE_REF
)
;
List
<
CtPackageReference
>
packages
=
rh
.
asList
(
typeRef
)
;
assertListContracts
(
packages
,
typeRef
,
1
,
"some.test.package"
)
;
try
{
packages
.
add
(
typeRef
.
getPackage
(
)
)
;
fail
(
)
;
}
catch
(
Exception
e
)
{
}
assertListContracts
(
packages
,
typeRef
,
1
,
"some.test.package"
)
;
try
{
assertFalse
(
packages
.
add
(
null
)
)
;
fail
(
)
;
}
catch
(
Exception
e
)
{
}
assertListContracts
(
packages
,
typeRef
,
1
,
"some.test.package"
)
;
try
{
packages
.
add
(
factory
.
Package
(
)
.
createReference
(
"some.test.another_package"
)
)
;
fail
(
)
;
}
catch
(
SpoonException
e
)
{
}
assertListContracts
(
packages
,
typeRef
,
1
,
"some.test.package"
)
;
assertFalse
(
packages
.
remove
(
factory
.
Package
(
)
.
createReference
(
"some.test.another_package"
)
)
)
;
assertListContracts
(
packages
,
typeRef
,
1
,
"some.test.package"
)
;
assertFalse
(
packages
.
remove
(
null
)
)
;
assertListContracts
(
packages
,
typeRef
,
1
,
"some.test.package"
)
;
assertTrue
(
packages
.
remove
(
factory
.
Package
(
)
.
createReference
(
"some.test.package"
)
)
)
;
assertListContracts
(
packages
,
typeRef
,
0
,
null
)
;
assertTrue
(
packages
.
add
(
null
)
)
;
assertListContracts
(
packages
,
typeRef
,
1
,
null
)
;
try
{
packages
.
add
(
factory
.
Package
(
)
.
createReference
(
"some.test.another_package"
)
)
;
fail
(
)
;
}
catch
(
SpoonException
e
)
{
}
assertListContracts
(
packages
,
typeRef
,
1
,
null
)
;
assertEquals
(
null
,
packages
.
set
(
0
,
factory
.
Package
(
)
.
createReference
(
"some.test.package"
)
)
)
;
assertListContracts
(
packages
,
typeRef
,
1
,
"some.test.package"
)
;
assertEquals
(
"some.test.package"
,
packages
.
set
(
0
,
null
)
.
getQualifiedName
(
)
)
;
assertListContracts
(
packages
,
typeRef
,
1
,
null
)
;
assertNull
(
packages
.
remove
(
0
)
)
;
assertListContracts
(
packages
,
typeRef
,
0
,
null
)
;
assertTrue
(
packages
.
add
(
null
)
)
;
assertListContracts
(
packages
,
typeRef
,
1
,
null
)
;
assertTrue
(
packages
.
remove
(
null
)
)
;
assertListContracts
(
packages
,
typeRef
,
0
,
null
)
;
try
{
packages
.
set
(
0
,
factory
.
Package
(
)
.
createReference
(
"some.test.another_package"
)
)
;
fail
(
)
;
}
catch
(
IndexOutOfBoundsException
e
)
{
}
assertListContracts
(
packages
,
typeRef
,
0
,
null
)
;
assertTrue
(
packages
.
add
(
factory
.
Package
(
)
.
createReference
(
"some.test.another_package"
)
)
)
;
assertListContracts
(
packages
,
typeRef
,
1
,
"some.test.another_package"
)
;
assertEquals
(
"some.test.another_package"
,
packages
.
remove
(
0
)
.
getQualifiedName
(
)
)
;
assertListContracts
(
packages
,
typeRef
,
0
,
null
)
;
}
