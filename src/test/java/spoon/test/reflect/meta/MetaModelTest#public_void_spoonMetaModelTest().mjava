@Test
@Ignore
public
void
spoonMetaModelTest
(
)
{
SpoonMetaModel
mm
=
new
SpoonMetaModel
(
new
File
(
"./src/main/java"
)
)
;
List
<
String
>
problems
=
new
ArrayList
<
>
(
)
;
Set
<
CtRole
>
unhandledRoles
=
new
HashSet
<
>
(
Arrays
.
asList
(
CtRole
.
values
(
)
)
)
;
mm
.
getMMTypes
(
)
.
forEach
(
mmType
->
{
mmType
.
getRole2field
(
)
.
forEach
(
(
role
,
mmField
)
->
{
unhandledRoles
.
remove
(
role
)
;
if
(
mmField
.
getMethod
(
MMMethodKind
.
GET
)
==
null
)
{
problems
.
add
(
"Missing getter for "
+
mmField
.
getOwnerType
(
)
.
getName
(
)
+
" and CtRole."
+
mmField
.
getRole
(
)
)
;
}
if
(
mmField
.
getMethod
(
MMMethodKind
.
SET
)
==
null
)
{
if
(
mmType
.
getTypeContext
(
)
.
isSubtypeOf
(
mm
.
getFactory
(
)
.
Type
(
)
.
createReference
(
CtReference
.
class
)
)
==
false
&&
mmType
.
getName
(
)
.
equals
(
"CtTypeInformation"
)
==
false
)
{
problems
.
add
(
"Missing setter for "
+
mmField
.
getOwnerType
(
)
.
getName
(
)
+
" and CtRole."
+
mmField
.
getRole
(
)
)
;
}
}
mmField
.
forEachUnhandledMethod
(
ctMethod
->
problems
.
add
(
"Unhandled method signature: "
+
ctMethod
.
getDeclaringType
(
)
.
getSimpleName
(
)
+
"#"
+
ctMethod
.
getSignature
(
)
)
)
;
}
)
;
}
)
;
unhandledRoles
.
forEach
(
it
->
problems
.
add
(
"Unused CtRole."
+
it
.
name
(
)
)
)
;
assertTrue
(
String
.
join
(
"\n"
,
problems
)
,
problems
.
isEmpty
(
)
)
;
}
