@Test
public
void
testContract
(
)
throws
Throwable
{
CtType
<
?
>
toTest
=
typeToTest
.
getModelInterface
(
)
;
CtElement
o
=
factory
.
Core
(
)
.
create
(
(
Class
<
?
CtElement
>
)
toTest
.
getActualClass
(
)
)
;
for
(
MMField
mmField
:
typeToTest
.
getRole2field
(
)
.
values
(
)
)
{
Class
<
?
>
argType
=
mmField
.
getItemValueType
(
)
.
getActualClass
(
)
;
if
(
!
CtElement
.
class
.
isAssignableFrom
(
argType
)
)
{
continue
;
}
CtElement
argument
=
(
CtElement
)
createCompatibleObject
(
mmField
.
getItemValueType
(
)
)
;
if
(
o
.
getClass
(
)
.
getSimpleName
(
)
.
equals
(
"CtAnnotationFieldAccessImpl"
)
&&
mmField
.
getRole
(
)
==
CtRole
.
VARIABLE
)
{
argument
=
factory
.
Core
(
)
.
createFieldReference
(
)
;
}
if
(
CtFieldAccess
.
class
.
isAssignableFrom
(
o
.
getClass
(
)
)
&&
mmField
.
getRole
(
)
==
CtRole
.
VARIABLE
)
{
argument
=
factory
.
Core
(
)
.
createFieldReference
(
)
;
}
assertNotNull
(
argument
)
;
CtElement
receiver
=
(
(
CtElement
)
o
)
.
clone
(
)
;
RoleHandler
rh
=
RoleHandlerHelper
.
getRoleHandler
(
o
.
getClass
(
)
,
mmField
.
getRole
(
)
)
;
if
(
mmField
.
isUnsettable
(
)
)
{
try
{
invokeSetter
(
rh
,
receiver
,
argument
)
;
}
catch
(
SpoonException
e
)
{
return
;
}
CtElement
arg
=
argument
;
return
;
}
invokeSetter
(
rh
,
receiver
,
argument
)
;
CtElement
finalArgument
=
argument
;
try
{
receiver
.
accept
(
new
CtScanner
(
)
{
@Override
public
void
scan
(
CtElement
e
)
{
super
.
scan
(
e
)
;
if
(
e
==
finalArgument
)
{
throw
new
SpoonException
(
)
;
}
}
}
)
;
fail
(
"Not derived field "
+
mmField
.
toString
(
)
+
" should set value"
)
;
}
catch
(
SpoonException
expected
)
{
}
final
CtElement
argument2
=
argument
.
clone
(
)
;
assertNotSame
(
argument
,
argument2
)
;
argument
.
replace
(
argument2
)
;
assertTrue
(
receiver
.
getClass
(
)
.
getSimpleName
(
)
+
" failed for "
+
mmField
,
receiver
.
getElements
(
new
Filter
<
CtElement
>
(
)
{
@Override
public
boolean
matches
(
CtElement
element
)
{
return
element
==
argument2
;
}
}
)
.
size
(
)
==
1
)
;
}
}
