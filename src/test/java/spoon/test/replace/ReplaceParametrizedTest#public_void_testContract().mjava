@Test
public
void
testContract
(
)
{
List
<
String
>
problems
=
new
ArrayList
<
>
(
)
;
CtType
<
?
>
toTest
=
typeToTest
.
getMetamodelInterface
(
)
;
Factory
factory
=
toTest
.
getFactory
(
)
;
CtElement
o
=
factory
.
Core
(
)
.
create
(
(
Class
<
?
CtElement
>
)
toTest
.
getActualClass
(
)
)
;
Map
<
CtRole
,
MetamodelProperty
>
roleToProperty
=
typeToTest
.
getRoleToProperty
(
)
;
for
(
MetamodelProperty
mmField
:
roleToProperty
.
values
(
)
)
{
Class
<
?
>
argType
=
mmField
.
getTypeofItems
(
)
.
getActualClass
(
)
;
if
(
!
CtElement
.
class
.
isAssignableFrom
(
argType
)
)
{
continue
;
}
CtTypeReference
<
?
>
itemType
=
mmField
.
getTypeofItems
(
)
;
if
(
itemType
.
getQualifiedName
(
)
.
equals
(
CtStatement
.
class
.
getName
(
)
)
)
{
itemType
=
factory
.
createCtTypeReference
(
CtBlock
.
class
)
;
}
if
(
o
.
getClass
(
)
.
getSimpleName
(
)
.
equals
(
"CtAnnotationFieldAccessImpl"
)
&&
mmField
.
getRole
(
)
==
CtRole
.
VARIABLE
)
{
itemType
=
factory
.
createCtTypeReference
(
CtFieldReference
.
class
)
;
}
else
if
(
CtFieldAccess
.
class
.
isAssignableFrom
(
o
.
getClass
(
)
)
&&
mmField
.
getRole
(
)
==
CtRole
.
VARIABLE
)
{
itemType
=
factory
.
createCtTypeReference
(
CtFieldReference
.
class
)
;
}
CtElement
argument
=
(
CtElement
)
createCompatibleObject
(
itemType
)
;
assertNotNull
(
argument
)
;
CtElement
receiver
=
(
(
CtElement
)
o
)
.
clone
(
)
;
RoleHandler
rh
=
RoleHandlerHelper
.
getRoleHandler
(
o
.
getClass
(
)
,
mmField
.
getRole
(
)
)
;
if
(
mmField
.
isUnsettable
(
)
)
{
try
{
invokeSetter
(
rh
,
receiver
,
argument
)
;
}
catch
(
SpoonException
e
)
{
return
;
}
CtRole
argumentsRoleInParent
=
argument
.
getRoleInParent
(
)
;
if
(
argumentsRoleInParent
==
null
)
{
continue
;
}
if
(
argumentsRoleInParent
==
mmField
.
getRole
(
)
)
{
problems
.
add
(
"UnsettableProperty "
+
mmField
+
" sets the value"
)
;
}
else
{
if
(
mmField
.
isDerived
(
)
)
{
}
else
{
problems
.
add
(
"UnsettableProperty "
+
mmField
+
" sets the value into different role "
+
argumentsRoleInParent
)
;
}
}
continue
;
}
invokeSetter
(
rh
,
receiver
,
argument
)
;
CtElement
finalArgument
=
argument
;
class
Scanner
extends
CtScanner
{
boolean
found
=
false
;
@Override
public
void
scan
(
CtRole
role
,
CtElement
e
)
{
super
.
scan
(
role
,
e
)
;
if
(
e
==
finalArgument
)
{
if
(
rh
.
getRole
(
)
==
role
||
rh
.
getRole
(
)
.
getSuperRole
(
)
==
role
)
{
found
=
true
;
return
;
}
problems
.
add
(
"Argument was set into "
+
rh
.
getRole
(
)
+
" but was found in "
+
role
)
;
}
}
}
;
Scanner
s
=
new
Scanner
(
)
;
receiver
.
accept
(
s
)
;
assertTrue
(
"Settable field "
+
mmField
.
toString
(
)
+
" should set value.\n"
+
getReport
(
problems
)
,
s
.
found
)
;
assertSame
(
argument
,
invokeGetter
(
rh
,
receiver
)
)
;
final
CtElement
argument2
=
argument
.
clone
(
)
;
assertNotSame
(
argument
,
argument2
)
;
argument
.
replace
(
argument2
)
;
assertTrue
(
receiver
.
getClass
(
)
.
getSimpleName
(
)
+
" failed for "
+
mmField
,
receiver
.
getElements
(
new
Filter
<
CtElement
>
(
)
{
@Override
public
boolean
matches
(
CtElement
element
)
{
return
element
==
argument2
;
}
}
)
.
size
(
)
==
1
)
;
}
if
(
problems
.
size
(
)
>
0
)
{
fail
(
getReport
(
problems
)
)
;
}
}
