@Test
public
void
testContract
(
)
throws
Throwable
{
Object
o
=
factory
.
Core
(
)
.
create
(
(
Class
<
?
CtElement
>
)
toTest
.
getActualClass
(
)
)
;
for
(
CtMethod
<
?
>
ctsetter
:
getAllSetters
(
toTest
)
)
{
Method
setter
=
ctsetter
.
getReference
(
)
.
getActualMethod
(
)
;
Class
<
?
CtElement
>
argType
=
(
Class
<
?
CtElement
>
)
setter
.
getParameters
(
)
[
0
]
.
getType
(
)
;
if
(
!
CtElement
.
class
.
isAssignableFrom
(
argType
)
)
{
continue
;
}
CtElement
argument
=
(
CtElement
)
createCompatibleObject
(
ctsetter
.
getParameters
(
)
.
get
(
0
)
.
getType
(
)
)
;
if
(
o
.
getClass
(
)
.
getSimpleName
(
)
.
equals
(
"CtAnnotationFieldAccessImpl"
)
&&
setter
.
getName
(
)
.
equals
(
"setVariable"
)
)
{
argument
=
factory
.
Core
(
)
.
createFieldReference
(
)
;
}
if
(
CtFieldAccess
.
class
.
isAssignableFrom
(
o
.
getClass
(
)
)
&&
setter
.
getName
(
)
.
equals
(
"setVariable"
)
)
{
argument
=
factory
.
Core
(
)
.
createFieldReference
(
)
;
}
assertNotNull
(
argument
)
;
CtElement
receiver
=
(
(
CtElement
)
o
)
.
clone
(
)
;
setter
.
invoke
(
receiver
,
new
Object
[
]
{
argument
}
)
;
if
(
ctsetter
.
getAnnotation
(
PropertySetter
.
class
)
!=
null
)
{
CtElement
finalArgument
=
argument
;
try
{
receiver
.
accept
(
new
CtScanner
(
)
{
@Override
public
void
scan
(
CtElement
e
)
{
super
.
scan
(
e
)
;
if
(
e
==
finalArgument
)
{
throw
new
SpoonException
(
)
;
}
}
}
)
;
fail
(
ctsetter
.
getSignature
(
)
)
;
}
catch
(
SpoonException
expected
)
{
}
}
final
CtElement
argument2
=
argument
.
clone
(
)
;
assertNotSame
(
argument
,
argument2
)
;
argument
.
replace
(
argument2
)
;
if
(
ctsetter
.
getAnnotation
(
UnsettableProperty
.
class
)
==
null
)
{
assertTrue
(
receiver
.
getClass
(
)
.
getSimpleName
(
)
+
" failed for "
+
setter
.
getName
(
)
,
receiver
.
getElements
(
new
Filter
<
CtElement
>
(
)
{
@Override
public
boolean
matches
(
CtElement
element
)
{
return
element
==
argument2
;
}
}
)
.
size
(
)
>
0
)
;
}
}
}
