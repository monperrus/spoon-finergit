@Test
public
void
testAnonymousClass
(
)
throws
Exception
{
CtClass
<
?
>
type
=
build
(
"spoon.test.secondaryclasses.testclasses"
,
"AnonymousClass"
)
;
assertEquals
(
"AnonymousClass"
,
type
.
getSimpleName
(
)
)
;
CtNewClass
<
?
>
x
=
type
.
getElements
(
new
TypeFilter
<
CtNewClass
<
?
>
>
(
CtNewClass
.
class
)
)
.
get
(
0
)
;
CtNewClass
<
?
>
y
=
type
.
getElements
(
new
TypeFilter
<
CtNewClass
<
?
>
>
(
CtNewClass
.
class
)
)
.
get
(
1
)
;
if
(
x
.
getParent
(
)
instanceof
CtBlock
)
{
CtNewClass
<
?
>
z
=
x
;
x
=
y
;
y
=
z
;
}
CtClass
<
?
>
anonymousClass0
=
x
.
getAnonymousClass
(
)
;
CtClass
<
?
>
anonymousClass1
=
y
.
getAnonymousClass
(
)
;
assertEquals
(
"1"
,
anonymousClass0
.
getSimpleName
(
)
)
;
assertEquals
(
"2"
,
anonymousClass1
.
getSimpleName
(
)
)
;
assertEquals
(
"spoon.test.secondaryclasses.testclasses.AnonymousClass$1"
,
anonymousClass0
.
getQualifiedName
(
)
)
;
assertEquals
(
"spoon.test.secondaryclasses.testclasses.AnonymousClass$2"
,
anonymousClass1
.
getQualifiedName
(
)
)
;
assertNull
(
x
.
getType
(
)
.
getDeclaration
(
)
)
;
assertNotNull
(
x
.
getType
(
)
.
getTypeDeclaration
(
)
)
;
assertEquals
(
ActionListener
.
class
,
x
.
getType
(
)
.
getActualClass
(
)
)
;
assertNotNull
(
y
.
getType
(
)
.
getDeclaration
(
)
)
;
assertEquals
(
"spoon.test.secondaryclasses.testclasses.AnonymousClass$2()"
,
y
.
getExecutable
(
)
.
toString
(
)
)
;
assertEquals
(
type
.
getFactory
(
)
.
Type
(
)
.
createReference
(
I
.
class
)
,
y
.
getAnonymousClass
(
)
.
getSuperInterfaces
(
)
.
toArray
(
new
CtTypeReference
[
]
)
[
0
]
)
;
}
