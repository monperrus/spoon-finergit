@Test
public
void
testIsAnonymousMethodInCtClass
(
)
throws
Exception
{
CtClass
<
?
>
type
=
build
(
"spoon.test.secondaryclasses.testclasses"
,
"AnonymousClass"
)
;
TreeSet
<
CtClass
<
?
>
>
ts
=
new
TreeSet
<
>
(
new
CtLineElementComparator
(
)
)
;
ts
.
addAll
(
type
.
getElements
(
new
AbstractFilter
<
CtClass
<
?
>
>
(
CtClass
.
class
)
{
@Override
public
boolean
matches
(
CtClass
<
?
>
element
)
{
return
element
.
isAnonymous
(
)
;
}
}
)
)
;
List
<
CtClass
<
?
>
>
anonymousClass
=
new
ArrayList
<
>
(
)
;
anonymousClass
.
addAll
(
ts
)
;
assertFalse
(
type
.
isAnonymous
(
)
)
;
assertTrue
(
ts
.
first
(
)
.
isAnonymous
(
)
)
;
assertTrue
(
anonymousClass
.
get
(
1
)
.
isAnonymous
(
)
)
;
assertEquals
(
2
,
anonymousClass
.
size
(
)
)
;
assertEquals
(
2
,
ts
.
size
(
)
)
;
assertEquals
(
"spoon.test.secondaryclasses.testclasses.AnonymousClass$1"
,
anonymousClass
.
get
(
0
)
.
getQualifiedName
(
)
)
;
assertEquals
(
"spoon.test.secondaryclasses.testclasses.AnonymousClass$2"
,
anonymousClass
.
get
(
1
)
.
getQualifiedName
(
)
)
;
}
