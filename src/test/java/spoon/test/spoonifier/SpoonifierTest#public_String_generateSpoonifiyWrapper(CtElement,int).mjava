public
String
generateSpoonifiyWrapper
(
CtElement
element
,
int
i
)
{
String
elementClass
=
element
.
getClass
(
)
.
getSimpleName
(
)
;
if
(
elementClass
.
endsWith
(
"Impl"
)
)
{
elementClass
=
elementClass
.
replace
(
"Impl"
,
""
)
;
}
String
variableName
=
elementClass
.
substring
(
0
,
1
)
.
toLowerCase
(
)
+
elementClass
.
substring
(
1
)
+
"0"
;
SpoonifyVisitor
spoonifier
=
new
SpoonifyVisitor
(
)
;
element
.
accept
(
spoonifier
)
;
StringBuffer
buf
=
new
StringBuffer
(
)
;
buf
.
append
(
"import java.util.*;\n"
)
;
buf
.
append
(
"import spoon.reflect.code.*;\n"
)
;
buf
.
append
(
"import spoon.reflect.declaration.*;\n"
)
;
buf
.
append
(
"import spoon.reflect.factory.Factory;\n"
)
;
buf
.
append
(
"import spoon.reflect.path.CtRole;\n"
)
;
buf
.
append
(
"import spoon.reflect.reference.*;\n"
)
;
buf
.
append
(
"public class SpoonifierWrapper"
+
i
+
"{\n"
)
;
buf
.
append
(
"\tpublic static CtElement get(Factory factory) {\n"
)
;
buf
.
append
(
spoonifier
.
getResult
(
)
)
;
buf
.
append
(
"\treturn "
+
variableName
+
";\n"
)
;
buf
.
append
(
"\t}\n"
)
;
buf
.
append
(
"}\n"
)
;
return
buf
.
toString
(
)
;
}
