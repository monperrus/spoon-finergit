@Test
public
void
testGeneratedSpoonifyCode
(
)
{
CtClass
aClass
=
Launcher
.
parseClass
(
"public class A {int i = 1+1; static Object m(String toto) { return toto;}}"
)
;
SpoonifyVisitor
v
=
new
SpoonifyVisitor
(
)
;
aClass
.
accept
(
v
)
;
String
expected
=
"\tCtClass ctClass0 = factory.createClass();\n"
+
"\tctClass0.setSimpleName(\"A\");\n"
+
"\tSet<ModifierKind> ctClass0Modifiers = new HashSet<>();\n"
+
"\tctClass0Modifiers.add(ModifierKind.PUBLIC);\n"
+
"\tctClass0.setModifiers(ctClass0Modifiers);\n"
+
"\t\tCtConstructor ctConstructor0 = factory.createConstructor();\n"
+
"\t\tctConstructor0.setImplicit(true);\n"
+
"\t\tctConstructor0.setSimpleName(\"<init>\");\n"
+
"\t\tSet<ModifierKind> ctConstructor0Modifiers = new HashSet<>();\n"
+
"\t\tctConstructor0Modifiers.add(ModifierKind.PUBLIC);\n"
+
"\t\tctConstructor0.setModifiers(ctConstructor0Modifiers);\n"
+
"\t\tList ctClass0TypeMembers = new ArrayList();\n"
+
"\t\tctClass0TypeMembers.add(ctConstructor0);\n"
+
"\t\t\tCtBlock ctBlock0 = factory.createBlock();\n"
+
"\t\t\tctConstructor0.setValueByRole(CtRole.BODY, ctBlock0);\n"
+
"\t\t\t\tCtInvocation ctInvocation0 = factory.createInvocation();\n"
+
"\t\t\t\tctInvocation0.setImplicit(true);\n"
+
"\t\t\t\tList ctBlock0Statements = new ArrayList();\n"
+
"\t\t\t\tctBlock0Statements.add(ctInvocation0);\n"
+
"\t\t\t\t\tCtExecutableReference ctExecutableReference0 = factory.createExecutableReference();\n"
+
"\t\t\t\t\tctExecutableReference0.setSimpleName(\"<init>\");\n"
+
"\t\t\t\t\tctInvocation0.setValueByRole(CtRole.EXECUTABLE_REF, ctExecutableReference0);\n"
+
"\t\t\t\t\t\tctExecutableReference0.setValueByRole(CtRole.DECLARING_TYPE, factory.Type().createSimplyQualifiedReference(\"java.lang.Object\"));\n"
+
"\t\t\t\t\t\tctExecutableReference0.setValueByRole(CtRole.TYPE, factory.Type().createSimplyQualifiedReference(\"java.lang.Object\"));\n"
+
"\t\t\tctBlock0.setValueByRole(CtRole.STATEMENT, ctBlock0Statements);\n"
+
"\t\tCtField ctField0 = factory.createField();\n"
+
"\t\tctField0.setSimpleName(\"i\");\n"
+
"\t\tctClass0TypeMembers.add(ctField0);\n"
+
"\t\t\tctField0.setValueByRole(CtRole.TYPE, factory.Type().INTEGER_PRIMITIVE);\n"
+
"\t\t\tCtBinaryOperator ctBinaryOperator0 = factory.createBinaryOperator();\n"
+
"\t\t\tctBinaryOperator0.setKind(BinaryOperatorKind.PLUS);\n"
+
"\t\t\tctField0.setValueByRole(CtRole.DEFAULT_EXPRESSION, ctBinaryOperator0);\n"
+
"\t\t\t\tctBinaryOperator0.setValueByRole(CtRole.TYPE, factory.Type().INTEGER_PRIMITIVE);\n"
+
"\t\t\t\tCtLiteral ctLiteral0 = factory.createLiteral();\n"
+
"\t\t\t\tctLiteral0.setValue((int) 1);\n"
+
"\t\t\t\tctLiteral0.setBase(LiteralBase.DECIMAL);\n"
+
"\t\t\t\tctBinaryOperator0.setValueByRole(CtRole.LEFT_OPERAND, ctLiteral0);\n"
+
"\t\t\t\t\tctLiteral0.setValueByRole(CtRole.TYPE, factory.Type().INTEGER_PRIMITIVE);\n"
+
"\t\t\t\tCtLiteral ctLiteral1 = factory.createLiteral();\n"
+
"\t\t\t\tctLiteral1.setValue((int) 1);\n"
+
"\t\t\t\tctLiteral1.setBase(LiteralBase.DECIMAL);\n"
+
"\t\t\t\tctBinaryOperator0.setValueByRole(CtRole.RIGHT_OPERAND, ctLiteral1);\n"
+
"\t\t\t\t\tctLiteral1.setValueByRole(CtRole.TYPE, factory.Type().INTEGER_PRIMITIVE);\n"
+
"\t\tCtMethod ctMethod0 = factory.createMethod();\n"
+
"\t\tctMethod0.setSimpleName(\"m\");\n"
+
"\t\tSet<ModifierKind> ctMethod0Modifiers = new HashSet<>();\n"
+
"\t\tctMethod0Modifiers.add(ModifierKind.STATIC);\n"
+
"\t\tctMethod0.setModifiers(ctMethod0Modifiers);\n"
+
"\t\tctClass0TypeMembers.add(ctMethod0);\n"
+
"\t\t\tctMethod0.setValueByRole(CtRole.TYPE, factory.Type().createSimplyQualifiedReference(\"java.lang.Object\"));\n"
+
"\t\t\tCtParameter ctParameter0 = factory.createParameter();\n"
+
"\t\t\tctParameter0.setSimpleName(\"toto\");\n"
+
"\t\t\tList ctMethod0Parameters = new ArrayList();\n"
+
"\t\t\tctMethod0Parameters.add(ctParameter0);\n"
+
"\t\t\t\tctParameter0.setValueByRole(CtRole.TYPE, factory.Type().createSimplyQualifiedReference(\"java.lang.String\"));\n"
+
"\t\t\tCtBlock ctBlock1 = factory.createBlock();\n"
+
"\t\t\tctMethod0.setValueByRole(CtRole.BODY, ctBlock1);\n"
+
"\t\t\t\tCtReturn ctReturn0 = factory.createReturn();\n"
+
"\t\t\t\tList ctBlock1Statements = new ArrayList();\n"
+
"\t\t\t\tctBlock1Statements.add(ctReturn0);\n"
+
"\t\t\t\t\tCtVariableRead ctVariableRead0 = factory.createVariableRead();\n"
+
"\t\t\t\t\tctReturn0.setValueByRole(CtRole.EXPRESSION, ctVariableRead0);\n"
+
"\t\t\t\t\t\tCtParameterReference ctParameterReference0 = factory.createParameterReference();\n"
+
"\t\t\t\t\t\tctParameterReference0.setSimpleName(\"toto\");\n"
+
"\t\t\t\t\t\tctVariableRead0.setValueByRole(CtRole.VARIABLE, ctParameterReference0);\n"
+
"\t\t\t\t\t\t\tctParameterReference0.setValueByRole(CtRole.TYPE, factory.Type().createSimplyQualifiedReference(\"java.lang.String\"));\n"
+
"\t\t\tctBlock1.setValueByRole(CtRole.STATEMENT, ctBlock1Statements);\n"
+
"\t\tctMethod0.setValueByRole(CtRole.PARAMETER, ctMethod0Parameters);\n"
+
"\tctClass0.setValueByRole(CtRole.TYPE_MEMBER, ctClass0TypeMembers);\n"
;
assertEquals
(
expected
,
v
.
getResult
(
)
)
;
}
