/** 
 * @param targetElement that will be Spoonified
 * @param i an integer to avoid duplicated classesThis method verifies that SpoonifyVisitor can generate code that replicates a class
 */
public
void
testSpoonifierWith
(
CtElement
targetElement
,
int
i
)
throws
MalformedURLException
,
ClassNotFoundException
,
NoSuchMethodException
,
InvocationTargetException
,
IllegalAccessException
{
String
wrapper
=
generateSpoonifiyWrapper
(
targetElement
,
i
)
;
Launcher
oLauncher
=
new
Launcher
(
)
;
File
outputBinDir
=
new
File
(
"./spooned-classes/"
)
;
oLauncher
.
setBinaryOutputDirectory
(
outputBinDir
)
;
CtClass
wrapperClass
=
oLauncher
.
parseClass
(
wrapper
)
;
CtModel
oModel
=
oLauncher
.
buildModel
(
)
;
oLauncher
.
getEnvironment
(
)
.
disableConsistencyChecks
(
)
;
oModel
.
getRootPackage
(
)
.
addType
(
wrapperClass
)
;
oLauncher
.
getModelBuilder
(
)
.
compile
(
SpoonModelBuilder
.
InputType
.
CTTYPES
)
;
URLClassLoader
urlClassLoader
=
new
URLClassLoader
(
new
URL
[
]
{
outputBinDir
.
toURI
(
)
.
toURL
(
)
}
)
;
Class
rtWrapper
=
urlClassLoader
.
loadClass
(
"SpoonifierWrapper"
+
i
)
;
Method
get
=
rtWrapper
.
getMethod
(
"get"
,
Factory
.
class
)
;
CtElement
generatedElement
=
(
CtElement
)
get
.
invoke
(
null
,
targetElement
.
getFactory
(
)
)
;
assertEquals
(
targetElement
,
generatedElement
)
;
}
