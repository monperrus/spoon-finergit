@Test
public
void
testStaticTargets
(
)
throws
Exception
{
final
Factory
factory
=
build
(
Foo
.
class
,
Bar
.
class
,
SuperClass
.
class
)
;
final
CtClass
<
Foo
>
type
=
factory
.
Class
(
)
.
get
(
Foo
.
class
)
;
final
CtTypeReference
<
Foo
>
expectedType
=
type
.
getReference
(
)
;
final
CtTypeReference
<
Bar
>
expectedBarType
=
factory
.
Class
(
)
.
get
(
Bar
.
class
)
.
getReference
(
)
;
final
CtMethod
<
?
>
constructor
=
type
.
getMethodsByName
(
"m"
)
.
get
(
0
)
;
final
List
<
CtFieldAccess
<
?
>
>
elements
=
constructor
.
getElements
(
new
TypeFilter
<
CtFieldAccess
<
?
>
>
(
CtFieldAccess
.
class
)
)
;
assertEquals
(
10
,
elements
.
size
(
)
)
;
assertTrue
(
elements
.
get
(
0
)
instanceof
CtFieldRead
)
;
assertTrue
(
elements
.
get
(
1
)
instanceof
CtFieldRead
)
;
assertTrue
(
elements
.
get
(
2
)
instanceof
CtFieldRead
)
;
assertTrue
(
elements
.
get
(
3
)
instanceof
CtFieldWrite
)
;
assertTrue
(
elements
.
get
(
4
)
instanceof
CtFieldWrite
)
;
assertTrue
(
elements
.
get
(
5
)
instanceof
CtFieldWrite
)
;
assertTrue
(
elements
.
get
(
6
)
instanceof
CtFieldRead
)
;
assertTrue
(
elements
.
get
(
7
)
instanceof
CtFieldRead
)
;
assertTrue
(
elements
.
get
(
8
)
instanceof
CtFieldWrite
)
;
assertTrue
(
elements
.
get
(
9
)
instanceof
CtFieldWrite
)
;
assertEquals
(
expectedType
,
elements
.
get
(
0
)
.
getVariable
(
)
.
getDeclaringType
(
)
)
;
assertEquals
(
expectedType
,
elements
.
get
(
1
)
.
getVariable
(
)
.
getDeclaringType
(
)
)
;
assertEquals
(
expectedType
,
elements
.
get
(
2
)
.
getVariable
(
)
.
getDeclaringType
(
)
)
;
assertEquals
(
expectedType
,
elements
.
get
(
3
)
.
getVariable
(
)
.
getDeclaringType
(
)
)
;
assertEquals
(
expectedType
,
elements
.
get
(
4
)
.
getVariable
(
)
.
getDeclaringType
(
)
)
;
assertEquals
(
expectedType
,
elements
.
get
(
5
)
.
getVariable
(
)
.
getDeclaringType
(
)
)
;
assertEquals
(
expectedBarType
,
elements
.
get
(
6
)
.
getVariable
(
)
.
getDeclaringType
(
)
)
;
assertEquals
(
expectedBarType
,
elements
.
get
(
7
)
.
getVariable
(
)
.
getDeclaringType
(
)
)
;
assertEquals
(
expectedBarType
,
elements
.
get
(
8
)
.
getVariable
(
)
.
getDeclaringType
(
)
)
;
assertEquals
(
expectedBarType
,
elements
.
get
(
9
)
.
getVariable
(
)
.
getDeclaringType
(
)
)
;
final
CtThisAccess
<
Foo
>
exepectedThisAccess
=
type
.
getFactory
(
)
.
Core
(
)
.
createThisAccess
(
)
;
exepectedThisAccess
.
setType
(
expectedType
)
;
final
CtTypeAccess
<
Foo
>
expectedTypeAccess
=
type
.
getFactory
(
)
.
Code
(
)
.
createTypeAccess
(
expectedType
)
;
final
CtTypeAccess
<
Bar
>
expectedBarTypeAccess
=
type
.
getFactory
(
)
.
Code
(
)
.
createTypeAccess
(
expectedBarType
)
;
assertEquals
(
exepectedThisAccess
,
elements
.
get
(
0
)
.
getTarget
(
)
)
;
assertEquals
(
expectedTypeAccess
,
elements
.
get
(
1
)
.
getTarget
(
)
)
;
assertEquals
(
expectedTypeAccess
,
elements
.
get
(
2
)
.
getTarget
(
)
)
;
assertEquals
(
exepectedThisAccess
,
elements
.
get
(
3
)
.
getTarget
(
)
)
;
assertEquals
(
expectedTypeAccess
,
elements
.
get
(
4
)
.
getTarget
(
)
)
;
assertEquals
(
expectedTypeAccess
,
elements
.
get
(
5
)
.
getTarget
(
)
)
;
assertEquals
(
expectedBarTypeAccess
,
elements
.
get
(
6
)
.
getTarget
(
)
)
;
assertEquals
(
expectedBarTypeAccess
,
elements
.
get
(
7
)
.
getTarget
(
)
)
;
assertEquals
(
expectedBarTypeAccess
,
elements
.
get
(
8
)
.
getTarget
(
)
)
;
assertEquals
(
expectedBarTypeAccess
,
elements
.
get
(
9
)
.
getTarget
(
)
)
;
}
