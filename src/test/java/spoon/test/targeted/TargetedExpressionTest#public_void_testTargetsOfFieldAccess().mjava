@Test
public
void
testTargetsOfFieldAccess
(
)
throws
Exception
{
final
Factory
factory
=
build
(
Foo
.
class
,
Bar
.
class
,
SuperClass
.
class
)
;
final
CtClass
<
Foo
>
type
=
factory
.
Class
(
)
.
get
(
Foo
.
class
)
;
final
CtTypeReference
<
Foo
>
expectedType
=
type
.
getReference
(
)
;
final
CtTypeReference
<
Bar
>
expectedBarType
=
factory
.
Class
(
)
.
get
(
Bar
.
class
)
.
getReference
(
)
;
final
CtTypeReference
<
SuperClass
>
expectedSuperClassType
=
factory
.
Class
(
)
.
get
(
SuperClass
.
class
)
.
getReference
(
)
;
final
CtTypeReference
<
Foo
.
Fii
.
Fuu
>
expectedFuuType
=
factory
.
Class
(
)
.
get
(
Foo
.
Fii
.
Fuu
.
class
)
.
getReference
(
)
;
final
CtMethod
<
?
>
fieldMethod
=
type
.
getMethodsByName
(
"field"
)
.
get
(
0
)
;
final
CtThisAccess
<
Foo
>
expectedThisAccess
=
type
.
getFactory
(
)
.
Core
(
)
.
createThisAccess
(
)
;
expectedThisAccess
.
setType
(
expectedType
)
;
final
List
<
CtFieldAccess
<
?
>
>
elements
=
fieldMethod
.
getElements
(
new
TypeFilter
<
CtFieldAccess
<
?
>
>
(
CtFieldAccess
.
class
)
)
;
assertEquals
(
10
,
elements
.
size
(
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedType
)
.
target
(
expectedThisAccess
)
.
result
(
"spoon.test.targeted.testclasses.Foo.this.i"
)
,
elements
.
get
(
0
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedType
)
.
target
(
expectedThisAccess
)
.
result
(
"i"
)
,
elements
.
get
(
1
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedBarType
)
.
target
(
elements
.
get
(
3
)
)
.
result
(
"spoon.test.targeted.testclasses.Foo.this.bar.i"
)
,
elements
.
get
(
2
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedType
)
.
target
(
expectedThisAccess
)
.
result
(
"spoon.test.targeted.testclasses.Foo.this.bar"
)
,
elements
.
get
(
3
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedBarType
)
.
target
(
elements
.
get
(
5
)
)
.
result
(
"bar.i"
)
,
elements
.
get
(
4
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedType
)
.
target
(
expectedThisAccess
)
.
result
(
"bar"
)
,
elements
.
get
(
5
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedSuperClassType
)
.
target
(
expectedThisAccess
)
.
result
(
"spoon.test.targeted.testclasses.Foo.this.o"
)
,
elements
.
get
(
6
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedSuperClassType
)
.
target
(
expectedThisAccess
)
.
result
(
"o"
)
,
elements
.
get
(
7
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedFuuType
)
.
target
(
elements
.
get
(
9
)
)
.
result
(
"fuu.p"
)
,
elements
.
get
(
8
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedType
)
.
target
(
expectedThisAccess
)
.
result
(
"fuu"
)
,
elements
.
get
(
9
)
)
;
}
