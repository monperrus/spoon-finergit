@Test
public
void
testTargetsOfFieldAccessInInnerClass
(
)
throws
Exception
{
final
Factory
factory
=
build
(
Foo
.
class
,
Bar
.
class
,
SuperClass
.
class
)
;
final
CtClass
<
Foo
>
type
=
factory
.
Class
(
)
.
get
(
Foo
.
class
)
;
final
CtTypeReference
<
Foo
>
expectedType
=
type
.
getReference
(
)
;
final
CtTypeReference
<
SuperClass
>
expectedSuperClassType
=
factory
.
Class
(
)
.
get
(
SuperClass
.
class
)
.
getReference
(
)
;
final
CtType
<
InnerClass
>
innerClass
=
type
.
getNestedType
(
"InnerClass"
)
;
final
CtTypeReference
<
InnerClass
>
expectedInnerClass
=
innerClass
.
getReference
(
)
;
final
CtType
<
?
>
nestedTypeScanner
=
type
.
getNestedType
(
"1NestedTypeScanner"
)
;
final
CtTypeReference
<
?
>
expectedNested
=
nestedTypeScanner
.
getReference
(
)
;
final
CtTypeAccess
<
Foo
>
fooTypeAccess
=
factory
.
Code
(
)
.
createTypeAccess
(
expectedType
)
;
final
CtThisAccess
<
Foo
>
expectedThisAccess
=
factory
.
Core
(
)
.
createThisAccess
(
)
;
expectedThisAccess
.
setType
(
expectedType
)
;
expectedThisAccess
.
setImplicit
(
true
)
;
final
CtThisAccess
<
SuperClass
>
expectedSuperThisAccess
=
factory
.
Core
(
)
.
createThisAccess
(
)
;
expectedSuperThisAccess
.
setType
(
expectedSuperClassType
)
;
expectedSuperThisAccess
.
setImplicit
(
true
)
;
final
CtThisAccess
<
InnerClass
>
expectedInnerClassAccess
=
factory
.
Core
(
)
.
createThisAccess
(
)
;
expectedInnerClassAccess
.
setType
(
expectedInnerClass
)
;
expectedInnerClassAccess
.
setImplicit
(
true
)
;
final
CtThisAccess
expectedNestedAccess
=
factory
.
Core
(
)
.
createThisAccess
(
)
;
expectedNestedAccess
.
setType
(
expectedNested
)
;
final
CtMethod
<
?
>
innerInvMethod
=
innerClass
.
getMethodsByName
(
"innerField"
)
.
get
(
0
)
;
final
List
<
CtFieldAccess
<
?
>
>
elements
=
innerInvMethod
.
getElements
(
new
TypeFilter
<
>
(
CtFieldAccess
.
class
)
)
;
assertEquals
(
6
,
elements
.
size
(
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedInnerClass
)
.
target
(
expectedInnerClassAccess
)
.
result
(
"spoon.test.targeted.testclasses.Foo.InnerClass.this.i"
)
,
elements
.
get
(
0
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedInnerClass
)
.
target
(
expectedInnerClassAccess
)
.
result
(
"i"
)
,
elements
.
get
(
1
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedType
)
.
target
(
expectedThisAccess
)
.
result
(
"spoon.test.targeted.testclasses.Foo.this.i"
)
,
elements
.
get
(
2
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedType
)
.
target
(
fooTypeAccess
)
.
result
(
"spoon.test.targeted.testclasses.Foo.k"
)
,
elements
.
get
(
3
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedSuperClassType
)
.
target
(
expectedThisAccess
)
.
result
(
"spoon.test.targeted.testclasses.Foo.this.o"
)
,
elements
.
get
(
4
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedSuperClassType
)
.
target
(
expectedThisAccess
)
.
result
(
"o"
)
,
elements
.
get
(
5
)
)
;
final
List
<
CtFieldAccess
<
?
>
>
newElements
=
nestedTypeScanner
.
getMethodsByName
(
"checkField"
)
.
get
(
0
)
.
getElements
(
new
TypeFilter
<
>
(
CtFieldAccess
.
class
)
)
;
assertEquals
(
2
,
newElements
.
size
(
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedNested
)
.
target
(
expectedNestedAccess
)
.
result
(
"NestedTypeScanner.this.type"
)
.
isLocal
(
)
,
newElements
.
get
(
0
)
)
;
assertEqualsFieldAccess
(
new
ExpectedTargetedExpression
(
)
.
declaringType
(
expectedNested
)
.
target
(
expectedNestedAccess
)
.
result
(
"type"
)
.
isLocal
(
)
,
newElements
.
get
(
1
)
)
;
}
