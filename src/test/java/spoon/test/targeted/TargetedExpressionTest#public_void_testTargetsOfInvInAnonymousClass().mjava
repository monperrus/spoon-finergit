@Test
public
void
testTargetsOfInvInAnonymousClass
(
)
throws
Exception
{
final
Factory
factory
=
build
(
Foo
.
class
,
Bar
.
class
,
SuperClass
.
class
)
;
final
CtClass
<
Foo
>
type
=
factory
.
Class
(
)
.
get
(
Foo
.
class
)
;
final
CtTypeReference
<
Foo
>
expectedType
=
type
.
getReference
(
)
;
final
CtClass
<
?
>
anonymousClass
=
type
.
getElements
(
new
TypeFilter
<
CtClass
>
(
CtClass
.
class
)
{
@Override
public
boolean
matches
(
CtClass
element
)
{
return
element
.
isAnonymous
(
)
&&
super
.
matches
(
element
)
;
}
}
)
.
get
(
0
)
;
final
CtTypeReference
<
?
>
expectedAnonymousType
=
anonymousClass
.
getReference
(
)
;
final
CtThisAccess
<
Foo
>
expectedThisAccess
=
factory
.
Core
(
)
.
createThisAccess
(
)
;
expectedThisAccess
.
setType
(
expectedType
)
;
final
CtThisAccess
expectedAnonymousThisAccess
=
factory
.
Core
(
)
.
createThisAccess
(
)
;
expectedAnonymousThisAccess
.
setType
(
expectedAnonymousType
)
;
final
CtMethod
<
?
>
method
=
anonymousClass
.
getMethodsByName
(
"m"
)
.
get
(
0
)
;
final
List
<
CtInvocation
>
elements
=
method
.
getElements
(
new
TypeFilter
<
>
(
CtInvocation
.
class
)
)
;
assertEquals
(
2
,
elements
.
size
(
)
)
;
assertInvocation
(
new
Expected
(
)
.
declaringType
(
expectedType
)
.
target
(
expectedThisAccess
)
.
result
(
"spoon.test.targeted.testclasses.Foo.this.invStatic()"
)
,
elements
.
get
(
0
)
)
;
assertInvocation
(
new
Expected
(
)
.
declaringType
(
expectedAnonymousType
)
.
target
(
expectedAnonymousThisAccess
)
.
result
(
"this.invStatic()"
)
,
elements
.
get
(
1
)
)
;
}
