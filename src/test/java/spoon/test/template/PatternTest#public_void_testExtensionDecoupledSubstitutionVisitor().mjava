@Test
public
void
testExtensionDecoupledSubstitutionVisitor
(
)
throws
Exception
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
}
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/template/testclasses/logger/Logger.java"
)
;
launcher
.
addTemplateResource
(
new
FileSystemFile
(
"./src/test/java/spoon/test/template/testclasses/LoggerModel.java"
)
)
;
launcher
.
buildModel
(
)
;
Factory
factory
=
launcher
.
getFactory
(
)
;
final
CtClass
<
?
>
aTargetType
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Logger
.
class
)
;
final
CtMethod
<
?
>
toBeLoggedMethod
=
aTargetType
.
getMethodsByName
(
"enter"
)
.
get
(
0
)
;
Map
<
String
,
Object
>
params
=
new
HashMap
<
>
(
)
;
params
.
put
(
"_classname_"
,
factory
.
Code
(
)
.
createLiteral
(
aTargetType
.
getSimpleName
(
)
)
)
;
params
.
put
(
"_methodName_"
,
factory
.
Code
(
)
.
createLiteral
(
toBeLoggedMethod
.
getSimpleName
(
)
)
)
;
params
.
put
(
"_block_"
,
toBeLoggedMethod
.
getBody
(
)
)
;
CtType
<
?
>
type
=
factory
.
Type
(
)
.
get
(
LoggerModel
.
class
)
;
spoon
.
pattern
.
Pattern
pattern
=
PatternBuilder
.
create
(
type
.
getMethodsByName
(
"block"
)
.
get
(
0
)
)
.
configurePatternParameters
(
)
.
build
(
)
;
final
List
<
CtMethod
>
aMethods
=
pattern
.
generator
(
)
.
addToType
(
CtMethod
.
class
,
params
,
aTargetType
)
;
assertEquals
(
1
,
aMethods
.
size
(
)
)
;
final
CtMethod
<
?
>
aMethod
=
aMethods
.
get
(
0
)
;
assertTrue
(
aMethod
.
getBody
(
)
.
getStatement
(
0
)
instanceof
CtTry
)
;
final
CtTry
aTry
=
(
CtTry
)
aMethod
.
getBody
(
)
.
getStatement
(
0
)
;
assertTrue
(
aTry
.
getFinalizer
(
)
.
getStatement
(
0
)
instanceof
CtInvocation
)
;
assertEquals
(
"spoon.test.template.testclasses.logger.Logger.exit(\"enter\")"
,
aTry
.
getFinalizer
(
)
.
getStatement
(
0
)
.
toString
(
)
)
;
assertTrue
(
aTry
.
getBody
(
)
.
getStatement
(
0
)
instanceof
CtInvocation
)
;
assertEquals
(
"spoon.test.template.testclasses.logger.Logger.enter(\"Logger\", \"enter\")"
,
aTry
.
getBody
(
)
.
getStatement
(
0
)
.
toString
(
)
)
;
assertTrue
(
aTry
.
getBody
(
)
.
getStatements
(
)
.
size
(
)
>
1
)
;
}
