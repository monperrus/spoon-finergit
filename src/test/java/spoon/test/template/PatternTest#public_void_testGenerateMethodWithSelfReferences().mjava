@Test
public
void
testGenerateMethodWithSelfReferences
(
)
throws
Exception
{
CtType
templateModel
=
ModelUtils
.
buildClass
(
AClassWithMethodsAndRefs
.
class
)
;
Factory
factory
=
templateModel
.
getFactory
(
)
;
Pattern
pattern
=
PatternBuilder
.
create
(
(
CtMethod
)
templateModel
.
getMethodsByName
(
"foo"
)
.
get
(
0
)
)
.
setAddGeneratedBy
(
true
)
.
build
(
)
;
CtClass
<
?
>
generatedType
=
factory
.
createClass
(
"spoon.test.generated.ACloneOfAClassWithMethodsAndRefs"
)
;
pattern
.
generator
(
)
.
addToType
(
CtMethod
.
class
,
Collections
.
emptyMap
(
)
,
generatedType
)
;
assertEquals
(
Arrays
.
asList
(
"foo"
)
,
generatedType
.
getTypeMembers
(
)
.
stream
(
)
.
map
(
CtTypeMember
::
getSimpleName
)
.
collect
(
Collectors
.
toList
(
)
)
)
;
assertEquals
(
1
,
generatedType
.
getMethodsByName
(
"foo"
)
.
size
(
)
)
;
assertEquals
(
"Generated by spoon.test.template.testclasses.types.AClassWithMethodsAndRefs#foo(AClassWithMethodsAndRefs.java:30)"
,
generatedType
.
getMethodsByName
(
"foo"
)
.
get
(
0
)
.
getDocComment
(
)
.
trim
(
)
)
;
Set
<
String
>
usedTypeRefs
=
new
HashSet
<
>
(
)
;
generatedType
.
filterChildren
(
new
TypeFilter
<
>
(
CtTypeReference
.
class
)
)
.
forEach
(
(
CtTypeReference
ref
)
->
usedTypeRefs
.
add
(
ref
.
getQualifiedName
(
)
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
"spoon.test.generated.ACloneOfAClassWithMethodsAndRefs"
,
"void"
,
"spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$1Bar"
,
"java.lang.Object"
,
"spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local"
)
)
,
usedTypeRefs
)
;
generatedType
.
filterChildren
(
new
TypeFilter
<
>
(
CtExecutableReference
.
class
)
)
.
forEach
(
(
CtExecutableReference
execRef
)
->
{
CtTypeReference
declTypeRef
=
execRef
.
getDeclaringType
(
)
;
if
(
declTypeRef
.
getQualifiedName
(
)
.
startsWith
(
"spoon.test.generated.ACloneOfAClassWithMethodsAndRefs"
)
)
{
return
;
}
if
(
declTypeRef
.
getQualifiedName
(
)
.
equals
(
Object
.
class
.
getName
(
)
)
)
{
return
;
}
fail
(
"Unexpected declaring type "
+
declTypeRef
.
getQualifiedName
(
)
)
;
}
)
;
}
