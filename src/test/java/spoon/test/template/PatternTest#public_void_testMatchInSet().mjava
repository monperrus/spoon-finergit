@Test
public
void
testMatchInSet
(
)
throws
Exception
{
CtType
<
?
>
ctClass
=
ModelUtils
.
buildClass
(
MatchThrowables
.
class
)
;
Factory
f
=
ctClass
.
getFactory
(
)
;
Pattern
pattern
=
PatternBuilder
.
create
(
new
PatternBuilderHelper
(
ctClass
)
.
setTypeMember
(
"matcher1"
)
.
getPatternElements
(
)
)
.
configurePatternParameters
(
pb
->
{
pb
.
parameter
(
"otherThrowables"
)
.
setConflictResolutionMode
(
ConflictResolutionMode
.
APPEND
)
.
setContainerKind
(
ContainerKind
.
SET
)
.
setMinOccurence
(
0
)
.
byRole
(
CtRole
.
THROWN
,
new
TypeFilter
(
CtMethod
.
class
)
)
;
}
)
.
configurePatternParameters
(
pb
->
{
pb
.
parameter
(
"modifiers"
)
.
byRole
(
CtRole
.
MODIFIER
,
new
TypeFilter
(
CtMethod
.
class
)
)
;
pb
.
parameter
(
"methodName"
)
.
byString
(
"matcher1"
)
;
pb
.
parameter
(
"parameters"
)
.
byRole
(
CtRole
.
PARAMETER
,
new
TypeFilter
(
CtMethod
.
class
)
)
;
pb
.
parameter
(
"statements"
)
.
byRole
(
CtRole
.
STATEMENT
,
new
TypeFilter
(
CtBlock
.
class
)
)
;
}
)
.
build
(
)
;
String
str
=
pattern
.
toString
(
)
;
List
<
Match
>
matches
=
pattern
.
getMatches
(
ctClass
)
;
assertEquals
(
4
,
matches
.
size
(
)
)
;
{
Match
match
=
matches
.
get
(
0
)
;
assertEquals
(
1
,
match
.
getMatchingElements
(
)
.
size
(
)
)
;
assertEquals
(
"matcher1"
,
match
.
getMatchingElement
(
CtMethod
.
class
)
.
getSimpleName
(
)
)
;
}
{
Match
match
=
matches
.
get
(
1
)
;
assertEquals
(
1
,
match
.
getMatchingElements
(
)
.
size
(
)
)
;
assertEquals
(
"sample2"
,
match
.
getMatchingElement
(
CtMethod
.
class
)
.
getSimpleName
(
)
)
;
assertEquals
(
new
HashSet
(
Arrays
.
asList
(
"java.lang.UnsupportedOperationException"
,
"java.lang.IllegalArgumentException"
)
)
,
(
(
Set
<
CtTypeReference
<
?
>
>
)
match
.
getParameters
(
)
.
getValue
(
"otherThrowables"
)
)
.
stream
(
)
.
map
(
e
->
e
.
toString
(
)
)
.
collect
(
Collectors
.
toSet
(
)
)
)
;
}
{
Match
match
=
matches
.
get
(
2
)
;
assertEquals
(
1
,
match
.
getMatchingElements
(
)
.
size
(
)
)
;
assertEquals
(
"sample3"
,
match
.
getMatchingElement
(
CtMethod
.
class
)
.
getSimpleName
(
)
)
;
assertEquals
(
new
HashSet
(
Arrays
.
asList
(
"java.lang.IllegalArgumentException"
)
)
,
(
(
Set
<
CtTypeReference
<
?
>
>
)
match
.
getParameters
(
)
.
getValue
(
"otherThrowables"
)
)
.
stream
(
)
.
map
(
e
->
e
.
toString
(
)
)
.
collect
(
Collectors
.
toSet
(
)
)
)
;
}
{
Match
match
=
matches
.
get
(
3
)
;
assertEquals
(
1
,
match
.
getMatchingElements
(
)
.
size
(
)
)
;
assertEquals
(
"sample4"
,
match
.
getMatchingElement
(
CtMethod
.
class
)
.
getSimpleName
(
)
)
;
assertNull
(
match
.
getParameters
(
)
.
getValue
(
"otherThrowables"
)
)
;
}
}
