@Test
public
void
testMatchOfAttribute
(
)
throws
Exception
{
CtType
<
?
>
ctClass
=
ModelUtils
.
buildClass
(
MatchModifiers
.
class
)
;
{
Pattern
pattern
=
PatternBuilder
.
create
(
new
PatternBuilderHelper
(
ctClass
)
.
setTypeMember
(
"matcher1"
)
.
getPatternElements
(
)
)
.
configurePatternParameters
(
pb
->
{
pb
.
parameter
(
"modifiers"
)
.
byRole
(
CtRole
.
MODIFIER
,
new
TypeFilter
(
CtMethod
.
class
)
)
;
pb
.
parameter
(
"methodName"
)
.
byString
(
"matcher1"
)
;
pb
.
parameter
(
"parameters"
)
.
byRole
(
CtRole
.
PARAMETER
,
new
TypeFilter
(
CtMethod
.
class
)
)
;
}
)
.
build
(
)
;
List
<
Match
>
matches
=
pattern
.
getMatches
(
ctClass
)
;
assertEquals
(
3
,
matches
.
size
(
)
)
;
{
Match
match
=
matches
.
get
(
0
)
;
assertEquals
(
1
,
match
.
getMatchingElements
(
)
.
size
(
)
)
;
assertEquals
(
"matcher1"
,
match
.
getMatchingElement
(
CtMethod
.
class
)
.
getSimpleName
(
)
)
;
assertEquals
(
3
,
match
.
getParametersMap
(
)
.
size
(
)
)
;
assertEquals
(
"matcher1"
,
match
.
getParametersMap
(
)
.
get
(
"methodName"
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
ModifierKind
.
PUBLIC
)
)
,
match
.
getParametersMap
(
)
.
get
(
"modifiers"
)
)
;
assertEquals
(
Arrays
.
asList
(
)
,
match
.
getParametersMap
(
)
.
get
(
"parameters"
)
)
;
}
{
Match
match
=
matches
.
get
(
1
)
;
assertEquals
(
1
,
match
.
getMatchingElements
(
)
.
size
(
)
)
;
assertEquals
(
"publicStaticMethod"
,
match
.
getMatchingElement
(
CtMethod
.
class
)
.
getSimpleName
(
)
)
;
assertEquals
(
3
,
match
.
getParametersMap
(
)
.
size
(
)
)
;
assertEquals
(
"publicStaticMethod"
,
match
.
getParametersMap
(
)
.
get
(
"methodName"
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
ModifierKind
.
PUBLIC
,
ModifierKind
.
STATIC
)
)
,
match
.
getParametersMap
(
)
.
get
(
"modifiers"
)
)
;
assertEquals
(
Arrays
.
asList
(
)
,
match
.
getParametersMap
(
)
.
get
(
"parameters"
)
)
;
}
{
Match
match
=
matches
.
get
(
2
)
;
assertEquals
(
1
,
match
.
getMatchingElements
(
)
.
size
(
)
)
;
assertEquals
(
"packageProtectedMethodWithParam"
,
match
.
getMatchingElement
(
CtMethod
.
class
)
.
getSimpleName
(
)
)
;
assertEquals
(
3
,
match
.
getParametersMap
(
)
.
size
(
)
)
;
assertEquals
(
"packageProtectedMethodWithParam"
,
match
.
getParametersMap
(
)
.
get
(
"methodName"
)
)
;
assertEquals
(
new
HashSet
<
>
(
)
,
match
.
getParametersMap
(
)
.
get
(
"modifiers"
)
)
;
assertEquals
(
2
,
(
(
List
)
match
.
getParametersMap
(
)
.
get
(
"parameters"
)
)
.
size
(
)
)
;
}
}
{
Pattern
pattern
=
PatternBuilder
.
create
(
new
PatternBuilderHelper
(
ctClass
)
.
setTypeMember
(
"matcher1"
)
.
getPatternElements
(
)
)
.
configurePatternParameters
(
pb
->
{
pb
.
parameter
(
"modifiers"
)
.
byRole
(
CtRole
.
MODIFIER
,
new
TypeFilter
(
CtMethod
.
class
)
)
;
pb
.
parameter
(
"methodName"
)
.
byString
(
"matcher1"
)
;
pb
.
parameter
(
"parameters"
)
.
byRole
(
CtRole
.
PARAMETER
,
new
TypeFilter
(
CtMethod
.
class
)
)
;
pb
.
parameter
(
"statements"
)
.
byRole
(
CtRole
.
STATEMENT
,
new
TypeFilter
(
CtBlock
.
class
)
)
;
}
)
.
build
(
)
;
List
<
Match
>
matches
=
pattern
.
getMatches
(
ctClass
)
;
assertEquals
(
4
,
matches
.
size
(
)
)
;
{
Match
match
=
matches
.
get
(
3
)
;
assertEquals
(
1
,
match
.
getMatchingElements
(
)
.
size
(
)
)
;
assertEquals
(
"withBody"
,
match
.
getMatchingElement
(
CtMethod
.
class
)
.
getSimpleName
(
)
)
;
assertEquals
(
4
,
match
.
getParametersMap
(
)
.
size
(
)
)
;
assertEquals
(
"withBody"
,
match
.
getParametersMap
(
)
.
get
(
"methodName"
)
)
;
assertEquals
(
new
HashSet
<
>
(
Arrays
.
asList
(
ModifierKind
.
PRIVATE
)
)
,
match
.
getParametersMap
(
)
.
get
(
"modifiers"
)
)
;
assertEquals
(
0
,
(
(
List
)
match
.
getParametersMap
(
)
.
get
(
"parameters"
)
)
.
size
(
)
)
;
assertEquals
(
2
,
(
(
List
)
match
.
getParametersMap
(
)
.
get
(
"statements"
)
)
.
size
(
)
)
;
assertEquals
(
"this.getClass()"
,
(
(
List
)
match
.
getParametersMap
(
)
.
get
(
"statements"
)
)
.
get
(
0
)
.
toString
(
)
)
;
assertEquals
(
"java.lang.System.out.println()"
,
(
(
List
)
match
.
getParametersMap
(
)
.
get
(
"statements"
)
)
.
get
(
1
)
.
toString
(
)
)
;
}
}
}
