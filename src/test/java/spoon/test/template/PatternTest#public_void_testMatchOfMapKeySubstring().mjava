@Test
public
void
testMatchOfMapKeySubstring
(
)
throws
Exception
{
CtType
<
?
>
ctClass
=
ModelUtils
.
buildClass
(
MatchMap
.
class
)
;
{
CtType
<
?
>
type
=
ctClass
.
getFactory
(
)
.
Type
(
)
.
get
(
MatchMap
.
class
)
;
Pattern
pattern
=
PatternBuilder
.
create
(
new
PatternBuilderHelper
(
type
)
.
setTypeMember
(
"m1"
)
.
getPatternElements
(
)
)
.
configurePatternParameters
(
pb
->
{
pb
.
parameter
(
"CheckKey"
)
.
bySubstring
(
"value"
)
;
pb
.
parameter
(
"CheckValue"
)
.
byFilter
(
(
CtLiteral
lit
)
->
true
)
;
pb
.
parameter
(
"methodName"
)
.
byString
(
"m1"
)
;
pb
.
parameter
(
"allAnnotations"
)
.
setConflictResolutionMode
(
ConflictResolutionMode
.
APPEND
)
.
byRole
(
CtRole
.
ANNOTATION
,
new
TypeFilter
<
>
(
CtMethod
.
class
)
)
;
}
)
.
build
(
)
;
List
<
Match
>
matches
=
pattern
.
getMatches
(
ctClass
)
;
assertEquals
(
2
,
matches
.
size
(
)
)
;
{
Match
match
=
matches
.
get
(
0
)
;
assertEquals
(
1
,
match
.
getMatchingElements
(
)
.
size
(
)
)
;
assertEquals
(
"m1"
,
match
.
getMatchingElement
(
CtMethod
.
class
)
.
getSimpleName
(
)
)
;
assertEquals
(
3
,
match
.
getParametersMap
(
)
.
size
(
)
)
;
assertEquals
(
"m1"
,
match
.
getParametersMap
(
)
.
get
(
"methodName"
)
)
;
assertEquals
(
"value"
,
match
.
getParameters
(
)
.
getValue
(
"CheckKey"
)
.
toString
(
)
)
;
assertEquals
(
"\"xyz\""
,
match
.
getParameters
(
)
.
getValue
(
"CheckValue"
)
.
toString
(
)
)
;
}
{
Match
match
=
matches
.
get
(
1
)
;
assertEquals
(
1
,
match
.
getMatchingElements
(
)
.
size
(
)
)
;
assertEquals
(
"deprecatedTestAnnotation2"
,
match
.
getMatchingElement
(
CtMethod
.
class
)
.
getSimpleName
(
)
)
;
assertEquals
(
4
,
match
.
getParametersMap
(
)
.
size
(
)
)
;
assertEquals
(
"deprecatedTestAnnotation2"
,
match
.
getParametersMap
(
)
.
get
(
"methodName"
)
)
;
assertEquals
(
"timeout"
,
match
.
getParameters
(
)
.
getValue
(
"CheckKey"
)
.
toString
(
)
)
;
assertEquals
(
"4567"
,
match
.
getParameters
(
)
.
getValue
(
"CheckValue"
)
.
toString
(
)
)
;
assertEquals
(
"@java.lang.Deprecated"
,
match
.
getParameters
(
)
.
getValue
(
"allAnnotations"
)
.
toString
(
)
)
;
}
}
}
