@Test
public
void
testMatchPossesiveMultiValueMinCount2
(
)
throws
Exception
{
CtType
<
?
>
ctClass
=
ModelUtils
.
buildClass
(
MatchMultiple2
.
class
)
;
for
(
int
count
=
0
;
count
<
5
;
count
++
)
{
final
int
countFinal
=
count
;
Pattern
pattern
=
PatternBuilder
.
create
(
new
PatternBuilderHelper
(
ctClass
)
.
setBodyOfMethod
(
"matcher1"
)
.
getPatternElements
(
)
)
.
configurePatternParameters
(
pb
->
{
pb
.
byTemplateParameter
(
)
;
pb
.
parameter
(
"statements1"
)
.
setContainerKind
(
ContainerKind
.
LIST
)
.
setMatchingStrategy
(
Quantifier
.
GREEDY
)
;
pb
.
parameter
(
"statements2"
)
.
setContainerKind
(
ContainerKind
.
LIST
)
.
setMatchingStrategy
(
Quantifier
.
POSSESSIVE
)
.
setMinOccurence
(
countFinal
)
.
setMaxOccurence
(
countFinal
)
;
pb
.
parameter
(
"inlinedSysOut"
)
.
byVariable
(
"something"
)
.
setMatchingStrategy
(
Quantifier
.
POSSESSIVE
)
.
setContainerKind
(
ContainerKind
.
LIST
)
.
setMinOccurence
(
2
)
.
matchInlinedStatements
(
)
;
}
)
.
build
(
)
;
List
<
Match
>
matches
=
pattern
.
getMatches
(
ctClass
.
getMethodsByName
(
"testMatch1"
)
.
get
(
0
)
.
getBody
(
)
)
;
assertEquals
(
"count="
+
countFinal
,
1
,
matches
.
size
(
)
)
;
assertEquals
(
"count="
+
countFinal
,
4
-
countFinal
,
getCollectionSize
(
matches
.
get
(
0
)
.
getParameters
(
)
.
getValue
(
"statements1"
)
)
)
;
assertEquals
(
"count="
+
countFinal
,
countFinal
,
getCollectionSize
(
matches
.
get
(
0
)
.
getParameters
(
)
.
getValue
(
"statements2"
)
)
)
;
assertEquals
(
"count="
+
countFinal
,
2
,
getCollectionSize
(
matches
.
get
(
0
)
.
getParameters
(
)
.
getValue
(
"inlinedSysOut"
)
)
)
;
}
for
(
int
count
=
5
;
count
<
7
;
count
++
)
{
final
int
countFinal
=
count
;
Pattern
pattern
=
PatternBuilder
.
create
(
new
PatternBuilderHelper
(
ctClass
)
.
setBodyOfMethod
(
"matcher1"
)
.
getPatternElements
(
)
)
.
configurePatternParameters
(
)
.
build
(
)
;
List
<
Match
>
matches
=
pattern
.
getMatches
(
ctClass
.
getMethodsByName
(
"testMatch1"
)
.
get
(
0
)
.
getBody
(
)
)
;
assertEquals
(
"count="
+
countFinal
,
0
,
matches
.
size
(
)
)
;
}
}
