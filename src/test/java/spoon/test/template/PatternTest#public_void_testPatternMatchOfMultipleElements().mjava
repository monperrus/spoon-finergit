@Test
public
void
testPatternMatchOfMultipleElements
(
)
throws
Exception
{
CtType
toBeMatchedtype
=
ModelUtils
.
buildClass
(
ToBeMatched
.
class
)
;
List
<
CtLiteral
<
String
>
>
literals1
=
getFirstStmt
(
toBeMatchedtype
,
"match1"
,
CtInvocation
.
class
)
.
getArguments
(
)
;
List
<
CtLiteral
<
String
>
>
literals2
=
getFirstStmt
(
toBeMatchedtype
,
"match2"
,
CtInvocation
.
class
)
.
getArguments
(
)
;
assertEquals
(
"a"
,
literals1
.
get
(
0
)
.
getValue
(
)
)
;
Factory
f
=
toBeMatchedtype
.
getFactory
(
)
;
{
List
<
CtElement
>
found
=
new
ArrayList
<
>
(
)
;
spoon
.
pattern
.
Pattern
p
=
PatternBuilder
.
create
(
f
.
createLiteral
(
"a"
)
)
.
build
(
)
;
assertEquals
(
0
,
p
.
getParameterInfos
(
)
.
size
(
)
)
;
p
.
forEachMatch
(
toBeMatchedtype
,
(
match
)
->
{
found
.
add
(
match
.
getMatchingElement
(
)
)
;
}
)
;
assertEquals
(
3
,
found
.
size
(
)
)
;
assertSame
(
literals1
.
get
(
0
)
,
found
.
get
(
0
)
)
;
assertSame
(
literals1
.
get
(
6
)
,
found
.
get
(
1
)
)
;
assertSame
(
literals2
.
get
(
0
)
,
found
.
get
(
2
)
)
;
}
{
List
<
List
<
CtElement
>
>
found
=
new
ArrayList
<
>
(
)
;
spoon
.
pattern
.
Pattern
pattern
=
patternOfStringLiterals
(
toBeMatchedtype
.
getFactory
(
)
,
"a"
,
"b"
,
"c"
)
;
pattern
.
forEachMatch
(
toBeMatchedtype
,
(
match
)
->
{
found
.
add
(
match
.
getMatchingElements
(
)
)
;
}
)
;
assertEquals
(
2
,
found
.
size
(
)
)
;
assertEquals
(
3
,
found
.
get
(
1
)
.
size
(
)
)
;
assertEquals
(
"\"a\""
,
found
.
get
(
0
)
.
get
(
0
)
.
toString
(
)
)
;
assertEquals
(
17
,
found
.
get
(
0
)
.
get
(
0
)
.
getPosition
(
)
.
getColumn
(
)
)
;
assertEquals
(
"\"b\""
,
found
.
get
(
0
)
.
get
(
1
)
.
toString
(
)
)
;
assertEquals
(
22
,
found
.
get
(
0
)
.
get
(
1
)
.
getPosition
(
)
.
getColumn
(
)
)
;
assertEquals
(
"\"c\""
,
found
.
get
(
0
)
.
get
(
2
)
.
toString
(
)
)
;
assertEquals
(
27
,
found
.
get
(
0
)
.
get
(
2
)
.
getPosition
(
)
.
getColumn
(
)
)
;
assertSequenceOn
(
literals1
,
0
,
3
,
found
.
get
(
0
)
)
;
assertSequenceOn
(
literals1
,
6
,
3
,
found
.
get
(
1
)
)
;
}
{
List
<
List
<
CtElement
>
>
found
=
new
ArrayList
<
>
(
)
;
patternOfStringLiterals
(
toBeMatchedtype
.
getFactory
(
)
,
"b"
,
"c"
)
.
forEachMatch
(
toBeMatchedtype
,
(
match
)
->
{
found
.
add
(
match
.
getMatchingElements
(
)
)
;
}
)
;
assertEquals
(
3
,
found
.
size
(
)
)
;
assertSequenceOn
(
literals1
,
1
,
2
,
found
.
get
(
0
)
)
;
assertSequenceOn
(
literals1
,
7
,
2
,
found
.
get
(
1
)
)
;
assertSequenceOn
(
literals2
,
3
,
2
,
found
.
get
(
2
)
)
;
}
{
List
<
List
<
CtElement
>
>
found
=
new
ArrayList
<
>
(
)
;
patternOfStringLiterals
(
toBeMatchedtype
.
getFactory
(
)
,
"d"
,
"d"
)
.
forEachMatch
(
toBeMatchedtype
,
(
match
)
->
{
found
.
add
(
match
.
getMatchingElements
(
)
)
;
}
)
;
assertEquals
(
2
,
found
.
size
(
)
)
;
assertSequenceOn
(
literals2
,
6
,
2
,
found
.
get
(
0
)
)
;
assertSequenceOn
(
literals2
,
8
,
2
,
found
.
get
(
1
)
)
;
}
}
