@Test
public
void
testPatternToString
(
)
{
String
nl
=
System
.
getProperty
(
"line.separator"
)
;
Factory
f
=
ModelUtils
.
build
(
new
File
(
"./src/test/java/spoon/test/template/testclasses/replace/DPPSample1.java"
)
,
new
File
(
"./src/test/java/spoon/test/template/testclasses/replace"
)
)
;
Pattern
p
=
OldPattern
.
createPatternFromMethodPatternModel
(
f
)
;
assertEquals
(
"if (/* CtInvocation"
+
nl
+
""
+
"    / <= ${useStartKeyword}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"useStartKeyword()) {"
+
nl
+
""
+
"    /* CtInvocation"
+
nl
+
""
+
"        /argument/ <= ${startKeyword}"
+
nl
+
""
+
"     */"
+
nl
+
""
+
"    /* CtInvocation"
+
nl
+
""
+
"        /target/ <= ${printer}"
+
nl
+
""
+
"     */"
+
nl
+
""
+
"    /* CtInvocation"
+
nl
+
""
+
"        / <= ${printer}"
+
nl
+
""
+
"     */"
+
nl
+
""
+
"    printer().writeSpace().writeKeyword(/* CtInvocation"
+
nl
+
""
+
"        / <= ${startKeyword}"
+
nl
+
""
+
"     */"
+
nl
+
""
+
"    startKeyword()).writeSpace();"
+
nl
+
""
+
"}"
+
nl
+
""
+
"try (final spoon.reflect.visitor.ListPrinter lp = /* CtInvocation"
+
nl
+
""
+
"    /argument/ <= ${end}"
+
nl
+
""
+
"    /target/ <= ${elementPrinterHelper}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"/* CtInvocation"
+
nl
+
""
+
"    / <= ${elementPrinterHelper}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"elementPrinterHelper().createListPrinter(/* CtInvocation"
+
nl
+
""
+
"    / <= ${startPrefixSpace}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"startPrefixSpace(), /* CtInvocation"
+
nl
+
""
+
"    / <= ${start}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"start(), /* CtInvocation"
+
nl
+
""
+
"    / <= ${startSuffixSpace}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"startSuffixSpace(), /* CtInvocation"
+
nl
+
""
+
"    / <= ${nextPrefixSpace}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"nextPrefixSpace(), /* CtInvocation"
+
nl
+
""
+
"    / <= ${next}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"next(), /* CtInvocation"
+
nl
+
""
+
"    / <= ${nextSuffixSpace}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"nextSuffixSpace(), /* CtInvocation"
+
nl
+
""
+
"    / <= ${endPrefixSpace}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"endPrefixSpace(), /* CtInvocation"
+
nl
+
""
+
"    / <= ${end}"
+
nl
+
""
+
" */"
+
nl
+
""
+
"end())) {"
+
nl
+
""
+
"    /* CtForEach"
+
nl
+
""
+
"        /expression/ <= ${getIterable}"
+
nl
+
""
+
"        /foreachVariable/ <= ${item}"
+
nl
+
""
+
"     */"
+
nl
+
""
+
"    for (/* CtLocalVariable"
+
nl
+
""
+
"        / <= ${item}"
+
nl
+
""
+
"     */"
+
nl
+
""
+
"    java.lang.Object item : /* CtInvocation"
+
nl
+
""
+
"        / <= ${getIterable}"
+
nl
+
""
+
"     */"
+
nl
+
""
+
"    getIterable()) /* CtBlock"
+
nl
+
""
+
"        /statement/ <= ${statements}"
+
nl
+
""
+
"     */"
+
nl
+
""
+
"    {"
+
nl
+
""
+
"        lp.printSeparatorIfAppropriate();"
+
nl
+
""
+
"        /* CtInvocation"
+
nl
+
""
+
"            / <= ${statements}"
+
nl
+
""
+
"         */"
+
nl
+
""
+
"        statements();"
+
nl
+
""
+
"    }"
+
nl
+
""
+
"}"
+
nl
,
p
.
print
(
true
)
)
;
}
