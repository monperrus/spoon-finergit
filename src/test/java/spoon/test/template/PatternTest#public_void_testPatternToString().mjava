@Test
public
void
testPatternToString
(
)
{
System
.
setProperty
(
"line.separator"
,
"\n"
)
;
Factory
f
=
ModelUtils
.
build
(
new
File
(
"./src/test/java/spoon/test/template/testclasses/replace/DPPSample1.java"
)
,
new
File
(
"./src/test/java/spoon/test/template/testclasses/replace"
)
)
;
Pattern
p
=
OldPattern
.
createPatternFromMethodPatternModel
(
f
)
;
assertEquals
(
"if (/* CtInvocation\n"
+
"    / <= ${useStartKeyword}\n"
+
" */\n"
+
"useStartKeyword()) {\n"
+
"    /* CtInvocation\n"
+
"        /argument/ <= ${startKeyword}\n"
+
"     */\n"
+
"    /* CtInvocation\n"
+
"        /target/ <= ${printer}\n"
+
"     */\n"
+
"    /* CtInvocation\n"
+
"        / <= ${printer}\n"
+
"     */\n"
+
"    printer().writeSpace().writeKeyword(/* CtInvocation\n"
+
"        / <= ${startKeyword}\n"
+
"     */\n"
+
"    startKeyword()).writeSpace();\n"
+
"}\n"
+
"try (final spoon.reflect.visitor.ListPrinter lp = /* CtInvocation\n"
+
"    /argument/ <= ${end}\n"
+
"    /target/ <= ${elementPrinterHelper}\n"
+
" */\n"
+
"/* CtInvocation\n"
+
"    / <= ${elementPrinterHelper}\n"
+
" */\n"
+
"elementPrinterHelper().createListPrinter(/* CtInvocation\n"
+
"    / <= ${startPrefixSpace}\n"
+
" */\n"
+
"startPrefixSpace(), /* CtInvocation\n"
+
"    / <= ${start}\n"
+
" */\n"
+
"start(), /* CtInvocation\n"
+
"    / <= ${startSuffixSpace}\n"
+
" */\n"
+
"startSuffixSpace(), /* CtInvocation\n"
+
"    / <= ${nextPrefixSpace}\n"
+
" */\n"
+
"nextPrefixSpace(), /* CtInvocation\n"
+
"    / <= ${next}\n"
+
" */\n"
+
"next(), /* CtInvocation\n"
+
"    / <= ${nextSuffixSpace}\n"
+
" */\n"
+
"nextSuffixSpace(), /* CtInvocation\n"
+
"    / <= ${endPrefixSpace}\n"
+
" */\n"
+
"endPrefixSpace(), /* CtInvocation\n"
+
"    / <= ${end}\n"
+
" */\n"
+
"end())) {\n"
+
"    /* CtForEach\n"
+
"        /expression/ <= ${getIterable}\n"
+
"        /foreachVariable/ <= ${item}\n"
+
"     */\n"
+
"    for (/* CtLocalVariable\n"
+
"        / <= ${item}\n"
+
"     */\n"
+
"    java.lang.Object item : /* CtInvocation\n"
+
"        / <= ${getIterable}\n"
+
"     */\n"
+
"    getIterable()) /* CtBlock\n"
+
"        /statement/ <= ${statements}\n"
+
"     */\n"
+
"    {\n"
+
"        lp.printSeparatorIfAppropriate();\n"
+
"        /* CtInvocation\n"
+
"            / <= ${statements}\n"
+
"         */\n"
+
"        statements();\n"
+
"    }\n"
+
"}\n"
,
p
.
toString
(
)
)
;
}
