private
void
assertCommentHasGeneratedBy
(
CtElement
e
,
String
templateQName
,
Map
<
CtElement
,
String
>
elementToGeneratedByMember
)
{
String
docComment
=
e
.
getDocComment
(
)
;
String
generatedByMember
=
elementToGeneratedByMember
.
get
(
e
)
;
if
(
generatedByMember
==
null
)
{
assertEquals
(
""
,
docComment
)
;
}
else
{
assertNotNull
(
"Javadoc comment is missing for "
+
e
.
toString
(
)
,
docComment
)
;
int
idx
=
docComment
.
indexOf
(
"Generated by"
)
;
assertTrue
(
"Javadoc comment doesn't contain Generated by. There is:\n"
+
docComment
,
idx
>=
0
)
;
Matcher
m
=
generatedByRE
.
matcher
(
docComment
)
;
assertTrue
(
"Unexpected Generated by:\n"
+
docComment
,
m
.
matches
(
)
)
;
assertEquals
(
templateQName
,
m
.
group
(
1
)
)
;
assertEquals
(
generatedByMember
,
m
.
group
(
2
)
)
;
assertTrue
(
templateQName
.
endsWith
(
"."
+
m
.
group
(
3
)
)
)
;
int
lineNr
=
Integer
.
parseInt
(
m
.
group
(
4
)
)
-
1
;
assertTrue
(
lineNr
>=
0
)
;
String
[
]
sourceLines
=
e
.
getPosition
(
)
.
getCompilationUnit
(
)
.
getOriginalSourceCode
(
)
.
split
(
"\\r\\n|\\r|\\n"
)
;
assertTrue
(
sourceLines
.
length
>
lineNr
)
;
String
sourceLine
=
sourceLines
[
lineNr
]
;
Matcher
m2
=
typeMemberRE
.
matcher
(
generatedByMember
)
;
assertTrue
(
m2
.
find
(
)
)
;
String
memberSimpleName
=
m2
.
group
(
)
;
assertTrue
(
memberSimpleName
.
length
(
)
>
2
)
;
assertTrue
(
"Source file "
+
e
.
getPosition
(
)
.
getFile
(
)
.
getAbsolutePath
(
)
+
":"
+
lineNr
+
" doesn't contain member name "
+
memberSimpleName
,
sourceLine
.
contains
(
memberSimpleName
)
)
;
}
}
