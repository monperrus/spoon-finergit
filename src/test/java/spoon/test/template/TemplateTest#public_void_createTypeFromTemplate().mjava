@Test
public
void
createTypeFromTemplate
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
setArgs
(
new
String
[
]
{
"--output-type"
,
"nooutput"
}
)
;
launcher
.
addTemplateResource
(
new
FileSystemFolder
(
"./src/test/java/spoon/test/template/testclasses/types"
)
)
;
launcher
.
buildModel
(
)
;
Factory
factory
=
launcher
.
getFactory
(
)
;
Map
<
String
,
Object
>
parameters
=
new
HashMap
<
>
(
)
;
parameters
.
put
(
"someMethod"
,
"genMethod"
)
;
final
CtType
<
?
>
aIfaceModel
=
launcher
.
getFactory
(
)
.
Interface
(
)
.
get
(
AnIfaceModel
.
class
)
;
CtType
<
?
>
genIface
=
Substitution
.
createTypeFromTemplate
(
"generated.GenIface"
,
aIfaceModel
,
parameters
)
;
assertNotNull
(
genIface
)
;
assertSame
(
genIface
,
factory
.
Type
(
)
.
get
(
"generated.GenIface"
)
)
;
CtMethod
<
?
>
generatedIfaceMethod
=
genIface
.
getMethod
(
"genMethod"
)
;
assertNotNull
(
generatedIfaceMethod
)
;
assertNull
(
genIface
.
getMethod
(
"someMethod"
)
)
;
parameters
.
put
(
"AnIfaceModel"
,
genIface
.
getReference
(
)
)
;
final
CtType
<
?
>
aClassModel
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
AClassModel
.
class
)
;
CtType
<
?
>
genClass
=
Substitution
.
createTypeFromTemplate
(
"generated.GenClass"
,
aClassModel
,
parameters
)
;
assertNotNull
(
genClass
)
;
assertSame
(
genClass
,
factory
.
Type
(
)
.
get
(
"generated.GenClass"
)
)
;
CtMethod
<
?
>
generatedClassMethod
=
genClass
.
getMethod
(
"genMethod"
)
;
assertNotNull
(
generatedClassMethod
)
;
assertNull
(
genClass
.
getMethod
(
"someMethod"
)
)
;
assertNotSame
(
generatedIfaceMethod
,
generatedClassMethod
)
;
assertTrue
(
generatedClassMethod
.
isOverriding
(
generatedIfaceMethod
)
)
;
parameters
.
put
(
"case1"
,
"GOOD"
)
;
parameters
.
put
(
"case2"
,
"BETTER"
)
;
final
CtType
<
?
>
aEnumModel
=
launcher
.
getFactory
(
)
.
Type
(
)
.
get
(
AnEnumModel
.
class
)
;
CtEnum
<
?
>
genEnum
=
(
CtEnum
<
?
>
)
Substitution
.
createTypeFromTemplate
(
"generated.GenEnum"
,
aEnumModel
,
parameters
)
;
assertNotNull
(
genEnum
)
;
assertSame
(
genEnum
,
factory
.
Type
(
)
.
get
(
"generated.GenEnum"
)
)
;
assertEquals
(
2
,
genEnum
.
getEnumValues
(
)
.
size
(
)
)
;
assertEquals
(
"GOOD"
,
genEnum
.
getEnumValues
(
)
.
get
(
0
)
.
getSimpleName
(
)
)
;
assertEquals
(
"BETTER"
,
genEnum
.
getEnumValues
(
)
.
get
(
1
)
.
getSimpleName
(
)
)
;
}
