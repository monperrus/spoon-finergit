@Test
public
void
substituteStringLiteral
(
)
{
Launcher
spoon
=
new
Launcher
(
)
;
spoon
.
addTemplateResource
(
new
FileSystemFile
(
"./src/test/java/spoon/test/template/testclasses/SubstituteLiteralTemplate.java"
)
)
;
spoon
.
buildModel
(
)
;
Factory
factory
=
spoon
.
getFactory
(
)
;
{
final
CtClass
<
?
>
result
=
(
CtClass
<
?
>
)
new
SubstituteLiteralTemplate
(
"value1"
)
.
apply
(
factory
.
createClass
(
)
)
;
assertEquals
(
"java.lang.String stringField1 = \"value1\";"
,
result
.
getField
(
"stringField1"
)
.
toString
(
)
)
;
assertEquals
(
"java.lang.String stringField2 = \"Substring value1 is substituted too - value1\";"
,
result
.
getField
(
"stringField2"
)
.
toString
(
)
)
;
assertEquals
(
"java.lang.System.out.println(spoon.test.template.testclasses.Params.value1())"
,
result
.
getMethodsByName
(
"m1"
)
.
get
(
0
)
.
getBody
(
)
.
getStatement
(
0
)
.
toString
(
)
)
;
}
{
final
CtClass
<
?
>
result
=
(
CtClass
<
?
>
)
new
SubstituteLiteralTemplate
(
factory
.
createLiteral
(
"value2"
)
)
.
apply
(
factory
.
createClass
(
)
)
;
assertEquals
(
"java.lang.String stringField1 = \"value2\";"
,
result
.
getField
(
"stringField1"
)
.
toString
(
)
)
;
assertEquals
(
"java.lang.String stringField2 = \"Substring value2 is substituted too - value2\";"
,
result
.
getField
(
"stringField2"
)
.
toString
(
)
)
;
assertEquals
(
"java.lang.System.out.println(\"value2\")"
,
result
.
getMethodsByName
(
"m1"
)
.
get
(
0
)
.
getBody
(
)
.
getStatement
(
0
)
.
toString
(
)
)
;
}
{
final
CtClass
<
?
>
result
=
(
CtClass
<
?
>
)
new
SubstituteLiteralTemplate
(
factory
.
Type
(
)
.
createReference
(
"some.ignored.foo.TypeName"
)
)
.
apply
(
factory
.
createClass
(
)
)
;
assertEquals
(
"java.lang.String stringField1 = \"TypeName\";"
,
result
.
getField
(
"stringField1"
)
.
toString
(
)
)
;
assertEquals
(
"java.lang.String stringField2 = \"Substring TypeName is substituted too - TypeName\";"
,
result
.
getField
(
"stringField2"
)
.
toString
(
)
)
;
assertEquals
(
"java.lang.System.out.println(some.ignored.foo.TypeName.class)"
,
result
.
getMethodsByName
(
"m1"
)
.
get
(
0
)
.
getBody
(
)
.
getStatement
(
0
)
.
toString
(
)
)
;
}
{
final
CtClass
<
?
>
result
=
(
CtClass
<
?
>
)
new
SubstituteLiteralTemplate
(
factory
.
createLiteral
(
7
)
)
.
apply
(
factory
.
createClass
(
)
)
;
assertEquals
(
"java.lang.String stringField1 = \"7\";"
,
result
.
getField
(
"stringField1"
)
.
toString
(
)
)
;
assertEquals
(
"java.lang.String stringField2 = \"Substring 7 is substituted too - 7\";"
,
result
.
getField
(
"stringField2"
)
.
toString
(
)
)
;
assertEquals
(
"java.lang.System.out.println(7)"
,
result
.
getMethodsByName
(
"m1"
)
.
get
(
0
)
.
getBody
(
)
.
getStatement
(
0
)
.
toString
(
)
)
;
}
}
