@Test
public
void
testTemplateMatcher
(
)
throws
Exception
{
Launcher
spoon
=
new
Launcher
(
)
;
Factory
factory
=
spoon
.
getFactory
(
)
;
spoon
.
createCompiler
(
factory
,
SpoonResourceHelper
.
resources
(
"./src/test/java/spoon/test/template/testclasses/bounds/CheckBound.java"
)
,
SpoonResourceHelper
.
resources
(
"./src/test/java/spoon/test/template/testclasses/bounds/CheckBoundMatcher.java"
)
)
.
build
(
)
;
{
CtClass
<
?
>
templateKlass
=
factory
.
Class
(
)
.
get
(
CheckBoundMatcher
.
class
)
;
CtClass
<
?
>
klass
=
factory
.
Class
(
)
.
get
(
CheckBound
.
class
)
;
CtIf
templateRoot
=
(
CtIf
)
(
(
CtMethod
)
templateKlass
.
getElements
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"matcher1"
)
)
.
get
(
0
)
)
.
getBody
(
)
.
getStatement
(
0
)
;
TemplateMatcher
matcher
=
new
TemplateMatcher
(
templateRoot
)
;
assertEquals
(
2
,
matcher
.
find
(
klass
)
.
size
(
)
)
;
assertThat
(
asList
(
"foo"
,
"fbar"
)
,
is
(
klass
.
filterChildren
(
matcher
)
.
map
(
(
CtElement
e
)
->
getMethodName
(
e
)
)
.
list
(
)
)
)
;
matcher
.
forEachMatch
(
klass
,
(
match
)
->
{
assertTrue
(
checkParameters
(
"foo"
,
match
,
"_col_"
,
"new java.util.ArrayList<>()"
)
||
checkParameters
(
"fbar"
,
match
,
"_col_"
,
"l"
)
)
;
}
)
;
}
{
CtClass
<
?
>
templateKlass
=
factory
.
Class
(
)
.
get
(
CheckBoundMatcher
.
class
)
;
CtClass
<
?
>
klass
=
factory
.
Class
(
)
.
get
(
CheckBound
.
class
)
;
CtIf
templateRoot
=
(
CtIf
)
(
(
CtMethod
)
templateKlass
.
getElements
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"matcher2"
)
)
.
get
(
0
)
)
.
getBody
(
)
.
getStatement
(
0
)
;
TemplateMatcher
matcher
=
new
TemplateMatcher
(
templateRoot
)
;
assertEquals
(
2
,
matcher
.
find
(
klass
)
.
size
(
)
)
;
assertThat
(
asList
(
"bou"
,
"bov"
)
,
is
(
klass
.
filterChildren
(
matcher
)
.
map
(
(
CtElement
e
)
->
getMethodName
(
e
)
)
.
list
(
)
)
)
;
matcher
.
forEachMatch
(
klass
,
(
match
)
->
{
assertTrue
(
checkParameters
(
"bov"
,
match
,
"_col_"
,
"new java.util.ArrayList<>()"
)
||
checkParameters
(
"bou"
,
match
,
"_col_"
,
"new java.util.ArrayList<>()"
)
)
;
}
)
;
}
{
CtClass
<
?
>
templateKlass
=
factory
.
Class
(
)
.
get
(
CheckBoundMatcher
.
class
)
;
CtClass
<
?
>
klass
=
factory
.
Class
(
)
.
get
(
CheckBound
.
class
)
;
CtIf
templateRoot
=
(
CtIf
)
(
(
CtMethod
)
templateKlass
.
getElements
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"matcher3"
)
)
.
get
(
0
)
)
.
getBody
(
)
.
getStatement
(
0
)
;
TemplateMatcher
matcher
=
new
TemplateMatcher
(
templateRoot
)
;
assertEquals
(
2
,
matcher
.
find
(
klass
)
.
size
(
)
)
;
assertThat
(
asList
(
"foo"
,
"fbar"
)
,
is
(
klass
.
filterChildren
(
matcher
)
.
map
(
(
CtElement
e
)
->
getMethodName
(
e
)
)
.
list
(
)
)
)
;
matcher
.
forEachMatch
(
klass
,
(
match
)
->
{
assertTrue
(
checkParameters
(
"foo"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
)
||
checkParameters
(
"fbar"
,
match
,
"_x_"
,
"l.size()"
)
)
;
}
)
;
}
{
CtClass
<
?
>
templateKlass
=
factory
.
Class
(
)
.
get
(
CheckBoundMatcher
.
class
)
;
CtClass
<
?
>
klass
=
factory
.
Class
(
)
.
get
(
CheckBound
.
class
)
;
CtIf
templateRoot
=
(
CtIf
)
(
(
CtMethod
)
templateKlass
.
getElements
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"matcher4"
)
)
.
get
(
0
)
)
.
getBody
(
)
.
getStatement
(
0
)
;
TemplateMatcher
matcher
=
new
TemplateMatcher
(
templateRoot
)
;
assertEquals
(
3
,
matcher
.
find
(
klass
)
.
size
(
)
)
;
assertThat
(
asList
(
"foo"
,
"foo2"
,
"fbar"
)
,
is
(
klass
.
filterChildren
(
matcher
)
.
map
(
(
CtElement
e
)
->
getMethodName
(
e
)
)
.
list
(
)
)
)
;
matcher
.
forEachMatch
(
klass
,
(
match
)
->
{
assertTrue
(
checkParameters
(
"foo"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"10"
)
||
checkParameters
(
"foo2"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"11"
)
||
checkParameters
(
"fbar"
,
match
,
"_x_"
,
"l.size()"
,
"_y_"
,
"10"
)
)
;
}
)
;
}
{
CtClass
<
?
>
templateKlass
=
factory
.
Class
(
)
.
get
(
CheckBoundMatcher
.
class
)
;
CtClass
<
?
>
klass
=
factory
.
Class
(
)
.
get
(
CheckBound
.
class
)
;
CtIf
templateRoot
=
(
CtIf
)
(
(
CtMethod
)
templateKlass
.
getElements
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"matcher5"
)
)
.
get
(
0
)
)
.
getBody
(
)
.
getStatement
(
0
)
;
TemplateMatcher
matcher
=
new
TemplateMatcher
(
templateRoot
)
;
assertEquals
(
6
,
matcher
.
find
(
klass
)
.
size
(
)
)
;
assertThat
(
asList
(
"foo"
,
"foo2"
,
"fbar"
,
"baz"
,
"bou"
,
"bov"
)
,
is
(
klass
.
filterChildren
(
matcher
)
.
map
(
(
CtElement
e
)
->
getMethodName
(
e
)
)
.
list
(
)
)
)
;
matcher
.
forEachMatch
(
klass
,
(
match
)
->
{
assertTrue
(
checkParameters
(
"foo"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"10"
,
"_block_"
,
"{ throw new java.lang.IndexOutOfBoundsException();}"
)
||
checkParameters
(
"foo2"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"11"
,
"_block_"
,
"{ throw new java.lang.IndexOutOfBoundsException();}"
)
||
checkParameters
(
"fbar"
,
match
,
"_x_"
,
"l.size()"
,
"_y_"
,
"10"
,
"_block_"
,
"{ throw new java.lang.IndexOutOfBoundsException();}"
)
||
checkParameters
(
"baz"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"10"
,
"_block_"
,
"{}"
)
||
checkParameters
(
"bou"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"10"
,
"_block_"
,
"{ java.lang.System.out.println();}"
)
||
checkParameters
(
"bov"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"10"
,
"_block_"
,
"{ java.lang.System.out.println();}"
)
)
;
}
)
;
}
{
CtClass
<
?
>
templateKlass
=
factory
.
Class
(
)
.
get
(
CheckBoundMatcher
.
class
)
;
CtClass
<
?
>
klass
=
factory
.
Class
(
)
.
get
(
CheckBound
.
class
)
;
CtIf
templateRoot
=
(
CtIf
)
(
(
CtMethod
)
templateKlass
.
getElements
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"matcher6"
)
)
.
get
(
0
)
)
.
getBody
(
)
.
getStatement
(
0
)
;
TemplateMatcher
matcher
=
new
TemplateMatcher
(
templateRoot
)
;
assertEquals
(
6
,
matcher
.
find
(
klass
)
.
size
(
)
)
;
assertThat
(
asList
(
"foo"
,
"foo2"
,
"fbar"
,
"baz"
,
"bou"
,
"bov"
)
,
is
(
klass
.
filterChildren
(
matcher
)
.
map
(
(
CtElement
e
)
->
getMethodName
(
e
)
)
.
list
(
)
)
)
;
matcher
.
forEachMatch
(
klass
,
(
match
)
->
{
assertTrue
(
checkParameters
(
"foo"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"10"
,
"_stmt_"
,
"throw new java.lang.IndexOutOfBoundsException()"
)
||
checkParameters
(
"foo2"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"11"
,
"_stmt_"
,
"throw new java.lang.IndexOutOfBoundsException()"
)
||
checkParameters
(
"fbar"
,
match
,
"_x_"
,
"l.size()"
,
"_y_"
,
"10"
,
"_stmt_"
,
"throw new java.lang.IndexOutOfBoundsException()"
)
||
checkParameters
(
"baz"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"10"
,
"_stmt_"
,
"null"
)
||
checkParameters
(
"bou"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"10"
,
"_stmt_"
,
"java.lang.System.out.println()"
)
||
checkParameters
(
"bov"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_y_"
,
"10"
,
"_stmt_"
,
"java.lang.System.out.println()"
)
)
;
}
)
;
}
{
CtClass
<
?
>
templateKlass
=
factory
.
Class
(
)
.
get
(
CheckBoundMatcher
.
class
)
;
CtClass
<
?
>
klass
=
factory
.
Class
(
)
.
get
(
CheckBound
.
class
)
;
CtIf
templateRoot
=
(
CtIf
)
(
(
CtMethod
)
templateKlass
.
getElements
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"matcher7"
)
)
.
get
(
0
)
)
.
getBody
(
)
.
getStatement
(
0
)
;
TemplateMatcher
matcher
=
new
TemplateMatcher
(
templateRoot
)
;
assertEquals
(
1
,
matcher
.
find
(
klass
)
.
size
(
)
)
;
assertThat
(
asList
(
"bos"
)
,
is
(
klass
.
filterChildren
(
matcher
)
.
map
(
(
CtElement
e
)
->
getMethodName
(
e
)
)
.
list
(
)
)
)
;
matcher
.
forEachMatch
(
klass
,
(
match
)
->
{
assertTrue
(
checkParameters
(
"bos"
,
match
,
"_x_"
,
"new java.util.ArrayList<>().size()"
,
"_block_"
,
"{ java.lang.System.out.println();}"
)
)
;
}
)
;
}
{
CtClass
<
?
>
templateKlass
=
factory
.
Class
(
)
.
get
(
CheckBoundMatcher
.
class
)
;
CtClass
<
?
>
klass
=
factory
.
Class
(
)
.
get
(
CheckBound
.
class
)
;
CtMethod
meth
=
(
CtMethod
)
templateKlass
.
getElements
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"matcher3"
)
)
.
get
(
0
)
;
meth
.
setSimpleName
(
"foo"
)
;
TemplateMatcher
matcher
=
new
TemplateMatcher
(
meth
)
;
List
<
CtMethod
>
ctElements
=
matcher
.
find
(
klass
)
;
assertEquals
(
1
,
ctElements
.
size
(
)
)
;
assertEquals
(
"foo"
,
ctElements
.
get
(
0
)
.
getSimpleName
(
)
)
;
}
{
CtClass
<
?
>
templateKlass
=
factory
.
Class
(
)
.
get
(
CheckBoundMatcher
.
class
)
;
CtClass
<
?
>
klass
=
factory
.
Class
(
)
.
get
(
CheckBound
.
class
)
;
CtMethod
meth
=
(
CtMethod
)
templateKlass
.
getElements
(
new
NamedElementFilter
<
>
(
CtMethod
.
class
,
"matcher5"
)
)
.
get
(
0
)
;
meth
.
setSimpleName
(
"f_w_"
)
;
TemplateMatcher
matcher
=
new
TemplateMatcher
(
meth
)
;
List
<
CtMethod
>
ctElements
=
matcher
.
find
(
klass
)
;
assertEquals
(
3
,
ctElements
.
size
(
)
)
;
assertEquals
(
"foo"
,
ctElements
.
get
(
0
)
.
getSimpleName
(
)
)
;
assertEquals
(
"foo2"
,
ctElements
.
get
(
1
)
.
getSimpleName
(
)
)
;
assertEquals
(
"fbar"
,
ctElements
.
get
(
2
)
.
getSimpleName
(
)
)
;
}
}
