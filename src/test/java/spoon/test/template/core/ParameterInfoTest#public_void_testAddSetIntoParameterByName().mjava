@Test
public
void
testAddSetIntoParameterByName
(
)
{
BiConsumer
<
ParameterInfo
,
ImmutableMap
>
checker
=
(
namedParam
,
empty
)
->
{
ImmutableMap
val
=
namedParam
.
addValueAs
(
empty
,
Collections
.
emptySet
(
)
)
;
assertEquals
(
map
(
)
.
put
(
"list"
,
Collections
.
emptySet
(
)
)
,
val
.
asMap
(
)
)
;
val
=
namedParam
.
addValueAs
(
empty
,
asSet
(
2018
)
)
;
assertEquals
(
map
(
)
.
put
(
"list"
,
asSet
(
2018
)
)
,
val
.
asMap
(
)
)
;
val
=
namedParam
.
addValueAs
(
empty
,
asSet
(
2018
,
1111
)
)
;
assertEquals
(
map
(
)
.
put
(
"list"
,
asSet
(
2018
,
1111
)
)
,
val
.
asMap
(
)
)
;
assertSame
(
val
,
namedParam
.
addValueAs
(
val
,
null
)
)
;
assertSame
(
val
,
namedParam
.
addValueAs
(
val
,
1111
)
)
;
assertSame
(
val
,
namedParam
.
addValueAs
(
val
,
asSet
(
1111
)
)
)
;
assertSame
(
val
,
namedParam
.
addValueAs
(
val
,
asSet
(
2018
,
1111
)
)
)
;
}
;
checker
.
accept
(
new
MapParameterInfo
(
"list"
)
.
setContainerKind
(
ContainerKind
.
SET
)
,
new
ImmutableMapImpl
(
)
)
;
checker
.
accept
(
new
MapParameterInfo
(
"list"
)
.
setContainerKind
(
ContainerKind
.
SET
)
,
new
ImmutableMapImpl
(
)
.
putValue
(
"list"
,
null
)
)
;
checker
.
accept
(
new
MapParameterInfo
(
"list"
)
.
setContainerKind
(
ContainerKind
.
SET
)
,
new
ImmutableMapImpl
(
)
.
putValue
(
"list"
,
Collections
.
emptySet
(
)
)
)
;
checker
.
accept
(
new
MapParameterInfo
(
"list"
)
.
setContainerKind
(
ContainerKind
.
SET
)
,
new
ImmutableMapImpl
(
)
.
putValue
(
"list"
,
Collections
.
emptyList
(
)
)
)
;
checker
.
accept
(
new
MapParameterInfo
(
"list"
)
,
new
ImmutableMapImpl
(
)
.
putValue
(
"list"
,
Collections
.
emptySet
(
)
)
)
;
checker
.
accept
(
new
MapParameterInfo
(
"list"
)
,
null
)
;
}
