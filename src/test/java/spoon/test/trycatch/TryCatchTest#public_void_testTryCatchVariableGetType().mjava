@Test
public
void
testTryCatchVariableGetType
(
)
{
Factory
factory
=
createFactory
(
)
;
CtClass
<
?
>
clazz
=
factory
.
Code
(
)
.
createCodeSnippetStatement
(
""
+
"class X {"
+
"public void foo() {"
+
" try{}catch(RuntimeException e){System.exit(0);}"
+
"}"
+
"};"
)
.
compile
(
)
;
CtTry
tryStmt
=
clazz
.
getElements
(
new
TypeFilter
<
>
(
CtTry
.
class
)
)
.
get
(
0
)
;
List
<
CtCatch
>
catchers
=
tryStmt
.
getCatchers
(
)
;
assertEquals
(
1
,
catchers
.
size
(
)
)
;
CtCatchVariable
<
?
>
catchVariable
=
catchers
.
get
(
0
)
.
getParameter
(
)
;
assertEquals
(
RuntimeException
.
class
,
catchVariable
.
getType
(
)
.
getActualClass
(
)
)
;
assertEquals
(
1
,
catchVariable
.
getMultiTypes
(
)
.
size
(
)
)
;
assertEquals
(
RuntimeException
.
class
,
catchVariable
.
getMultiTypes
(
)
.
get
(
0
)
.
getActualClass
(
)
)
;
catchVariable
.
setType
(
(
CtTypeReference
)
factory
.
Type
(
)
.
createReference
(
IllegalArgumentException
.
class
)
)
;
assertEquals
(
IllegalArgumentException
.
class
,
catchVariable
.
getType
(
)
.
getActualClass
(
)
)
;
assertEquals
(
1
,
catchVariable
.
getMultiTypes
(
)
.
size
(
)
)
;
assertEquals
(
IllegalArgumentException
.
class
,
catchVariable
.
getMultiTypes
(
)
.
get
(
0
)
.
getActualClass
(
)
)
;
catchVariable
.
setMultiTypes
(
Collections
.
singletonList
(
(
CtTypeReference
)
factory
.
Type
(
)
.
createReference
(
UnsupportedOperationException
.
class
)
)
)
;
assertEquals
(
UnsupportedOperationException
.
class
,
catchVariable
.
getType
(
)
.
getActualClass
(
)
)
;
assertEquals
(
1
,
catchVariable
.
getMultiTypes
(
)
.
size
(
)
)
;
assertEquals
(
UnsupportedOperationException
.
class
,
catchVariable
.
getMultiTypes
(
)
.
get
(
0
)
.
getActualClass
(
)
)
;
catchVariable
.
setMultiTypes
(
Arrays
.
asList
(
factory
.
Type
(
)
.
createReference
(
UnsupportedOperationException
.
class
)
,
factory
.
Type
(
)
.
createReference
(
IllegalArgumentException
.
class
)
)
)
;
assertEquals
(
2
,
catchVariable
.
getMultiTypes
(
)
.
size
(
)
)
;
assertEquals
(
UnsupportedOperationException
.
class
,
catchVariable
.
getMultiTypes
(
)
.
get
(
0
)
.
getActualClass
(
)
)
;
assertEquals
(
IllegalArgumentException
.
class
,
catchVariable
.
getMultiTypes
(
)
.
get
(
1
)
.
getActualClass
(
)
)
;
assertEquals
(
RuntimeException
.
class
,
catchVariable
.
getType
(
)
.
getActualClass
(
)
)
;
}
