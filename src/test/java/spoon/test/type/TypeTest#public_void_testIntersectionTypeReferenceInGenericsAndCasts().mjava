@Test
public
void
testIntersectionTypeReferenceInGenericsAndCasts
(
)
{
final
String
target
=
"./target/type"
;
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/type/testclasses"
)
;
launcher
.
setSourceOutputDirectory
(
target
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
run
(
)
;
final
CtClass
<
Pozole
>
aPozole
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Pozole
.
class
)
;
final
CtMethod
<
?
>
prepare
=
aPozole
.
getMethodsByName
(
"prepare"
)
.
get
(
0
)
;
final
List
<
CtClass
>
localTypes
=
prepare
.
getElements
(
new
TypeFilter
<
>
(
CtClass
.
class
)
)
;
assertEquals
(
1
,
localTypes
.
size
(
)
)
;
final
CtTypeParameter
typeParameter
=
localTypes
.
get
(
0
)
.
getFormalCtTypeParameters
(
)
.
get
(
0
)
;
assertNotNull
(
typeParameter
)
;
assertEquals
(
"T"
,
typeParameter
.
getSimpleName
(
)
)
;
assertIntersectionTypeForPozolePrepareMethod
(
aPozole
,
typeParameter
.
getSuperclass
(
)
)
;
final
List
<
CtLambda
<
?
>
>
lambdas
=
prepare
.
getElements
(
new
TypeFilter
<
>
(
CtLambda
.
class
)
)
;
assertEquals
(
1
,
lambdas
.
size
(
)
)
;
assertEquals
(
1
,
lambdas
.
get
(
0
)
.
getTypeCasts
(
)
.
size
(
)
)
;
assertTrue
(
lambdas
.
get
(
0
)
.
getTypeCasts
(
)
.
get
(
0
)
instanceof
CtIntersectionTypeReference
)
;
final
CtIntersectionTypeReference
<
?
>
intersectionType
=
lambdas
.
get
(
0
)
.
getTypeCasts
(
)
.
get
(
0
)
.
asCtIntersectionTypeReference
(
)
;
assertTrue
(
intersectionType
.
toString
(
)
.
contains
(
"java.lang.Runnable"
)
&&
intersectionType
.
toString
(
)
.
contains
(
"java.io.Serializable"
)
)
;
CtTypeReference
refRunnable
=
aPozole
.
getFactory
(
)
.
Type
(
)
.
createReference
(
Runnable
.
class
)
;
CtTypeReference
refSerializable
=
aPozole
.
getFactory
(
)
.
Type
(
)
.
createReference
(
Serializable
.
class
)
;
CtTypeReference
ref0
=
intersectionType
.
getBounds
(
)
.
stream
(
)
.
collect
(
Collectors
.
toList
(
)
)
.
get
(
0
)
;
CtTypeReference
ref1
=
intersectionType
.
getBounds
(
)
.
stream
(
)
.
collect
(
Collectors
.
toList
(
)
)
.
get
(
1
)
;
assertTrue
(
(
ref0
.
equals
(
refRunnable
)
||
ref0
.
equals
(
refSerializable
)
)
&&
(
ref1
.
equals
(
refRunnable
)
||
ref1
.
equals
(
refSerializable
)
)
)
;
canBeBuilt
(
target
,
8
,
true
)
;
}
