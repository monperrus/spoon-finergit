@Test
public
void
testPolyTypBindingInTernaryExpression
(
)
{
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/resources/noclasspath/ternary-bug"
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
buildModel
(
)
;
CtType
<
Object
>
aType
=
launcher
.
getFactory
(
)
.
Type
(
)
.
get
(
"de.uni_bremen.st.quide.persistence.transformators.IssueTransformator"
)
;
CtConstructorCall
ctConstructorCall
=
aType
.
getElements
(
new
TypeFilter
<
CtConstructorCall
>
(
CtConstructorCall
.
class
)
{
@Override
public
boolean
matches
(
CtConstructorCall
element
)
{
return
"TOIssue"
.
equals
(
element
.
getExecutable
(
)
.
getType
(
)
.
getSimpleName
(
)
)
&&
super
.
matches
(
element
)
;
}
}
)
.
get
(
0
)
;
assertEquals
(
launcher
.
getFactory
(
)
.
Type
(
)
.
objectType
(
)
,
ctConstructorCall
.
getExecutable
(
)
.
getParameters
(
)
.
get
(
9
)
)
;
}
