@Test
public
void
testTypeAccessForDotClass
(
)
{
final
String
target
=
"./target/type"
;
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/type/testclasses"
)
;
launcher
.
setSourceOutputDirectory
(
target
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
run
(
)
;
final
CtClass
<
Pozole
>
aPozole
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Pozole
.
class
)
;
final
CtMethod
<
?
>
make
=
aPozole
.
getMethodsByName
(
"make"
)
.
get
(
0
)
;
final
List
<
CtFieldRead
<
?
>
>
fieldClasses
=
make
.
getElements
(
new
TypeFilter
<
CtFieldRead
<
?
>
>
(
CtFieldRead
.
class
)
{
@Override
public
boolean
matches
(
CtFieldRead
<
?
>
element
)
{
return
"class"
.
equals
(
element
.
getVariable
(
)
.
getSimpleName
(
)
)
&&
super
.
matches
(
element
)
;
}
}
)
;
assertEquals
(
4
,
fieldClasses
.
size
(
)
)
;
for
(
CtFieldRead
<
?
>
fieldClass
:
fieldClasses
)
{
assertTrue
(
fieldClass
.
getTarget
(
)
instanceof
CtTypeAccess
)
;
}
canBeBuilt
(
target
,
8
,
true
)
;
}
