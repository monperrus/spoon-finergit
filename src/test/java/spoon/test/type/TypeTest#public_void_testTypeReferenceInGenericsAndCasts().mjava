@Test
public
void
testTypeReferenceInGenericsAndCasts
(
)
{
final
String
target
=
"./target/type"
;
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/type/testclasses"
)
;
launcher
.
setSourceOutputDirectory
(
target
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
run
(
)
;
final
CtClass
<
Pozole
>
aPozole
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
Pozole
.
class
)
;
final
CtMethod
<
?
>
prepare
=
aPozole
.
getMethodsByName
(
"finish"
)
.
get
(
0
)
;
final
List
<
CtClass
>
localTypes
=
prepare
.
getElements
(
new
TypeFilter
<
>
(
CtClass
.
class
)
)
;
assertEquals
(
1
,
localTypes
.
size
(
)
)
;
final
CtTypeParameter
typeParameter
=
localTypes
.
get
(
0
)
.
getFormalCtTypeParameters
(
)
.
get
(
0
)
;
assertNotNull
(
typeParameter
)
;
assertEquals
(
"T"
,
typeParameter
.
getSimpleName
(
)
)
;
assertIntersectionTypeForPozoleFinishMethod
(
aPozole
,
typeParameter
.
getSuperclass
(
)
)
;
final
List
<
CtLambda
<
?
>
>
lambdas
=
prepare
.
getElements
(
new
TypeFilter
<
>
(
CtLambda
.
class
)
)
;
assertEquals
(
1
,
lambdas
.
size
(
)
)
;
assertEquals
(
1
,
lambdas
.
get
(
0
)
.
getTypeCasts
(
)
.
size
(
)
)
;
assertEquals
(
"java.lang.Runnable"
,
lambdas
.
get
(
0
)
.
getTypeCasts
(
)
.
get
(
0
)
.
toString
(
)
)
;
assertEquals
(
aPozole
.
getFactory
(
)
.
Type
(
)
.
createReference
(
Runnable
.
class
)
,
lambdas
.
get
(
0
)
.
getTypeCasts
(
)
.
get
(
0
)
)
;
canBeBuilt
(
target
,
8
,
true
)
;
}
