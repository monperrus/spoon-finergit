@Test
public
void
testCanVisitFieldAccessAndSubClasses
(
)
throws
Exception
{
final
Factory
factory
=
TestUtils
.
build
(
FieldAccessSample
.
class
)
;
final
List
<
CtFieldRead
<
?
>
>
fieldsRead
=
Query
.
getElements
(
factory
,
new
AbstractFilter
<
CtFieldRead
<
?
>
>
(
CtFieldRead
.
class
)
{
@Override
public
boolean
matches
(
CtFieldRead
<
?
>
element
)
{
return
super
.
matches
(
element
)
;
}
}
)
;
assertEquals
(
2
,
fieldsRead
.
size
(
)
)
;
final
List
<
CtFieldWrite
<
?
>
>
fieldsWrite
=
Query
.
getElements
(
factory
,
new
AbstractFilter
<
CtFieldWrite
<
?
>
>
(
CtFieldWrite
.
class
)
{
@Override
public
boolean
matches
(
CtFieldWrite
<
?
>
element
)
{
return
super
.
matches
(
element
)
;
}
}
)
;
assertEquals
(
3
,
fieldsWrite
.
size
(
)
)
;
final
List
<
CtFieldAccess
<
?
>
>
fieldsAccess
=
Query
.
getElements
(
factory
,
new
AbstractFilter
<
CtFieldAccess
<
?
>
>
(
CtFieldAccess
.
class
)
{
@Override
public
boolean
matches
(
CtFieldAccess
<
?
>
element
)
{
return
super
.
matches
(
element
)
;
}
}
)
;
assertEquals
(
5
,
fieldsAccess
.
size
(
)
)
;
}
