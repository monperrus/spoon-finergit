@Test
public
void
testFullyQualifiedNameOfTypeReferenceWithGeneric
(
)
throws
Exception
{
final
String
target
=
"./target/spooned/spoon/test/visibility_generics/testclasses/"
;
final
SpoonAPI
launcher
=
new
Launcher
(
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/visibility/testclasses/A.java"
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/visibility/testclasses/A2.java"
)
;
launcher
.
addInputResource
(
"./src/test/java/spoon/test/visibility/testclasses/Foo.java"
)
;
launcher
.
setSourceOutputDirectory
(
target
)
;
launcher
.
run
(
)
;
final
CtClass
<
A
>
aClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
A
.
class
)
;
CtType
<
?
>
nestedB
=
aClass
.
getNestedType
(
"B"
)
;
List
<
CtFieldAccess
>
elements
=
nestedB
.
getElements
(
new
TypeFilter
<
>
(
CtFieldAccess
.
class
)
)
;
assertEquals
(
1
,
elements
.
size
(
)
)
;
assertEquals
(
"(spoon.test.visibility.testclasses.A.B.i)"
,
elements
.
get
(
0
)
.
toString
(
)
)
;
CtMethod
<
?
>
instanceOf
=
aClass
.
getMethodsByName
(
"instanceOf"
)
.
get
(
0
)
;
List
<
CtBinaryOperator
>
elements1
=
instanceOf
.
getElements
(
new
TypeFilter
<
>
(
CtBinaryOperator
.
class
)
)
;
assertEquals
(
1
,
elements1
.
size
(
)
)
;
assertEquals
(
"spoon.test.visibility.testclasses.A.B"
,
elements1
.
get
(
0
)
.
getRightHandOperand
(
)
.
toString
(
)
)
;
CtMethod
<
?
>
returnType
=
aClass
.
getMethodsByName
(
"returnType"
)
.
get
(
0
)
;
assertEquals
(
"spoon.test.visibility.testclasses.A<T>.C<T>"
,
returnType
.
getType
(
)
.
toString
(
)
)
;
final
CtClass
<
A2
>
secondClass
=
launcher
.
getFactory
(
)
.
Class
(
)
.
get
(
A2
.
class
)
;
nestedB
=
secondClass
.
getNestedType
(
"B"
)
;
elements
=
nestedB
.
getElements
(
new
TypeFilter
<
>
(
CtFieldAccess
.
class
)
)
;
assertEquals
(
1
,
elements
.
size
(
)
)
;
assertEquals
(
"(spoon.test.visibility.testclasses.A2.B.i)"
,
elements
.
get
(
0
)
.
toString
(
)
)
;
instanceOf
=
secondClass
.
getMethodsByName
(
"instanceOf"
)
.
get
(
0
)
;
elements1
=
instanceOf
.
getElements
(
new
TypeFilter
<
>
(
CtBinaryOperator
.
class
)
)
;
assertEquals
(
1
,
elements1
.
size
(
)
)
;
assertEquals
(
"spoon.test.visibility.testclasses.A2.B"
,
elements1
.
get
(
0
)
.
getRightHandOperand
(
)
.
toString
(
)
)
;
returnType
=
secondClass
.
getMethodsByName
(
"returnType"
)
.
get
(
0
)
;
assertEquals
(
"spoon.test.visibility.testclasses.A2.C<java.lang.String>"
,
returnType
.
getType
(
)
.
toString
(
)
)
;
returnType
=
secondClass
.
getMethodsByName
(
"returnType2"
)
.
get
(
0
)
;
assertEquals
(
"spoon.test.visibility.testclasses.Foo<java.lang.String>.Bar<java.lang.String>"
,
returnType
.
getType
(
)
.
toString
(
)
)
;
canBeBuilt
(
target
,
8
)
;
}
