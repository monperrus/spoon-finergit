@Test
public
void
testInvocationVisibilityInFieldDeclaration
(
)
{
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setNoClasspath
(
true
)
;
launcher
.
addInputResource
(
"./src/test/resources/noclasspath/Solver.java"
)
;
launcher
.
setSourceOutputDirectory
(
"./target/spooned"
)
;
launcher
.
buildModel
(
)
;
final
CtType
<
Object
>
aSolver
=
launcher
.
getFactory
(
)
.
Type
(
)
.
get
(
"org.sat4j.minisat.core.Solver"
)
;
final
CtField
<
?
>
lbdTimerField
=
aSolver
.
getField
(
"lbdTimer"
)
;
final
CtInvocation
<
?
>
ctInvocation
=
lbdTimerField
.
getElements
(
new
TypeFilter
<
CtInvocation
<
?
>
>
(
CtInvocation
.
class
)
{
@Override
public
boolean
matches
(
CtInvocation
<
?
>
element
)
{
return
"bound"
.
equals
(
element
.
getExecutable
(
)
.
getSimpleName
(
)
)
&&
super
.
matches
(
element
)
;
}
}
)
.
get
(
0
)
;
assertNotNull
(
ctInvocation
.
getTarget
(
)
)
;
assertTrue
(
ctInvocation
.
getTarget
(
)
.
isImplicit
(
)
)
;
assertEquals
(
"bound()"
,
ctInvocation
.
toString
(
)
)
;
}
