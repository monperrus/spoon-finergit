@Test
public
void
testVisibilityOfClassesNamedByClassesInJavaLangPackage
(
)
throws
Exception
{
final
File
sourceOutputDir
=
new
File
(
"target/spooned/spoon/test/visibility_package/testclasses"
)
;
final
Launcher
launcher
=
new
Launcher
(
)
;
launcher
.
getEnvironment
(
)
.
setAutoImports
(
true
)
;
launcher
.
getEnvironment
(
)
.
setDefaultFileGenerator
(
launcher
.
createOutputWriter
(
sourceOutputDir
,
launcher
.
getEnvironment
(
)
)
)
;
final
Factory
factory
=
launcher
.
getFactory
(
)
;
final
SpoonCompiler
compiler
=
launcher
.
createCompiler
(
)
;
compiler
.
addInputSource
(
new
File
(
"./src/test/java/spoon/test/visibility/testclasses/"
)
)
;
compiler
.
setOutputDirectory
(
sourceOutputDir
)
;
compiler
.
build
(
)
;
compiler
.
generateProcessedSourceFiles
(
OutputType
.
CLASSES
)
;
final
CtClass
<
?
>
aDouble
=
(
CtClass
<
?
>
)
factory
.
Type
(
)
.
get
(
spoon
.
test
.
visibility
.
testclasses
.
internal
.
Double
.
class
)
;
assertNotNull
(
aDouble
)
;
assertEquals
(
spoon
.
test
.
visibility
.
testclasses
.
internal
.
Double
.
class
,
aDouble
.
getActualClass
(
)
)
;
final
CtClass
<
?
>
aFloat
=
(
CtClass
<
?
>
)
factory
.
Type
(
)
.
get
(
spoon
.
test
.
visibility
.
testclasses
.
Float
.
class
)
;
assertNotNull
(
aFloat
)
;
assertEquals
(
spoon
.
test
.
visibility
.
testclasses
.
Float
.
class
,
aFloat
.
getActualClass
(
)
)
;
canBeBuild
(
new
File
(
"./target/spooned/spoon/test/visibility_package/testclasses/"
)
,
7
)
;
}
