@java.lang.Override
public
void
onCreate
(
android
.
os
.
Bundle
savedInstance
)
{
disableSwipeBackLayout
(
)
;
getWindow
(
)
.
setBackgroundDrawable
(
new
android
.
graphics
.
drawable
.
ColorDrawable
(
android
.
graphics
.
Color
.
TRANSPARENT
)
)
;
getWindow
(
)
.
getDecorView
(
)
.
setBackgroundDrawable
(
null
)
;
super
.
onCreate
(
savedInstance
)
;
applyColorTheme
(
)
;
setContentView
(
me
.
ccrama
.
redditslide
.
R
.
layout
.
activity_slide
)
;
name
=
getIntent
(
)
.
getExtras
(
)
.
getString
(
me
.
ccrama
.
redditslide
.
Activities
.
A
.
EXTRA_SUBMISSION
,
""
)
;
subreddit
=
getIntent
(
)
.
getExtras
(
)
.
getString
(
me
.
ccrama
.
redditslide
.
Activities
.
A
.
EXTRA_SUBREDDIT
,
""
)
;
np
=
getIntent
(
)
.
getExtras
(
)
.
getBoolean
(
me
.
ccrama
.
redditslide
.
Activities
.
A
.
EXTRA_NP
,
false
)
;
context
=
getIntent
(
)
.
getExtras
(
)
.
getString
(
me
.
ccrama
.
redditslide
.
Activities
.
A
.
EXTRA_CONTEXT
,
""
)
;
contextNumber
=
getIntent
(
)
.
getExtras
(
)
.
getInt
(
me
.
ccrama
.
redditslide
.
Activities
.
A
.
EXTRA_CONTEXT_NUMBER
,
5
)
;
if
(
subreddit
.
equals
(
me
.
ccrama
.
redditslide
.
Reddit
.
EMPTY_STRING
)
)
{
new
me
.
ccrama
.
redditslide
.
Activities
.
A
.
AsyncGetSubredditName
(
)
.
execute
(
name
)
;
android
.
util
.
TypedValue
typedValue
=
new
android
.
util
.
TypedValue
(
)
;
getTheme
(
)
.
resolveAttribute
(
me
.
ccrama
.
redditslide
.
R
.
attr
.
activity_background
,
typedValue
,
true
)
;
int
color
=
typedValue
.
data
;
findViewById
(
me
.
ccrama
.
redditslide
.
R
.
id
.
content_view
)
.
setBackgroundColor
(
color
)
;
}
else
{
setupAdapter
(
)
;
}
if
(
me
.
ccrama
.
redditslide
.
Authentication
.
isLoggedIn
&&
(
me
.
ccrama
.
redditslide
.
Authentication
.
me
==
null
)
)
{
new
android
.
os
.
AsyncTask
<
java
.
lang
.
Void
,
java
.
lang
.
Void
,
java
.
lang
.
Void
>
(
)
{
@java.lang.Override
protected
java
.
lang
.
Void
doInBackground
(
java
.
lang
.
Void
...
params
)
{
if
(
me
.
ccrama
.
redditslide
.
Authentication
.
reddit
==
null
)
{
new
me
.
ccrama
.
redditslide
.
Authentication
(
getApplicationContext
(
)
)
;
}
else
{
try
{
me
.
ccrama
.
redditslide
.
Authentication
.
me
=
me
.
ccrama
.
redditslide
.
Authentication
.
reddit
.
me
(
)
;
me
.
ccrama
.
redditslide
.
Authentication
.
mod
=
me
.
ccrama
.
redditslide
.
Authentication
.
me
.
isMod
(
)
;
me
.
ccrama
.
redditslide
.
Authentication
.
authentication
.
edit
(
)
.
putBoolean
(
me
.
ccrama
.
redditslide
.
Reddit
.
SHARED_PREF_IS_MOD
,
me
.
ccrama
.
redditslide
.
Authentication
.
mod
)
.
apply
(
)
;
if
(
me
.
ccrama
.
redditslide
.
Reddit
.
notificationTime
!=
(
-
1
)
)
{
me
.
ccrama
.
redditslide
.
Reddit
.
notifications
=
new
me
.
ccrama
.
redditslide
.
Notifications
.
NotificationJobScheduler
(
this
)
;
me
.
ccrama
.
redditslide
.
Reddit
.
notifications
.
start
(
getApplicationContext
(
)
)
;
}
if
(
me
.
ccrama
.
redditslide
.
Reddit
.
cachedData
.
contains
(
"toCache"
)
)
{
me
.
ccrama
.
redditslide
.
Reddit
.
autoCache
=
new
me
.
ccrama
.
redditslide
.
Autocache
.
AutoCacheScheduler
(
this
)
;
me
.
ccrama
.
redditslide
.
Reddit
.
autoCache
.
start
(
getApplicationContext
(
)
)
;
}
final
java
.
lang
.
String
name
=
me
.
ccrama
.
redditslide
.
Authentication
.
me
.
getFullName
(
)
;
me
.
ccrama
.
redditslide
.
Authentication
.
name
=
name
;
me
.
ccrama
.
redditslide
.
util
.
LogUtil
.
v
(
"AUTHENTICATED"
)
;
me
.
ccrama
.
redditslide
.
UserSubscriptions
.
doCachedModSubs
(
)
;
if
(
me
.
ccrama
.
redditslide
.
Authentication
.
reddit
.
isAuthenticated
(
)
)
{
final
java
.
util
.
Set
<
java
.
lang
.
String
>
accounts
=
me
.
ccrama
.
redditslide
.
Authentication
.
authentication
.
getStringSet
(
"accounts"
,
new
java
.
util
.
HashSet
<
java
.
lang
.
String
>
(
)
)
;
if
(
accounts
.
contains
(
name
)
)
{
accounts
.
remove
(
name
)
;
accounts
.
add
(
(
name
+
":"
)
+
me
.
ccrama
.
redditslide
.
Authentication
.
refresh
)
;
me
.
ccrama
.
redditslide
.
Authentication
.
authentication
.
edit
(
)
.
putStringSet
(
"accounts"
,
accounts
)
.
apply
(
)
;
}
me
.
ccrama
.
redditslide
.
Authentication
.
isLoggedIn
=
true
;
me
.
ccrama
.
redditslide
.
Reddit
.
notFirst
=
true
;
}
}
catch
(
java
.
lang
.
Exception
e
)
{
new
me
.
ccrama
.
redditslide
.
Authentication
(
getApplicationContext
(
)
)
;
}
}
return
null
;
}
}
.
executeOnExecutor
(
android
.
os
.
AsyncTask
.
THREAD_POOL_EXECUTOR
)
;
}
}
