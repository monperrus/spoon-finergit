/** 
 * Wrap an Object : If the object is a reference wrap it into a Reference Wrapper Object here the good way is to contact the carol configuration to get the portable remote object
 * @param o the object to encode
 * @param name of the object
 * @param replace if the object need to be replaced
 * @return a <code>Remote JNDIRemoteReference Object</code> if o is aresource o if else
 * @throws NamingException if object cannot be wrapped
 */
protected
Object
wrapObject
(
Object
o
,
Name
name
,
boolean
replace
)
throws
NamingException
{
try
{
if
(
(
!
(
o
instanceof
Remote
)
)
&&
(
o
instanceof
Referenceable
)
)
{
return
new
UnicastJNDIReferenceWrapper
(
(
(
Referenceable
)
o
)
.
getReference
(
)
,
getObjectPort
(
)
)
;
}
else
if
(
(
!
(
o
instanceof
Remote
)
)
&&
(
o
instanceof
Reference
)
)
{
return
new
UnicastJNDIReferenceWrapper
(
(
Reference
)
o
,
getObjectPort
(
)
)
;
}
else
if
(
(
!
(
o
instanceof
Remote
)
)
&&
(
!
(
o
instanceof
Referenceable
)
)
&&
(
!
(
o
instanceof
Reference
)
)
&&
(
o
instanceof
Serializable
)
)
{
JNDIResourceWrapper
irw
=
new
JNDIResourceWrapper
(
(
Serializable
)
o
)
;
PortableRemoteObjectDelegate
proDelegate
=
ConfigurationRepository
.
getCurrentConfiguration
(
)
.
getProtocol
(
)
.
getPortableRemoteObject
(
)
;
proDelegate
.
exportObject
(
irw
)
;
Remote
oldObj
=
(
Remote
)
addToExported
(
name
,
irw
)
;
if
(
oldObj
!=
null
)
{
if
(
replace
)
{
proDelegate
.
unexportObject
(
oldObj
)
;
}
else
{
proDelegate
.
unexportObject
(
irw
)
;
addToExported
(
name
,
oldObj
)
;
throw
new
NamingException
(
"Object '"
+
o
+
"' with name '"
+
name
+
"' is already bind"
)
;
}
}
return
irw
;
}
else
{
return
o
;
}
}
catch
(
Exception
e
)
{
throw
NamingExceptionHelper
.
create
(
"Cannot wrap object '"
+
o
+
"' with name '"
+
name
+
"' : "
+
e
.
getMessage
(
)
,
e
)
;
}
}
