/** 
 * Returns the max ppt that corresponds to the specified percentage of ppts (presuming that only those ppts <= max_ppt will be processed).
 */
private
static
String
setup_ppt_perc
(
Collection
<
File
>
decl_files
,
int
ppt_perc
)
{
if
(
(
ppt_perc
<
1
)
||
(
ppt_perc
>
100
)
)
throw
new
Error
(
"ppt_perc of "
+
ppt_perc
+
" is out of range 1..100"
)
;
if
(
ppt_perc
==
100
)
return
null
;
Set
<
String
>
ppts
=
new
TreeSet
<
String
>
(
)
;
try
{
for
(
File
file
:
decl_files
)
{
LineNumberReader
fp
=
UtilMDE
.
lineNumberFileReader
(
file
)
;
for
(
String
line
=
fp
.
readLine
(
)
;
line
!=
null
;
line
=
fp
.
readLine
(
)
)
{
if
(
line
.
equals
(
""
)
||
FileIO
.
isComment
(
line
)
)
continue
;
if
(
!
line
.
equals
(
"DECLARE"
)
)
continue
;
String
ppt_name
=
fp
.
readLine
(
)
;
ppts
.
add
(
ppt_name
)
;
}
fp
.
close
(
)
;
}
}
catch
(
IOException
e
)
{
e
.
printStackTrace
(
)
;
throw
new
Error
(
e
)
;
}
int
ppt_cnt
=
(
ppts
.
size
(
)
*
ppt_perc
)
/
100
;
if
(
ppt_cnt
==
0
)
throw
new
Daikon
.
TerminationMessage
(
"ppt_perc of "
+
ppt_perc
+
"% results in processing 0 out of "
+
ppts
.
size
(
)
+
" ppts"
)
;
for
(
Iterator
<
String
>
i
=
ppts
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
String
ppt_name
=
i
.
next
(
)
;
if
(
--
ppt_cnt
<=
0
)
{
String
last_ppt_name
=
ppt_name
;
while
(
i
.
hasNext
(
)
)
{
ppt_name
=
i
.
next
(
)
;
if
(
(
last_ppt_name
.
indexOf
(
"EXIT"
)
!=
-
1
)
&&
(
ppt_name
.
indexOf
(
"EXIT"
)
==
-
1
)
)
return
(
last_ppt_name
)
;
last_ppt_name
=
ppt_name
;
}
return
(
ppt_name
)
;
}
}
throw
new
Error
(
"ppt_cnt "
+
ppt_cnt
+
" ppts.size "
+
ppts
.
size
(
)
)
;
}
