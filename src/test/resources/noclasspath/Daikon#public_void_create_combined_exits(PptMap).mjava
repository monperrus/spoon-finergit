/** 
 * Create EXIT program points as needed for EXITnn program points.
 */
public
static
void
create_combined_exits
(
PptMap
ppts
)
{
PptMap
exit_ppts
=
new
PptMap
(
)
;
for
(
Iterator
<
PptTopLevel
>
i
=
ppts
.
pptIterator
(
)
;
i
.
hasNext
(
)
;
)
{
PptTopLevel
ppt
=
i
.
next
(
)
;
if
(
!
ppt
.
is_subexit
(
)
)
continue
;
PptTopLevel
exitnn_ppt
=
ppt
;
PptName
exitnn_name
=
exitnn_ppt
.
ppt_name
;
PptName
exit_name
=
ppt
.
ppt_name
.
makeExit
(
)
;
PptTopLevel
exit_ppt
=
exit_ppts
.
get
(
exit_name
)
;
if
(
debugInit
.
isLoggable
(
Level
.
FINE
)
)
debugInit
.
fine
(
"create_combined_exits: encounted exit "
+
exitnn_ppt
.
name
(
)
)
;
if
(
exit_ppt
==
null
)
{
int
len
=
ppt
.
num_tracevars
+
ppt
.
num_static_constant_vars
;
VarInfo
[
]
exit_vars
=
new
VarInfo
[
]
;
for
(
int
j
=
0
;
j
<
len
;
j
++
)
{
exit_vars
[
j
]
=
new
VarInfo
(
ppt
.
var_infos
[
j
]
)
;
exit_vars
[
j
]
.
varinfo_index
=
ppt
.
var_infos
[
j
]
.
varinfo_index
;
exit_vars
[
j
]
.
value_index
=
ppt
.
var_infos
[
j
]
.
value_index
;
exit_vars
[
j
]
.
equalitySet
=
null
;
}
exit_ppt
=
new
PptTopLevel
(
exit_name
.
getName
(
)
,
PptTopLevel
.
PptType
.
EXIT
,
ppt
.
parent_relations
,
ppt
.
flags
,
exit_vars
)
;
exit_ppts
.
add
(
exit_ppt
)
;
if
(
debugInit
.
isLoggable
(
Level
.
FINE
)
)
debugInit
.
fine
(
"create_combined_exits: created exit "
+
exit_name
)
;
init_ppt
(
exit_ppt
,
ppts
)
;
}
}
for
(
Iterator
<
PptTopLevel
>
i
=
exit_ppts
.
pptIterator
(
)
;
i
.
hasNext
(
)
;
)
{
PptTopLevel
ppt
=
i
.
next
(
)
;
ppts
.
add
(
ppt
)
;
}
}
