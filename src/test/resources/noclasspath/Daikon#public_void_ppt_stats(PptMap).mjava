/** 
 * Print out basic statistics (samples, invariants, variables, etc) about each ppt
 */
public
static
void
ppt_stats
(
PptMap
all_ppts
)
{
int
all_ppt_cnt
=
0
;
int
ppt_w_sample_cnt
=
0
;
for
(
Iterator
<
PptTopLevel
>
i
=
all_ppts
.
pptIterator
(
)
;
i
.
hasNext
(
)
;
)
{
PptTopLevel
ppt
=
i
.
next
(
)
;
all_ppt_cnt
++
;
if
(
ppt
.
num_samples
(
)
==
0
)
continue
;
ppt_w_sample_cnt
++
;
Fmt
.
pf
(
"%s"
,
ppt
.
name
(
)
)
;
Fmt
.
pf
(
"  samples    = "
+
ppt
.
num_samples
(
)
)
;
Fmt
.
pf
(
"  invariants = "
+
ppt
.
invariant_cnt
(
)
)
;
Map
<
ProglangType
,
Count
>
type_map
=
new
LinkedHashMap
<
ProglangType
,
Count
>
(
)
;
int
leader_cnt
=
0
;
for
(
VarInfo
v
:
ppt
.
var_infos
)
{
if
(
!
v
.
isCanonical
(
)
)
continue
;
leader_cnt
++
;
Count
cnt
=
type_map
.
get
(
v
.
file_rep_type
)
;
if
(
cnt
==
null
)
type_map
.
put
(
v
.
file_rep_type
,
cnt
=
new
Count
(
0
)
)
;
cnt
.
val
++
;
}
Fmt
.
pf
(
"  vars       = "
+
ppt
.
var_infos
.
length
)
;
Fmt
.
pf
(
"  leaders    = "
+
leader_cnt
)
;
for
(
Map
.
Entry
<
ProglangType
,
Count
>
e
:
type_map
.
entrySet
(
)
)
{
ProglangType
file_rep_type
=
e
.
getKey
(
)
;
Count
cnt
=
e
.
getValue
(
)
;
Fmt
.
pf
(
"  %s  = %s"
,
file_rep_type
,
""
+
cnt
.
val
)
;
}
}
Fmt
.
pf
(
"Total ppt count     = "
+
all_ppt_cnt
)
;
Fmt
.
pf
(
"PPts w/sample count = "
+
ppt_w_sample_cnt
)
;
}
