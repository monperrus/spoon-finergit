/** 
 * Reads one ppt declaration.  The next line should be the ppt record. After completion, the file pointer will be pointing at the next record (ie, the blank line at the end of the ppt declaration will have been read in)
 */
private
static
PptTopLevel
read_ppt_decl
(
ParseState
state
,
String
top_line
)
throws
IOException
{
String
line
=
top_line
;
Scanner
scanner
=
new
Scanner
(
line
)
;
String
record_name
=
need
(
state
,
scanner
,
"'ppt'"
)
;
if
(
record_name
!=
"ppt"
)
{
decl_error
(
state
,
"found '%s' where 'ppt' expected"
,
record_name
)
;
}
String
ppt_name
=
need
(
state
,
scanner
,
"ppt name"
)
;
if
(
state
.
all_ppts
.
containsName
(
ppt_name
)
)
{
if
(
state
.
ppts_are_new
)
{
decl_error
(
state
,
"Duplicate declaration of ppt '%s'"
,
ppt_name
)
;
}
else
{
skip_decl
(
state
.
reader
)
;
return
state
.
all_ppts
.
get
(
ppt_name
)
;
}
}
Map
<
String
,
VarDefinition
>
varmap
=
new
LinkedHashMap
<
String
,
VarDefinition
>
(
)
;
VarDefinition
vardef
=
null
;
List
<
ParentRelation
>
ppt_parents
=
new
ArrayList
<
ParentRelation
>
(
)
;
EnumSet
<
PptFlags
>
ppt_flags
=
EnumSet
.
noneOf
(
PptFlags
.
class
)
;
PptType
ppt_type
=
PptType
.
POINT
;
while
(
(
line
=
state
.
reader
.
readLine
(
)
)
!=
null
)
{
debug_decl
.
log
(
"read line %s%n"
,
line
)
;
line
=
line
.
trim
(
)
;
if
(
line
.
length
(
)
==
0
)
break
;
scanner
=
new
Scanner
(
line
)
;
String
record
=
scanner
.
next
(
)
.
intern
(
)
;
if
(
vardef
==
null
)
{
if
(
record
==
"parent"
)
{
ppt_parents
.
add
(
parse_ppt_parent
(
state
,
scanner
)
)
;
}
else
if
(
record
==
"flags"
)
{
parse_ppt_flags
(
state
,
scanner
,
ppt_flags
)
;
}
else
if
(
record
==
"variable"
)
{
vardef
=
new
VarDefinition
(
state
,
scanner
)
;
if
(
var_included
(
vardef
.
name
)
)
varmap
.
put
(
vardef
.
name
,
vardef
)
;
}
else
if
(
record
==
"ppt-type"
)
{
ppt_type
=
parse_ppt_type
(
state
,
scanner
)
;
}
else
{
decl_error
(
state
,
"record '%s' found where %s expected"
,
record
,
"'parent' or 'flags'"
)
;
}
}
else
{
if
(
record
==
"var-kind"
)
{
vardef
.
parse_var_kind
(
scanner
)
;
}
else
if
(
record
==
"enclosing-var"
)
{
vardef
.
parse_enclosing_var
(
scanner
)
;
}
else
if
(
record
==
"reference-type"
)
{
vardef
.
parse_reference_type
(
scanner
)
;
}
else
if
(
record
==
"array"
)
{
vardef
.
parse_array
(
scanner
)
;
}
else
if
(
record
==
"rep-type"
)
{
vardef
.
parse_rep_type
(
scanner
)
;
}
else
if
(
record
==
"dec-type"
)
{
vardef
.
parse_dec_type
(
scanner
)
;
}
else
if
(
record
==
"flags"
)
{
vardef
.
parse_flags
(
scanner
)
;
}
else
if
(
record
==
"lang-flags"
)
{
vardef
.
parse_lang_flags
(
scanner
)
;
}
else
if
(
record
==
"parent"
)
{
vardef
.
parse_parent
(
scanner
,
ppt_parents
)
;
}
else
if
(
record
==
"comparability"
)
{
vardef
.
parse_comparability
(
scanner
)
;
}
else
if
(
record
==
"constant"
)
{
vardef
.
parse_constant
(
scanner
)
;
}
else
if
(
record
==
"variable"
)
{
vardef
=
new
VarDefinition
(
state
,
scanner
)
;
if
(
varmap
.
containsKey
(
vardef
.
name
)
)
decl_error
(
state
,
"var %s declared twice"
,
vardef
.
name
)
;
if
(
var_included
(
vardef
.
name
)
)
varmap
.
put
(
vardef
.
name
,
vardef
)
;
}
else
{
decl_error
(
state
,
"Unexpected variable item '%s' found"
,
record
)
;
}
}
}
if
(
!
ppt_included
(
ppt_name
)
)
{
omitted_declarations
++
;
return
null
;
}
VarInfo
[
]
vi_array
=
new
VarInfo
[
]
;
int
ii
=
0
;
for
(
VarDefinition
vd
:
varmap
.
values
(
)
)
{
vi_array
[
ii
++
]
=
new
VarInfo
(
vd
)
;
}
PptTopLevel
newppt
=
new
PptTopLevel
(
ppt_name
,
ppt_type
,
ppt_parents
,
ppt_flags
,
vi_array
)
;
return
newppt
;
}
