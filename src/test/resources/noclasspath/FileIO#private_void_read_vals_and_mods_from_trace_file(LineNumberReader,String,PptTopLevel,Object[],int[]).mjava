private
static
void
read_vals_and_mods_from_trace_file
(
LineNumberReader
reader
,
String
filename
,
PptTopLevel
ppt
,
Object
[
]
vals
,
int
[
]
mods
)
throws
IOException
{
VarInfo
[
]
vis
=
ppt
.
var_infos
;
int
num_tracevars
=
ppt
.
num_tracevars
;
String
[
]
oldvalue_reps
=
ppt_to_value_reps
.
get
(
ppt
)
;
if
(
oldvalue_reps
==
null
)
{
oldvalue_reps
=
new
String
[
]
;
}
if
(
Global
.
debugPrintDtrace
)
{
Global
.
dtraceWriter
.
println
(
ppt
.
name
(
)
)
;
if
(
to_write_nonce
)
{
Global
.
dtraceWriter
.
println
(
nonce_string
)
;
Global
.
dtraceWriter
.
println
(
nonce_value
)
;
to_write_nonce
=
false
;
}
}
for
(
int
vi_index
=
0
,
val_index
=
0
;
val_index
<
num_tracevars
;
vi_index
++
)
{
Assert
.
assertTrue
(
vi_index
<
vis
.
length
)
;
VarInfo
vi
=
vis
[
vi_index
]
;
Assert
.
assertTrue
(
(
!
vi
.
is_static_constant
)
||
(
vi
.
value_index
==
-
1
)
)
;
if
(
vi
.
is_static_constant
)
continue
;
Assert
.
assertTrue
(
val_index
==
vi
.
value_index
)
;
String
line
=
reader
.
readLine
(
)
;
if
(
line
==
null
)
{
throw
new
Daikon
.
TerminationMessage
(
"Unexpected end of file at "
+
data_trace_state
.
filename
+
" line "
+
reader
.
getLineNumber
(
)
+
lineSep
+
"  Expected variable "
+
vi
.
name
(
)
+
", got "
+
"null"
+
" for program point "
+
ppt
.
name
(
)
)
;
}
while
(
(
line
!=
null
)
&&
!
line
.
equals
(
""
)
&&
!
var_included
(
line
)
)
{
line
=
reader
.
readLine
(
)
;
line
=
reader
.
readLine
(
)
;
if
(
line
==
null
||
!
(
(
line
.
equals
(
"0"
)
||
line
.
equals
(
"1"
)
||
line
.
equals
(
"2"
)
)
)
)
{
throw
new
Daikon
.
TerminationMessage
(
"Bad modbit '"
+
line
+
"'"
,
reader
,
data_trace_state
.
filename
)
;
}
line
=
reader
.
readLine
(
)
;
}
if
(
!
line
.
trim
(
)
.
equals
(
vi
.
str_name
(
)
)
)
{
throw
new
Daikon
.
TerminationMessage
(
"Mismatch between .dtrace file and .decls file.  Expected variable "
+
vi
.
name
(
)
+
", got "
+
line
+
" for program point "
+
ppt
.
name
(
)
,
reader
,
data_trace_state
.
filename
)
;
}
line
=
reader
.
readLine
(
)
;
if
(
line
==
null
)
{
throw
new
Daikon
.
TerminationMessage
(
"Unexpected end of file at "
+
data_trace_state
.
filename
+
" line "
+
reader
.
getLineNumber
(
)
+
lineSep
+
"  Expected value for variable "
+
vi
.
name
(
)
+
", got "
+
"null"
+
" for program point "
+
ppt
.
name
(
)
)
;
}
String
value_rep
=
line
;
line
=
reader
.
readLine
(
)
;
if
(
line
==
null
)
{
throw
new
Daikon
.
TerminationMessage
(
"Unexpected end of file at "
+
data_trace_state
.
filename
+
" line "
+
reader
.
getLineNumber
(
)
+
lineSep
+
"  Expected modbit for variable "
+
vi
.
name
(
)
+
", got "
+
"null"
+
" for program point "
+
ppt
.
name
(
)
)
;
}
if
(
!
(
(
line
.
equals
(
"0"
)
||
line
.
equals
(
"1"
)
||
line
.
equals
(
"2"
)
)
)
)
{
throw
new
Daikon
.
TerminationMessage
(
"Bad modbit `"
+
line
+
"'"
,
reader
,
data_trace_state
.
filename
)
;
}
int
mod
=
ValueTuple
.
parseModified
(
line
)
;
Assert
.
assertTrue
(
mod
!=
ValueTuple
.
MISSING_FLOW
,
"Data trace value can't be missing due to flow"
)
;
if
(
mod
!=
ValueTuple
.
MISSING_NONSENSICAL
)
{
if
(
value_rep
.
equals
(
oldvalue_reps
[
val_index
]
)
)
{
if
(
!
dkconfig_add_changed
)
{
mod
=
ValueTuple
.
UNMODIFIED
;
}
}
else
{
mod
=
ValueTuple
.
MODIFIED
;
}
}
mods
[
val_index
]
=
mod
;
oldvalue_reps
[
val_index
]
=
value_rep
;
if
(
Global
.
debugPrintDtrace
)
{
Global
.
dtraceWriter
.
println
(
vi
.
name
(
)
)
;
Global
.
dtraceWriter
.
println
(
value_rep
)
;
Global
.
dtraceWriter
.
println
(
mod
)
;
}
Debug
dbg
=
Debug
.
newDebug
(
FileIO
.
class
,
ppt
,
Debug
.
vis
(
vi
)
)
;
if
(
dbg
!=
null
)
dbg
.
log
(
"Var "
+
vi
.
name
(
)
+
" has value "
+
value_rep
+
" mod "
+
mod
)
;
if
(
ValueTuple
.
modIsMissingNonsensical
(
mod
)
)
{
if
(
!
(
value_rep
.
equals
(
"nonsensical"
)
||
value_rep
.
equals
(
"uninit"
)
||
value_rep
.
equals
(
"missing"
)
)
)
{
throw
new
Daikon
.
TerminationMessage
(
"Modbit indicates missing value for variable "
+
vi
.
name
(
)
+
" with value \""
+
value_rep
+
"\";"
+
lineSep
+
"  text of value should be \"nonsensical\" or \"uninit\" at "
+
data_trace_state
.
filename
+
" line "
+
reader
.
getLineNumber
(
)
)
;
}
else
{
if
(
debug_missing
&&
!
vi
.
canBeMissing
)
{
System
.
out
.
printf
(
"Var %s ppt %s at line %d missing%n"
,
vi
,
ppt
.
name
(
)
,
FileIO
.
data_trace_state
.
reader
.
getLineNumber
(
)
)
;
System
.
out
.
printf
(
"val_index = %d, mods[val_index] = %d%n"
,
val_index
,
mods
[
val_index
]
)
;
}
vi
.
canBeMissing
=
true
;
}
vals
[
val_index
]
=
null
;
}
else
{
try
{
vals
[
val_index
]
=
vi
.
rep_type
.
parse_value
(
value_rep
)
;
if
(
vals
[
val_index
]
==
null
)
{
mods
[
val_index
]
=
ValueTuple
.
MISSING_NONSENSICAL
;
if
(
debug_missing
&&
!
vi
.
canBeMissing
)
System
.
out
.
printf
(
"Var %s ppt %s at line %d null-not missing%n"
,
vi
,
ppt
.
name
(
)
,
FileIO
.
data_trace_state
.
reader
.
getLineNumber
(
)
)
;
vi
.
canBeMissing
=
true
;
}
}
catch
(
Exception
e
)
{
throw
new
Daikon
.
TerminationMessage
(
"Error while parsing value "
+
value_rep
+
" for variable "
+
vi
.
name
(
)
+
" of type "
+
vi
.
rep_type
+
": "
+
e
.
toString
(
)
,
reader
,
filename
)
;
}
}
val_index
++
;
}
ppt_to_value_reps
.
put
(
ppt
,
oldvalue_reps
)
;
if
(
Global
.
debugPrintDtrace
)
{
Global
.
dtraceWriter
.
println
(
)
;
}
String
line
=
reader
.
readLine
(
)
;
while
(
(
line
!=
null
)
&&
!
line
.
equals
(
""
)
&&
!
var_included
(
line
)
)
{
line
=
reader
.
readLine
(
)
;
line
=
reader
.
readLine
(
)
;
line
=
reader
.
readLine
(
)
;
}
Assert
.
assertTrue
(
(
line
==
null
)
||
(
line
.
equals
(
""
)
)
,
"Expected blank line at line "
+
reader
.
getLineNumber
(
)
+
": "
+
line
)
;
}
