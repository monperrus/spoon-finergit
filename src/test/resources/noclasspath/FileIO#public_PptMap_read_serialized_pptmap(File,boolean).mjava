/** 
 * Read either a serialized PptMap or a InvMap and return a PptMap.  If an InvMap is specified, it is converted to a PptMap
 */
public
static
PptMap
read_serialized_pptmap
(
File
file
,
boolean
use_saved_config
)
throws
IOException
{
try
{
Object
obj
=
UtilMDE
.
readObject
(
file
)
;
if
(
obj
instanceof
FileIO
.
SerialFormat
)
{
SerialFormat
record
=
(
SerialFormat
)
obj
;
if
(
use_saved_config
)
{
Configuration
.
getInstance
(
)
.
overlap
(
record
.
config
)
;
}
FileIO
.
new_decl_format
=
record
.
new_decl_format
;
return
(
record
.
map
)
;
}
else
if
(
obj
instanceof
InvMap
)
{
InvMap
invs
=
(
InvMap
)
obj
;
PptMap
ppts
=
new
PptMap
(
)
;
for
(
Iterator
<
PptTopLevel
>
i
=
invs
.
pptIterator
(
)
;
i
.
hasNext
(
)
;
)
{
PptTopLevel
ppt
=
i
.
next
(
)
;
PptTopLevel
nppt
=
new
PptTopLevel
(
ppt
.
name
,
ppt
.
var_infos
)
;
nppt
.
set_sample_number
(
ppt
.
num_samples
(
)
)
;
ppts
.
add
(
nppt
)
;
List
<
Invariant
>
inv_list
=
invs
.
get
(
ppt
)
;
for
(
Invariant
inv
:
inv_list
)
{
PptSlice
slice
=
nppt
.
get_or_instantiate_slice
(
inv
.
ppt
.
var_infos
)
;
inv
.
ppt
=
slice
;
slice
.
addInvariant
(
inv
)
;
}
}
return
(
ppts
)
;
}
else
{
throw
new
IOException
(
"Unexpected serialized file type: "
+
obj
.
getClass
(
)
)
;
}
}
catch
(
ClassNotFoundException
e
)
{
throw
(
IOException
)
(
new
IOException
(
"Error while loading inv file"
)
.
initCause
(
e
)
)
;
}
catch
(
InvalidClassException
e
)
{
throw
new
IOException
(
"It is likely that the .inv file format has changed, because a Daikon data structure has been modified, so your old .inv file is no longer readable by Daikon.  Please regenerate your .inv file."
)
;
}
}
