/** 
 * Add derived variables 
 */
public
static
void
add_derived_variables
(
PptTopLevel
ppt
,
Object
[
]
vals
,
int
[
]
mods
)
{
ValueTuple
partial_vt
=
ValueTuple
.
makeUninterned
(
vals
,
mods
)
;
int
filled_slots
=
ppt
.
num_orig_vars
+
ppt
.
num_tracevars
+
ppt
.
num_static_constant_vars
;
for
(
int
i
=
0
;
i
<
filled_slots
;
i
++
)
{
Assert
.
assertTrue
(
!
ppt
.
var_infos
[
i
]
.
isDerived
(
)
)
;
}
for
(
int
i
=
filled_slots
;
i
<
ppt
.
var_infos
.
length
;
i
++
)
{
if
(
!
ppt
.
var_infos
[
i
]
.
isDerived
(
)
)
{
Assert
.
assertTrue
(
ppt
.
var_infos
[
i
]
.
isDerived
(
)
,
"variable not derived: "
+
ppt
.
var_infos
[
i
]
.
repr
(
)
)
;
}
}
int
num_const
=
ppt
.
num_static_constant_vars
;
for
(
int
i
=
filled_slots
;
i
<
ppt
.
var_infos
.
length
;
i
++
)
{
ValueAndModified
vm
=
ppt
.
var_infos
[
i
]
.
derived
.
computeValueAndModified
(
partial_vt
)
;
vals
[
i
-
num_const
]
=
vm
.
value
;
mods
[
i
-
num_const
]
=
vm
.
modified
;
}
}
