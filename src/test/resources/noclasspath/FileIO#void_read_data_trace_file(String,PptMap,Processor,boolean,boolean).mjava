/** 
 * Read data from .dtrace file. 
 */
static
void
read_data_trace_file
(
String
filename
,
PptMap
all_ppts
,
Processor
processor
,
boolean
is_decl_file
,
boolean
ppts_are_new
)
throws
IOException
{
if
(
debugRead
.
isLoggable
(
Level
.
FINE
)
)
{
debugRead
.
fine
(
"read_data_trace_file "
+
filename
+
(
(
Daikon
.
ppt_regexp
!=
null
)
?
" "
+
Daikon
.
ppt_regexp
.
pattern
(
)
:
""
)
+
(
(
Daikon
.
ppt_omit_regexp
!=
null
)
?
" "
+
Daikon
.
ppt_omit_regexp
.
pattern
(
)
:
""
)
)
;
}
new_decl_format
=
false
;
data_trace_state
=
new
ParseState
(
filename
,
is_decl_file
,
ppts_are_new
,
all_ppts
)
;
if
(
Global
.
debugPrintDtrace
)
{
Global
.
dtraceWriter
=
new
PrintWriter
(
new
FileWriter
(
new
File
(
filename
+
".debug"
)
)
)
;
}
while
(
true
)
{
read_data_trace_record
(
data_trace_state
)
;
if
(
data_trace_state
.
status
==
ParseStatus
.
SAMPLE
)
{
samples_processed
++
;
try
{
processor
.
process_sample
(
data_trace_state
.
all_ppts
,
data_trace_state
.
ppt
,
data_trace_state
.
vt
,
data_trace_state
.
nonce
)
;
}
catch
(
Error
e
)
{
if
(
!
dkconfig_continue_after_file_exception
)
{
throw
new
Daikon
.
TerminationMessage
(
e
,
data_trace_state
.
reader
,
data_trace_state
.
filename
)
;
}
else
{
System
.
out
.
println
(
)
;
System
.
out
.
println
(
"WARNING: Error while processing "
+
"trace file - record ignored"
)
;
System
.
out
.
print
(
"Ignored backtrace:"
)
;
e
.
printStackTrace
(
System
.
out
)
;
System
.
out
.
println
(
)
;
}
}
}
else
if
(
(
data_trace_state
.
status
==
ParseStatus
.
EOF
)
||
(
data_trace_state
.
status
==
ParseStatus
.
TRUNCATED
)
)
{
break
;
}
else
;
}
if
(
Global
.
debugPrintDtrace
)
{
Global
.
dtraceWriter
.
close
(
)
;
}
Daikon
.
progress
=
"Finished reading "
+
data_trace_state
.
filename
;
data_trace_state
=
null
;
}
