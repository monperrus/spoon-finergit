private
static
void
checkInvariants
(
)
throws
IOException
{
PptMap
ppts
=
FileIO
.
read_serialized_pptmap
(
inv_file
,
true
)
;
InvariantFilters
fi
=
InvariantFilters
.
defaultFilters
(
)
;
Set
<
Invariant
>
allInvariants
=
new
HashSet
<
Invariant
>
(
)
;
for
(
PptTopLevel
ppt
:
ppts
.
all_ppts
(
)
)
for
(
Iterator
<
PptSlice
>
i
=
ppt
.
views_iterator
(
)
;
i
.
hasNext
(
)
;
)
{
PptSlice
slice
=
i
.
next
(
)
;
for
(
Invariant
inv
:
slice
.
invs
)
{
if
(
doConf
&&
inv
.
getConfidence
(
)
<
Invariant
.
dkconfig_confidence_limit
)
{
continue
;
}
if
(
doFilter
&&
fi
.
shouldKeep
(
inv
)
==
null
)
{
continue
;
}
activeInvariants
.
add
(
inv
)
;
allInvariants
.
add
(
inv
)
;
}
}
FileIO
.
Processor
processor
=
new
InvariantCheckProcessor
(
)
;
Daikon
.
FileIOProgress
progress
=
new
Daikon
.
FileIOProgress
(
)
;
progress
.
start
(
)
;
progress
.
clear
(
)
;
FileIO
.
read_data_trace_files
(
dtrace_files
,
ppts
,
processor
,
false
)
;
progress
.
shouldStop
=
true
;
System
.
out
.
println
(
)
;
System
.
out
.
printf
(
"%s: %,d errors found in %,d samples (%s)\n"
,
inv_file
,
error_cnt
,
sample_cnt
,
toPercentage
(
error_cnt
,
sample_cnt
)
)
;
int
failedCount
=
failedInvariants
.
size
(
)
;
int
testedCount
=
testedInvariants
.
size
(
)
;
String
percent
=
toPercentage
(
failedCount
,
testedCount
)
;
System
.
out
.
println
(
inv_file
+
": "
+
failedCount
+
" false positives, out of "
+
testedCount
+
", which is "
+
percent
+
"."
)
;
if
(
false
)
{
for
(
Invariant
inv
:
failedInvariants
)
{
System
.
out
.
printf
(
"+%s:%s\n"
,
inv
.
ppt
.
name
(
)
,
inv
.
format
(
)
)
;
}
}
}
