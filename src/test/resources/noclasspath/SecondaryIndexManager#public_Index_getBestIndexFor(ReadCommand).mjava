/** 
 * Called at query time to choose which (if any) of the registered index implementations to use for a given query. This is a two step processes, firstly compiling the set of searchable indexes then choosing the one which reduces the search space the most. In the first phase, if the command's RowFilter contains any custom index expressions, the indexes that they specify are automatically included. Following that, the registered indexes are filtered to include only those which support the standard expressions in the RowFilter. The filtered set then sorted by selectivity, as reported by the Index implementations' getEstimatedResultRows method. Implementation specific validation of the target expression, either custom or standard, by the selected index should be performed in the searcherFor method to ensure that we pick the right index regardless of the validity of the expression. This method is only called once during the lifecycle of a ReadCommand and the result is cached for future use when obtaining a Searcher, getting the index's underlying CFS for ReadOrderGroup, or an estimate of the result size from an average index query.
 * @param command ReadCommand to be executed
 * @return an Index instance, ready to use during execution of the command, or null if noneof the registered indexes can support the command.
 */
public
Index
getBestIndexFor
(
ReadCommand
command
)
{
if
(
indexes
.
isEmpty
(
)
||
command
.
rowFilter
(
)
.
isEmpty
(
)
)
return
null
;
Set
<
Index
>
searchableIndexes
=
new
HashSet
<
>
(
)
;
for
(
RowFilter
.
Expression
expression
:
command
.
rowFilter
(
)
)
{
if
(
expression
.
isCustom
(
)
)
{
RowFilter
.
CustomExpression
customExpression
=
(
RowFilter
.
CustomExpression
)
expression
;
logger
.
trace
(
"Command contains a custom index expression, using target index {}"
,
customExpression
.
getTargetIndex
(
)
.
name
)
;
Tracing
.
trace
(
"Command contains a custom index expression, using target index {}"
,
customExpression
.
getTargetIndex
(
)
.
name
)
;
return
indexes
.
get
(
customExpression
.
getTargetIndex
(
)
.
name
)
;
}
else
{
indexes
.
values
(
)
.
stream
(
)
.
filter
(
index
->
index
.
supportsExpression
(
expression
.
column
(
)
,
expression
.
operator
(
)
)
)
.
forEach
(
searchableIndexes
::
add
)
;
}
}
if
(
searchableIndexes
.
isEmpty
(
)
)
{
logger
.
trace
(
"No applicable indexes found"
)
;
Tracing
.
trace
(
"No applicable indexes found"
)
;
return
null
;
}
Index
selected
=
searchableIndexes
.
size
(
)
==
1
?
Iterables
.
getOnlyElement
(
searchableIndexes
)
:
searchableIndexes
.
stream
(
)
.
min
(
(
a
,
b
)
->
Longs
.
compare
(
a
.
getEstimatedResultRows
(
)
,
b
.
getEstimatedResultRows
(
)
)
)
.
orElseThrow
(
(
)
->
new
AssertionError
(
"Could not select most selective index"
)
)
;
if
(
Tracing
.
isTracing
(
)
)
{
Tracing
.
trace
(
"Index mean cardinalities are {}. Scanning with {}."
,
searchableIndexes
.
stream
(
)
.
map
(
i
->
i
.
getIndexMetadata
(
)
.
name
+
':'
+
i
.
getEstimatedResultRows
(
)
)
.
collect
(
Collectors
.
joining
(
","
)
)
,
selected
.
getIndexMetadata
(
)
.
name
)
;
}
return
selected
;
}
