private
boolean
analyzeRemovable
(
int
p
)
{
assert
this
.
voc
.
getReason
(
p
)
!=
null
:
;
ILits
lvoc
=
this
.
voc
;
IVecInt
lanalyzestack
=
this
.
analyzestack
;
IVecInt
lanalyzetoclear
=
this
.
analyzetoclear
;
lanalyzestack
.
clear
(
)
;
lanalyzestack
.
push
(
p
)
;
final
boolean
[
]
seen
=
this
.
mseen
;
int
top
=
lanalyzetoclear
.
size
(
)
;
while
(
lanalyzestack
.
size
(
)
>
0
)
{
int
q
=
lanalyzestack
.
last
(
)
;
assert
lvoc
.
getReason
(
q
)
!=
null
:
;
Constr
c
=
lvoc
.
getReason
(
q
)
;
lanalyzestack
.
pop
(
)
;
if
(
c
.
canBePropagatedMultipleTimes
(
)
)
{
for
(
int
j
=
top
;
j
<
lanalyzetoclear
.
size
(
)
;
j
++
)
{
seen
[
lanalyzetoclear
.
get
(
j
)
>>
1
]
=
false
;
}
lanalyzetoclear
.
shrink
(
lanalyzetoclear
.
size
(
)
-
top
)
;
return
false
;
}
for
(
int
i
=
0
;
i
<
c
.
size
(
)
;
i
++
)
{
int
l
=
c
.
get
(
i
)
;
if
(
!
seen
[
var
(
l
)
]
&&
lvoc
.
isFalsified
(
l
)
&&
lvoc
.
getLevel
(
l
)
!=
0
)
{
if
(
lvoc
.
getReason
(
l
)
==
null
)
{
for
(
int
j
=
top
;
j
<
lanalyzetoclear
.
size
(
)
;
j
++
)
{
seen
[
lanalyzetoclear
.
get
(
j
)
>>
1
]
=
false
;
}
lanalyzetoclear
.
shrink
(
lanalyzetoclear
.
size
(
)
-
top
)
;
return
false
;
}
seen
[
l
>>
1
]
=
true
;
lanalyzestack
.
push
(
l
)
;
lanalyzetoclear
.
push
(
l
)
;
}
}
}
return
true
;
}
