private
boolean
analyzeRemovableWLOnly
(
int
p
)
{
assert
this
.
voc
.
getReason
(
p
)
!=
null
:
;
this
.
analyzestack
.
clear
(
)
;
this
.
analyzestack
.
push
(
p
)
;
final
boolean
[
]
seen
=
this
.
mseen
;
int
top
=
this
.
analyzetoclear
.
size
(
)
;
while
(
this
.
analyzestack
.
size
(
)
>
0
)
{
int
q
=
this
.
analyzestack
.
last
(
)
;
assert
this
.
voc
.
getReason
(
q
)
!=
null
:
;
Constr
c
=
this
.
voc
.
getReason
(
q
)
;
this
.
analyzestack
.
pop
(
)
;
for
(
int
i
=
1
;
i
<
c
.
size
(
)
;
i
++
)
{
int
l
=
c
.
get
(
i
)
;
if
(
!
seen
[
var
(
l
)
]
&&
this
.
voc
.
getLevel
(
l
)
!=
0
)
{
if
(
this
.
voc
.
getReason
(
l
)
==
null
)
{
for
(
int
j
=
top
;
j
<
this
.
analyzetoclear
.
size
(
)
;
j
++
)
{
seen
[
this
.
analyzetoclear
.
get
(
j
)
>>
1
]
=
false
;
}
this
.
analyzetoclear
.
shrink
(
this
.
analyzetoclear
.
size
(
)
-
top
)
;
return
false
;
}
seen
[
l
>>
1
]
=
true
;
this
.
analyzestack
.
push
(
l
)
;
this
.
analyzetoclear
.
push
(
l
)
;
}
}
}
return
true
;
}
