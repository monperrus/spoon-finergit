/** 
 * @param literals
 */
public
IConstr
addAtMostOnTheFly
(
int
[
]
literals
,
int
degree
)
{
IVecInt
clause
=
new
VecInt
(
literals
.
length
)
;
for
(
int
d
:
literals
)
{
clause
.
push
(
LiteralsUtils
.
toInternal
(
-
d
)
)
;
}
IVecInt
copy
=
new
VecInt
(
clause
.
size
(
)
)
;
clause
.
copyTo
(
copy
)
;
this
.
sharedConflict
=
this
.
dsfactory
.
createUnregisteredCardinalityConstraint
(
copy
,
literals
.
length
-
degree
)
;
this
.
sharedConflict
.
register
(
)
;
addConstr
(
this
.
sharedConflict
)
;
IVecInt
reason
=
new
VecInt
(
)
;
this
.
sharedConflict
.
calcReasonOnTheFly
(
ILits
.
UNDEFINED
,
trail
,
reason
)
;
Set
<
Integer
>
subset
=
fromLastDecisionLevel
(
reason
)
;
while
(
!
trail
.
isEmpty
(
)
&&
!
subset
.
contains
(
trail
.
last
(
)
)
)
{
undoOne
(
)
;
if
(
!
trailLim
.
isEmpty
(
)
&&
trailLim
.
last
(
)
==
trail
.
size
(
)
)
{
trailLim
.
pop
(
)
;
}
}
return
this
.
sharedConflict
;
}
