public
int
[
]
primeImplicant
(
)
{
assert
this
.
qhead
==
this
.
trail
.
size
(
)
+
this
.
learnedLiterals
.
size
(
)
:
;
if
(
this
.
learnedLiterals
.
size
(
)
>
0
)
{
this
.
qhead
=
trail
.
size
(
)
;
}
if
(
isVerbose
(
)
)
{
System
.
out
.
printf
(
"%s implied: %d, decision: %d %n"
,
getLogPrefix
(
)
,
implied
.
size
(
)
,
decisions
.
size
(
)
)
;
}
this
.
prime
=
new
int
[
]
;
int
p
,
d
;
for
(
int
i
=
0
;
i
<
this
.
prime
.
length
;
i
++
)
{
this
.
prime
[
i
]
=
0
;
}
boolean
noproblem
;
for
(
IteratorInt
it
=
this
.
implied
.
iterator
(
)
;
it
.
hasNext
(
)
;
)
{
d
=
it
.
next
(
)
;
p
=
toInternal
(
d
)
;
this
.
prime
[
Math
.
abs
(
d
)
]
=
d
;
noproblem
=
setAndPropagate
(
p
)
;
assert
noproblem
:
;
}
boolean
canBeRemoved
;
int
rightlevel
;
int
removed
=
0
;
int
propagated
=
0
;
int
tested
=
0
;
int
l2propagation
=
0
;
for
(
int
i
=
0
;
i
<
this
.
decisions
.
size
(
)
;
i
++
)
{
d
=
this
.
decisions
.
get
(
i
)
;
assert
!
this
.
voc
.
isFalsified
(
toInternal
(
d
)
)
:
;
if
(
this
.
voc
.
isSatisfied
(
toInternal
(
d
)
)
)
{
this
.
prime
[
Math
.
abs
(
d
)
]
=
d
;
propagated
++
;
}
else
if
(
setAndPropagate
(
toInternal
(
-
d
)
)
)
{
canBeRemoved
=
true
;
tested
++
;
rightlevel
=
currentDecisionLevel
(
)
;
for
(
int
j
=
i
+
1
;
j
<
this
.
decisions
.
size
(
)
;
j
++
)
{
l2propagation
++
;
if
(
!
setAndPropagate
(
toInternal
(
this
.
decisions
.
get
(
j
)
)
)
)
{
canBeRemoved
=
false
;
break
;
}
}
cancelUntil
(
rightlevel
)
;
if
(
canBeRemoved
)
{
forget
(
Math
.
abs
(
d
)
)
;
IConstr
confl
=
propagate
(
)
;
assert
confl
==
null
:
;
removed
++
;
}
else
{
this
.
prime
[
Math
.
abs
(
d
)
]
=
d
;
cancel
(
)
;
assert
voc
.
isUnassigned
(
toInternal
(
d
)
)
:
;
noproblem
=
setAndPropagate
(
toInternal
(
d
)
)
;
assert
noproblem
:
;
}
}
else
{
this
.
prime
[
Math
.
abs
(
d
)
]
=
d
;
cancel
(
)
;
noproblem
=
setAndPropagate
(
toInternal
(
d
)
)
;
assert
noproblem
:
;
}
}
cancelUntil
(
0
)
;
int
[
]
implicant
=
new
int
[
]
;
int
index
=
0
;
for
(
int
i
:
this
.
prime
)
{
if
(
i
!=
0
)
{
implicant
[
index
++
]
=
i
;
}
}
if
(
isVerbose
(
)
)
{
System
.
out
.
printf
(
"%s prime implicant computation statistics%n"
,
getLogPrefix
(
)
)
;
System
.
out
.
printf
(
"%s implied: %d, decision: %d (removed %d, tested %d, propagated %d), l2 propagation:%d%n"
,
getLogPrefix
(
)
,
implied
.
size
(
)
,
decisions
.
size
(
)
,
removed
,
tested
,
propagated
,
l2propagation
)
;
}
return
implicant
;
}
