/** 
 */
void
modelFound
(
)
{
IVecInt
tempmodel
=
new
VecInt
(
nVars
(
)
)
;
this
.
userbooleanmodel
=
new
boolean
[
]
;
this
.
fullmodel
=
null
;
for
(
int
i
=
1
;
i
<=
nVars
(
)
;
i
++
)
{
if
(
this
.
voc
.
belongsToPool
(
i
)
)
{
int
p
=
this
.
voc
.
getFromPool
(
i
)
;
if
(
!
this
.
voc
.
isUnassigned
(
p
)
)
{
tempmodel
.
push
(
this
.
voc
.
isSatisfied
(
p
)
?
i
:
-
i
)
;
this
.
userbooleanmodel
[
i
-
1
]
=
this
.
voc
.
isSatisfied
(
p
)
;
if
(
this
.
voc
.
getReason
(
p
)
==
null
&&
voc
.
getLevel
(
p
)
>
0
)
{
this
.
decisions
.
push
(
tempmodel
.
last
(
)
)
;
}
else
{
this
.
implied
.
push
(
tempmodel
.
last
(
)
)
;
}
}
}
}
this
.
model
=
new
int
[
]
;
tempmodel
.
copyTo
(
this
.
model
)
;
if
(
realNumberOfVariables
(
)
>
nVars
(
)
)
{
for
(
int
i
=
nVars
(
)
+
1
;
i
<=
realNumberOfVariables
(
)
;
i
++
)
{
if
(
this
.
voc
.
belongsToPool
(
i
)
)
{
int
p
=
this
.
voc
.
getFromPool
(
i
)
;
if
(
!
this
.
voc
.
isUnassigned
(
p
)
)
{
tempmodel
.
push
(
this
.
voc
.
isSatisfied
(
p
)
?
i
:
-
i
)
;
this
.
userbooleanmodel
[
i
-
1
]
=
this
.
voc
.
isSatisfied
(
p
)
;
if
(
this
.
voc
.
getReason
(
p
)
==
null
)
{
this
.
decisions
.
push
(
tempmodel
.
last
(
)
)
;
}
else
{
this
.
implied
.
push
(
tempmodel
.
last
(
)
)
;
}
}
}
}
this
.
fullmodel
=
new
int
[
]
;
tempmodel
.
moveTo
(
this
.
fullmodel
)
;
}
else
{
this
.
fullmodel
=
this
.
model
;
}
}
