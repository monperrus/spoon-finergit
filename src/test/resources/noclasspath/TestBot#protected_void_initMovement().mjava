/** 
 * consider how to put more pre-turn logic here
 */
protected
void
initMovement
(
)
{
this
.
my_mechs_moved
=
0
;
this
.
old_moves
=
null
;
this
.
enemies_moved
=
0
;
double
max_modifier
=
1.4
;
java
.
util
.
Vector
entities
=
game
.
getEntitiesVector
(
)
;
double
num_entities
=
Math
.
sqrt
(
entities
.
size
(
)
)
/
100
;
Vector
friends
=
new
Vector
(
)
;
Vector
foes
=
new
Vector
(
)
;
double
friend_sum
=
0
;
double
foe_sum
=
0
;
double
max_foe_bv
=
0
;
CEntity
max_foe
=
null
;
for
(
int
i
=
0
;
i
<
entities
.
size
(
)
;
i
++
)
{
Entity
entity
=
(
Entity
)
entities
.
elementAt
(
i
)
;
CEntity
centity
=
centities
.
get
(
entity
)
;
centity
.
enemy_num
=
i
;
double
old_value
=
centity
.
bv
*
(
centity
.
overall_armor_percent
+
1
)
;
centity
.
reset
(
)
;
double
new_value
=
centity
.
bv
*
(
centity
.
overall_armor_percent
+
1
)
;
double
percent
=
1
+
(
new_value
-
old_value
)
/
old_value
;
if
(
entity
.
getOwner
(
)
.
equals
(
getLocalPlayer
(
)
)
)
{
friends
.
add
(
centity
)
;
friend_sum
=
new_value
;
if
(
percent
<
.85
)
{
centity
.
strategy
.
attack
=
.85
;
}
else
if
(
percent
<
.95
)
{
centity
.
strategy
.
attack
=
1
;
}
else
if
(
percent
<=
1
&&
centity
.
strategy
.
attack
<
max_modifier
)
{
if
(
percent
==
1
)
{
if
(
centity
.
strategy
.
attack
<
1
)
{
centity
.
strategy
.
attack
=
Math
.
min
(
1.4
*
centity
.
strategy
.
attack
,
1
)
;
}
else
{
centity
.
strategy
.
attack
=
(
1.0
+
num_entities
)
;
}
}
else
{
centity
.
strategy
.
attack
=
(
1.0
+
2
*
num_entities
)
;
}
}
}
else
if
(
!
entity
.
getOwner
(
)
.
isEnemyOf
(
getLocalPlayer
(
)
)
)
{
friend_sum
=
new_value
;
}
else
{
foes
.
add
(
centity
)
;
foe_sum
=
new_value
;
if
(
new_value
>
max_foe_bv
)
{
max_foe_bv
=
new_value
;
max_foe
=
centity
;
}
if
(
this
.
getEntitiesOwned
(
)
.
size
(
)
>
2
)
{
if
(
centity
.
strategy
.
target
>
2
)
{
centity
.
strategy
.
target
=
1
+
.5
*
(
centity
.
strategy
.
target
-
2
)
;
}
if
(
percent
<
.85
&&
centity
.
strategy
.
target
<
max_modifier
)
{
centity
.
strategy
.
target
=
(
1.0
+
6
*
num_entities
)
;
}
else
if
(
percent
<
.95
&&
centity
.
strategy
.
target
<
max_modifier
)
{
centity
.
strategy
.
target
=
(
1.0
+
4
*
num_entities
)
;
}
else
if
(
percent
<=
1
)
{
if
(
percent
==
1
)
{
centity
.
strategy
.
target
=
(
1.0
+
2
*
num_entities
)
;
}
else
{
centity
.
strategy
.
target
=
(
1.0
+
num_entities
)
;
}
}
if
(
centity
.
strategy
.
target
<
1
)
centity
.
strategy
.
target
=
1
;
}
}
}
System
.
out
.
println
(
"Us "
+
friend_sum
+
" Them "
+
foe_sum
)
;
if
(
this
.
unit_values
.
size
(
)
==
0
)
{
this
.
unit_values
.
add
(
new
Double
(
friend_sum
)
)
;
this
.
enemy_values
.
add
(
new
Double
(
foe_sum
)
)
;
return
;
}
Iterator
i
=
foes
.
iterator
(
)
;
if
(
friends
.
size
(
)
>
1
)
{
if
(
Strategy
.
MainTarget
==
null
||
null
==
game
.
getEntity
(
Strategy
.
MainTarget
.
getEntity
(
)
.
getId
(
)
)
)
{
Strategy
.
MainTarget
=
max_foe
;
}
if
(
null
==
Strategy
.
MainTarget
)
System
.
err
.
println
(
"TestBot#initMovement() - no main target for bot"
)
;
else
if
(
null
==
Strategy
.
MainTarget
.
strategy
)
System
.
err
.
println
(
"TestBot#initMovement() - no strategy for main target"
)
;
else
{
Strategy
.
MainTarget
.
strategy
.
target
=
.2
;
while
(
i
.
hasNext
(
)
)
{
CEntity
centity
=
(
CEntity
)
i
.
next
(
)
;
if
(
friend_sum
-
foe_sum
>=
.9
*
(
(
(
Double
)
this
.
unit_values
.
getLast
(
)
)
.
doubleValue
(
)
-
(
(
Double
)
this
.
enemy_values
.
getLast
(
)
)
.
doubleValue
(
)
)
)
{
if
(
Compute
.
randomInt
(
2
)
==
1
)
{
centity
.
strategy
.
target
=
.3
;
}
}
else
if
(
friend_sum
>
.9
*
foe_sum
)
{
centity
.
strategy
.
target
=
.15
;
}
else
if
(
centity
.
strategy
.
target
<
2
)
{
centity
.
strategy
.
target
=
.3
;
}
System
.
out
.
println
(
centity
.
getEntity
(
)
.
getShortName
(
)
+
" "
+
centity
.
strategy
.
target
)
;
}
}
}
double
ratio
=
friend_sum
/
foe_sum
;
double
mod
=
1
;
if
(
ratio
<
.9
)
{
mod
=
.95
;
}
else
if
(
ratio
<
1
)
{
}
else
{
mod
=
(
1.0
+
num_entities
)
;
}
i
=
friends
.
iterator
(
)
;
while
(
i
.
hasNext
(
)
)
{
CEntity
centity
=
(
CEntity
)
i
.
next
(
)
;
if
(
!
(
mod
<
1
&&
centity
.
strategy
.
attack
<
.6
)
&&
!
(
mod
>
1
&&
centity
.
strategy
.
attack
>=
max_modifier
)
)
centity
.
strategy
.
attack
=
mod
;
}
System
.
gc
(
)
;
}
