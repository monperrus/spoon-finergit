@Override
public
Cache
.
Entry
<
K
,
V
>
next
(
)
{
try
{
Cache
.
Entry
<
K
,
Store
.
ValueHolder
<
V
>
>
next
=
iterator
.
next
(
)
;
final
K
nextKey
=
next
.
getKey
(
)
;
Store
.
ValueHolder
<
V
>
nextValueHolder
=
next
.
getValue
(
)
;
if
(
cache
.
getNoLoader
(
nextKey
)
==
null
)
{
current
=
null
;
return
null
;
}
current
=
next
;
final
V
nextValue
=
nextValueHolder
.
value
(
)
;
return
new
Cache
.
Entry
<
K
,
V
>
(
)
{
@Override
public
K
getKey
(
)
{
return
nextKey
;
}
@Override
public
V
getValue
(
)
{
return
nextValue
;
}
}
;
}
catch
(
StoreAccessException
sae
)
{
current
=
null
;
return
null
;
}
}
