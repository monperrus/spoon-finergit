/** 
 * Loads the hunspell dictionary for the given local.
 * @param locale       The locale of the hunspell dictionary to be loaded.
 * @param nodeSettings The node level settings
 * @param env          The node environment (from which the conf path will be resolved)
 * @return The loaded Hunspell dictionary
 * @throws Exception when loading fails (due to IO errors or malformed dictionary files)
 */
private
Dictionary
loadDictionary
(
String
locale
,
Settings
nodeSettings
,
Environment
env
)
throws
Exception
{
if
(
logger
.
isDebugEnabled
(
)
)
{
logger
.
debug
(
"Loading hunspell dictionary [{}]..."
,
locale
)
;
}
Path
dicDir
=
hunspellDir
.
resolve
(
locale
)
;
if
(
FileSystemUtils
.
isAccessibleDirectory
(
dicDir
,
logger
)
==
false
)
{
throw
new
ElasticsearchException
(
String
.
format
(
Locale
.
ROOT
,
"Could not find hunspell dictionary [%s]"
,
locale
)
)
;
}
Settings
dictSettings
=
HUNSPELL_DICTIONARY_OPTIONS
.
get
(
nodeSettings
)
;
nodeSettings
=
loadDictionarySettings
(
dicDir
,
dictSettings
.
getByPrefix
(
locale
+
"."
)
)
;
boolean
ignoreCase
=
nodeSettings
.
getAsBoolean
(
"ignore_case"
,
defaultIgnoreCase
)
;
Path
[
]
affixFiles
=
FileSystemUtils
.
files
(
dicDir
,
"*.aff"
)
;
if
(
affixFiles
.
length
==
0
)
{
throw
new
ElasticsearchException
(
String
.
format
(
Locale
.
ROOT
,
"Missing affix file for hunspell dictionary [%s]"
,
locale
)
)
;
}
if
(
affixFiles
.
length
!=
1
)
{
throw
new
ElasticsearchException
(
String
.
format
(
Locale
.
ROOT
,
"Too many affix files exist for hunspell dictionary [%s]"
,
locale
)
)
;
}
InputStream
affixStream
=
null
;
Path
[
]
dicFiles
=
FileSystemUtils
.
files
(
dicDir
,
"*.dic"
)
;
List
<
InputStream
>
dicStreams
=
new
ArrayList
<
>
(
dicFiles
.
length
)
;
try
{
for
(
int
i
=
0
;
i
<
dicFiles
.
length
;
i
++
)
{
dicStreams
.
add
(
Files
.
newInputStream
(
dicFiles
[
i
]
)
)
;
}
affixStream
=
Files
.
newInputStream
(
affixFiles
[
0
]
)
;
try
(
Directory
tmp
=
new
SimpleFSDirectory
(
env
.
tmpFile
(
)
)
)
{
return
new
Dictionary
(
tmp
,
"hunspell"
,
affixStream
,
dicStreams
,
ignoreCase
)
;
}
}
catch
(
Exception
e
)
{
logger
.
error
(
"Could not load hunspell dictionary [{}]"
,
e
,
locale
)
;
throw
e
;
}
finally
{
IOUtils
.
close
(
affixStream
)
;
IOUtils
.
close
(
dicStreams
)
;
}
}
