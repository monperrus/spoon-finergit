/** 
 * Sets up a fragment and returns the number of characters consumed from the given String. An average character width can be provided as a hint for faster calculation.  If a fragment's bidi level is set, a TextLayout will be used to calculate the width.
 * @param frag the TextFragmentBox
 * @param string the String
 * @param font the Font used for measuring
 * @param context the flow context
 * @param wrapping the word wrap style
 * @return the number of characters that will fit in the given space; can be 0 (eg., whenthe first character of the given string is a newline)
 */
final
protected
int
wrapFragmentInContext
(
TextFragmentBox
frag
,
String
string
,
FlowContext
context
,
LookAhead
lookahead
,
Font
font
,
int
wrapping
)
{
frag
.
setTruncated
(
false
)
;
int
strLen
=
string
.
length
(
)
;
if
(
strLen
==
0
)
{
frag
.
setWidth
(
-
1
)
;
frag
.
length
=
0
;
setupFragment
(
frag
,
font
,
string
)
;
context
.
addToCurrentLine
(
frag
)
;
return
0
;
}
INTERNAL_LINE_BREAK
.
setText
(
string
)
;
initBidi
(
frag
,
string
,
font
)
;
float
avgCharWidth
=
getAverageCharWidth
(
frag
,
font
)
;
frag
.
setWidth
(
-
1
)
;
int
absoluteMin
=
0
;
int
max
,
min
=
1
;
if
(
wrapping
==
ParagraphTextLayout
.
WORD_WRAP_HARD
)
{
absoluteMin
=
INTERNAL_LINE_BREAK
.
next
(
)
;
while
(
absoluteMin
>
0
&&
Character
.
isWhitespace
(
string
.
charAt
(
absoluteMin
-
1
)
)
)
absoluteMin
--
;
min
=
Math
.
max
(
absoluteMin
,
1
)
;
}
int
firstDelimiter
=
findFirstDelimeter
(
string
)
;
if
(
firstDelimiter
==
0
)
min
=
max
=
0
;
else
max
=
Math
.
min
(
strLen
,
firstDelimiter
)
+
1
;
int
availableWidth
=
context
.
getRemainingLineWidth
(
)
;
int
guess
=
0
,
guessSize
=
0
;
while
(
true
)
{
if
(
(
max
-
min
)
<=
1
)
{
if
(
min
==
absoluteMin
&&
context
.
isCurrentLineOccupied
(
)
&&
!
context
.
getContinueOnSameLine
(
)
&&
availableWidth
<
measureString
(
frag
,
string
,
min
,
font
)
+
(
(
min
==
strLen
&&
lookahead
!=
null
)
?
lookahead
.
getWidth
(
)
:
0
)
)
{
context
.
endLine
(
)
;
availableWidth
=
context
.
getRemainingLineWidth
(
)
;
max
=
Math
.
min
(
strLen
,
firstDelimiter
)
+
1
;
if
(
(
max
-
min
)
<=
1
)
break
;
}
else
break
;
}
guess
=
0.5f
+
(
availableWidth
-
guessSize
)
/
avgCharWidth
;
if
(
guess
>=
max
)
guess
=
max
-
1
;
if
(
guess
<=
min
)
guess
=
min
+
1
;
guessSize
=
measureString
(
frag
,
string
,
guess
,
font
)
;
if
(
guess
==
strLen
&&
lookahead
!=
null
&&
!
canBreakAfter
(
string
.
charAt
(
strLen
-
1
)
)
&&
guessSize
+
lookahead
.
getWidth
(
)
>
availableWidth
)
{
max
=
guess
;
continue
;
}
if
(
guessSize
<=
availableWidth
)
{
min
=
guess
;
frag
.
setWidth
(
guessSize
)
;
if
(
guessSize
==
availableWidth
)
max
=
guess
+
1
;
}
else
max
=
guess
;
}
int
result
=
min
;
boolean
continueOnLine
=
false
;
if
(
min
==
strLen
)
{
if
(
string
.
charAt
(
strLen
-
1
)
==
' '
)
{
if
(
frag
.
getWidth
(
)
==
-
1
)
{
frag
.
length
=
result
;
frag
.
setWidth
(
measureString
(
frag
,
string
,
result
,
font
)
)
;
}
if
(
lookahead
.
getWidth
(
)
>
availableWidth
-
frag
.
getWidth
(
)
)
{
frag
.
length
=
result
-
1
;
frag
.
setWidth
(
-
1
)
;
}
else
frag
.
length
=
result
;
}
else
{
continueOnLine
=
!
canBreakAfter
(
string
.
charAt
(
strLen
-
1
)
)
;
frag
.
length
=
result
;
}
}
else
if
(
min
==
firstDelimiter
)
{
frag
.
length
=
result
;
if
(
string
.
charAt
(
min
)
==
'\r'
)
{
result
++
;
if
(
++
min
<
strLen
&&
string
.
charAt
(
min
)
==
'\n'
)
result
++
;
}
else
if
(
string
.
charAt
(
min
)
==
'\n'
)
result
++
;
}
else
if
(
string
.
charAt
(
min
)
==
' '
||
canBreakAfter
(
string
.
charAt
(
min
-
1
)
)
||
INTERNAL_LINE_BREAK
.
isBoundary
(
min
)
)
{
frag
.
length
=
min
;
if
(
string
.
charAt
(
min
)
==
' '
)
result
++
;
else
if
(
string
.
charAt
(
min
-
1
)
==
' '
)
{
frag
.
length
--
;
frag
.
setWidth
(
-
1
)
;
}
}
else
out
:
{
result
=
INTERNAL_LINE_BREAK
.
preceding
(
min
)
;
if
(
result
==
0
)
{
switch
(
wrapping
)
{
case
ParagraphTextLayout
.
WORD_WRAP_TRUNCATE
:
int
truncatedWidth
=
availableWidth
-
getEllipsisWidth
(
font
)
;
if
(
truncatedWidth
>
0
)
{
while
(
min
>
0
)
{
guessSize
=
measureString
(
frag
,
string
,
min
,
font
)
;
if
(
guessSize
<=
truncatedWidth
)
break
;
min
--
;
}
frag
.
length
=
min
;
}
else
frag
.
length
=
0
;
frag
.
setTruncated
(
true
)
;
result
=
INTERNAL_LINE_BREAK
.
following
(
max
-
1
)
;
break
out
;
default
:
result
=
min
;
break
;
}
}
frag
.
length
=
result
;
if
(
string
.
charAt
(
result
-
1
)
==
' '
)
frag
.
length
--
;
frag
.
setWidth
(
-
1
)
;
}
setupFragment
(
frag
,
font
,
string
)
;
context
.
addToCurrentLine
(
frag
)
;
context
.
setContinueOnSameLine
(
continueOnLine
)
;
return
result
;
}
